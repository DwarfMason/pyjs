# Generated from js_grammar.g4 by ANTLR 4.8
# encoding: utf-8
from antlr4 import *
from io import StringIO
import sys


if sys.version_info[1] > 5:
	from typing import TextIO
else:
	from typing.io import TextIO


def serializedATN():
    with StringIO() as buf:
        buf.write("\3\u608b\ua72a\u8133\ub9ed\u417c\u3be7\u7786\u5964\3}")
        buf.write("\u03ab\4\2\t\2\4\3\t\3\4\4\t\4\4\5\t\5\4\6\t\6\4\7\t\7")
        buf.write("\4\b\t\b\4\t\t\t\4\n\t\n\4\13\t\13\4\f\t\f\4\r\t\r\4\16")
        buf.write("\t\16\4\17\t\17\4\20\t\20\4\21\t\21\4\22\t\22\4\23\t\23")
        buf.write("\4\24\t\24\4\25\t\25\4\26\t\26\4\27\t\27\4\30\t\30\4\31")
        buf.write("\t\31\4\32\t\32\4\33\t\33\4\34\t\34\4\35\t\35\4\36\t\36")
        buf.write("\4\37\t\37\4 \t \4!\t!\4\"\t\"\4#\t#\4$\t$\4%\t%\4&\t")
        buf.write("&\4\'\t\'\4(\t(\4)\t)\4*\t*\4+\t+\4,\t,\4-\t-\4.\t.\4")
        buf.write("/\t/\4\60\t\60\4\61\t\61\4\62\t\62\4\63\t\63\4\64\t\64")
        buf.write("\4\65\t\65\4\66\t\66\4\67\t\67\48\t8\49\t9\4:\t:\4;\t")
        buf.write(";\4<\t<\4=\t=\4>\t>\4?\t?\4@\t@\4A\tA\4B\tB\4C\tC\4D\t")
        buf.write("D\4E\tE\4F\tF\4G\tG\4H\tH\3\2\5\2\u0092\n\2\3\2\3\2\3")
        buf.write("\3\3\3\3\4\3\4\3\4\3\4\3\4\3\4\3\4\3\4\3\4\3\4\3\4\3\4")
        buf.write("\3\4\3\4\3\4\3\4\3\4\3\4\3\4\3\4\3\4\3\4\3\4\3\4\3\4\3")
        buf.write("\4\3\4\3\4\3\4\3\4\5\4\u00b6\n\4\3\5\3\5\5\5\u00ba\n\5")
        buf.write("\3\5\3\5\3\6\6\6\u00bf\n\6\r\6\16\6\u00c0\3\7\3\7\3\7")
        buf.write("\3\b\5\b\u00c7\n\b\3\b\3\b\5\b\u00cb\n\b\3\b\3\b\3\b\3")
        buf.write("\b\3\b\5\b\u00d2\n\b\3\t\3\t\3\t\3\t\7\t\u00d8\n\t\f\t")
        buf.write("\16\t\u00db\13\t\3\t\3\t\5\t\u00df\n\t\5\t\u00e1\n\t\3")
        buf.write("\t\3\t\3\n\3\n\3\n\3\13\3\13\3\13\5\13\u00eb\n\13\3\f")
        buf.write("\3\f\3\f\3\r\3\r\3\r\5\r\u00f3\n\r\3\16\3\16\3\16\5\16")
        buf.write("\u00f8\n\16\3\16\3\16\3\16\3\16\3\16\3\16\3\16\5\16\u0101")
        buf.write("\n\16\3\17\3\17\3\17\3\17\3\17\3\17\5\17\u0109\n\17\3")
        buf.write("\17\3\17\5\17\u010d\n\17\3\20\3\20\3\20\5\20\u0112\n\20")
        buf.write("\3\21\3\21\3\21\3\22\3\22\3\22\3\22\7\22\u011b\n\22\f")
        buf.write("\22\16\22\u011e\13\22\3\23\3\23\3\23\5\23\u0123\n\23\3")
        buf.write("\24\3\24\3\25\3\25\3\25\3\25\3\26\3\26\3\26\3\26\3\26")
        buf.write("\3\26\3\26\5\26\u0132\n\26\3\27\3\27\3\27\3\27\3\27\3")
        buf.write("\27\3\27\3\27\3\27\3\27\3\27\3\27\3\27\3\27\3\27\3\27")
        buf.write("\3\27\3\27\5\27\u0146\n\27\3\27\3\27\5\27\u014a\n\27\3")
        buf.write("\27\3\27\5\27\u014e\n\27\3\27\3\27\3\27\3\27\3\27\3\27")
        buf.write("\5\27\u0156\n\27\3\27\3\27\3\27\3\27\3\27\5\27\u015d\n")
        buf.write("\27\3\30\3\30\3\31\3\31\3\31\5\31\u0164\n\31\3\31\3\31")
        buf.write("\3\32\3\32\3\32\5\32\u016b\n\32\3\32\3\32\3\33\3\33\3")
        buf.write("\33\5\33\u0172\n\33\3\33\3\33\3\34\3\34\3\34\5\34\u0179")
        buf.write("\n\34\3\34\3\34\3\35\3\35\3\35\3\35\3\35\3\35\3\36\3\36")
        buf.write("\3\36\3\36\3\36\3\36\3\37\3\37\5\37\u018b\n\37\3\37\3")
        buf.write("\37\5\37\u018f\n\37\5\37\u0191\n\37\3\37\3\37\3 \6 \u0196")
        buf.write("\n \r \16 \u0197\3!\3!\3!\3!\5!\u019e\n!\3\"\3\"\3\"\5")
        buf.write("\"\u01a3\n\"\3#\3#\3#\3#\3$\3$\3$\3$\3$\3%\3%\3%\3%\5")
        buf.write("%\u01b2\n%\3%\5%\u01b5\n%\3&\3&\3&\5&\u01ba\n&\3&\5&\u01bd")
        buf.write("\n&\3&\3&\3\'\3\'\3\'\3(\3(\3(\3)\5)\u01c8\n)\3)\3)\5")
        buf.write(")\u01cc\n)\3)\3)\3)\5)\u01d1\n)\3)\3)\3)\3)\3)\3*\3*\3")
        buf.write("*\3*\3+\3+\5+\u01de\n+\3+\3+\7+\u01e2\n+\f+\16+\u01e5")
        buf.write("\13+\3+\3+\3,\3,\3,\5,\u01ec\n,\3,\3,\3,\3,\5,\u01f2\n")
        buf.write(",\3-\3-\3-\5-\u01f7\n-\3-\3-\3-\3-\3-\3-\3-\3-\3-\5-\u0202")
        buf.write("\n-\3-\3-\3-\3-\3-\3-\3-\3-\5-\u020c\n-\3-\3-\3-\3-\3")
        buf.write("-\3-\3-\3-\3-\3-\3-\3-\3-\3-\3-\5-\u021d\n-\3-\3-\3-\3")
        buf.write("-\3-\5-\u0224\n-\3.\3.\3.\7.\u0229\n.\f.\16.\u022c\13")
        buf.write(".\3.\3.\5.\u0230\n.\3.\5.\u0233\n.\3/\3/\3/\5/\u0238\n")
        buf.write("/\3\60\3\60\3\60\3\61\5\61\u023e\n\61\3\62\6\62\u0241")
        buf.write("\n\62\r\62\16\62\u0242\3\63\3\63\3\63\3\63\3\64\7\64\u024a")
        buf.write("\n\64\f\64\16\64\u024d\13\64\3\64\5\64\u0250\n\64\3\64")
        buf.write("\6\64\u0253\n\64\r\64\16\64\u0254\3\64\7\64\u0258\n\64")
        buf.write("\f\64\16\64\u025b\13\64\3\64\7\64\u025e\n\64\f\64\16\64")
        buf.write("\u0261\13\64\3\65\5\65\u0264\n\65\3\65\3\65\3\65\3\66")
        buf.write("\3\66\3\66\3\66\7\66\u026d\n\66\f\66\16\66\u0270\13\66")
        buf.write("\5\66\u0272\n\66\3\66\5\66\u0275\n\66\3\66\3\66\3\67\3")
        buf.write("\67\3\67\3\67\3\67\3\67\3\67\3\67\3\67\3\67\3\67\5\67")
        buf.write("\u0284\n\67\3\67\5\67\u0287\n\67\3\67\3\67\3\67\5\67\u028c")
        buf.write("\n\67\3\67\3\67\3\67\3\67\3\67\3\67\3\67\3\67\3\67\3\67")
        buf.write("\3\67\3\67\3\67\3\67\3\67\3\67\3\67\3\67\3\67\3\67\3\67")
        buf.write("\5\67\u02a3\n\67\3\67\5\67\u02a6\n\67\38\38\38\38\38\3")
        buf.write("8\38\58\u02af\n8\39\39\39\39\79\u02b5\n9\f9\169\u02b8")
        buf.write("\139\39\59\u02bb\n9\59\u02bd\n9\39\39\3:\5:\u02c2\n:\3")
        buf.write(":\3:\5:\u02c6\n:\3;\3;\3;\7;\u02cb\n;\f;\16;\u02ce\13")
        buf.write(";\3<\3<\3<\3<\5<\u02d4\n<\3<\3<\3<\3<\5<\u02da\n<\3<\3")
        buf.write("<\3<\3<\3<\3<\3<\3<\3<\3<\3<\3<\3<\3<\3<\3<\3<\3<\3<\3")
        buf.write("<\3<\3<\3<\3<\3<\3<\3<\3<\3<\3<\3<\3<\3<\3<\3<\3<\3<\3")
        buf.write("<\3<\3<\3<\3<\3<\5<\u0307\n<\3<\3<\3<\3<\3<\3<\3<\3<\3")
        buf.write("<\3<\3<\3<\3<\3<\3<\3<\3<\3<\3<\3<\3<\3<\3<\3<\3<\3<\3")
        buf.write("<\3<\3<\3<\3<\3<\3<\3<\3<\3<\3<\3<\3<\3<\3<\3<\3<\3<\3")
        buf.write("<\3<\3<\3<\3<\3<\3<\3<\3<\3<\3<\3<\3<\3<\3<\3<\3<\3<\5")
        buf.write("<\u0347\n<\3<\3<\5<\u034b\n<\3<\3<\3<\3<\3<\3<\3<\3<\3")
        buf.write("<\3<\3<\7<\u0358\n<\f<\16<\u035b\13<\3=\3=\3=\5=\u0360")
        buf.write("\n=\3>\3>\5>\u0364\n>\3>\3>\5>\u0368\n>\3>\3>\5>\u036c")
        buf.write("\n>\3>\3>\3>\3>\3>\3>\5>\u0374\n>\3>\3>\3>\3>\5>\u037a")
        buf.write("\n>\3?\3?\3?\5?\u037f\n?\3?\5?\u0382\n?\3@\3@\3@\3@\3")
        buf.write("@\5@\u0389\n@\3A\3A\3B\3B\3B\3B\3B\3B\3B\5B\u0394\nB\3")
        buf.write("C\3C\3D\3D\3E\3E\5E\u039c\nE\3F\3F\3F\5F\u03a1\nF\3G\3")
        buf.write("G\3H\3H\3H\3H\5H\u03a9\nH\3H\2\3vI\2\4\6\b\n\f\16\20\22")
        buf.write("\24\26\30\32\34\36 \"$&(*,.\60\62\64\668:<>@BDFHJLNPR")
        buf.write("TVXZ\\^`bdfhjlnprtvxz|~\u0080\u0082\u0084\u0086\u0088")
        buf.write("\u008a\u008c\u008e\2\f\4\2LMdd\3\2\34\36\3\2\30\31\3\2")
        buf.write("\37!\3\2\"%\3\2&)\4\2\7\7/9\3\2=@\3\2AD\4\2Ebdu\2\u0419")
        buf.write("\2\u0091\3\2\2\2\4\u0095\3\2\2\2\6\u00b5\3\2\2\2\b\u00b7")
        buf.write("\3\2\2\2\n\u00be\3\2\2\2\f\u00c2\3\2\2\2\16\u00d1\3\2")
        buf.write("\2\2\20\u00d3\3\2\2\2\22\u00e4\3\2\2\2\24\u00e7\3\2\2")
        buf.write("\2\26\u00ec\3\2\2\2\30\u00ef\3\2\2\2\32\u0100\3\2\2\2")
        buf.write("\34\u010c\3\2\2\2\36\u0111\3\2\2\2 \u0113\3\2\2\2\"\u0116")
        buf.write("\3\2\2\2$\u011f\3\2\2\2&\u0124\3\2\2\2(\u0126\3\2\2\2")
        buf.write("*\u012a\3\2\2\2,\u015c\3\2\2\2.\u015e\3\2\2\2\60\u0160")
        buf.write("\3\2\2\2\62\u0167\3\2\2\2\64\u016e\3\2\2\2\66\u0175\3")
        buf.write("\2\2\28\u017c\3\2\2\2:\u0182\3\2\2\2<\u0188\3\2\2\2>\u0195")
        buf.write("\3\2\2\2@\u0199\3\2\2\2B\u019f\3\2\2\2D\u01a4\3\2\2\2")
        buf.write("F\u01a8\3\2\2\2H\u01ad\3\2\2\2J\u01b6\3\2\2\2L\u01c0\3")
        buf.write("\2\2\2N\u01c3\3\2\2\2P\u01c7\3\2\2\2R\u01d7\3\2\2\2T\u01dd")
        buf.write("\3\2\2\2V\u01f1\3\2\2\2X\u0223\3\2\2\2Z\u0232\3\2\2\2")
        buf.write("\\\u0234\3\2\2\2^\u0239\3\2\2\2`\u023d\3\2\2\2b\u0240")
        buf.write("\3\2\2\2d\u0244\3\2\2\2f\u024b\3\2\2\2h\u0263\3\2\2\2")
        buf.write("j\u0268\3\2\2\2l\u02a5\3\2\2\2n\u02ae\3\2\2\2p\u02b0\3")
        buf.write("\2\2\2r\u02c1\3\2\2\2t\u02c7\3\2\2\2v\u0306\3\2\2\2x\u035f")
        buf.write("\3\2\2\2z\u0379\3\2\2\2|\u0381\3\2\2\2~\u0388\3\2\2\2")
        buf.write("\u0080\u038a\3\2\2\2\u0082\u0393\3\2\2\2\u0084\u0395\3")
        buf.write("\2\2\2\u0086\u0397\3\2\2\2\u0088\u039b\3\2\2\2\u008a\u03a0")
        buf.write("\3\2\2\2\u008c\u03a2\3\2\2\2\u008e\u03a8\3\2\2\2\u0090")
        buf.write("\u0092\5b\62\2\u0091\u0090\3\2\2\2\u0091\u0092\3\2\2\2")
        buf.write("\u0092\u0093\3\2\2\2\u0093\u0094\7\2\2\3\u0094\3\3\2\2")
        buf.write("\2\u0095\u0096\5\6\4\2\u0096\5\3\2\2\2\u0097\u00b6\5\b")
        buf.write("\5\2\u0098\u00b6\5 \21\2\u0099\u00b6\5\f\7\2\u009a\u00b6")
        buf.write("\5\32\16\2\u009b\u00b6\5&\24\2\u009c\u00b6\5R*\2\u009d")
        buf.write("\u00b6\5(\25\2\u009e\u00b6\5*\26\2\u009f\u00b6\5,\27\2")
        buf.write("\u00a0\u00b6\5\60\31\2\u00a1\u00b6\5\62\32\2\u00a2\u00b6")
        buf.write("\5\64\33\2\u00a3\u00a4\5\66\34\2\u00a4\u00a5\b\4\1\2\u00a5")
        buf.write("\u00b6\3\2\2\2\u00a6\u00b6\58\35\2\u00a7\u00b6\5D#\2\u00a8")
        buf.write("\u00a9\5:\36\2\u00a9\u00aa\b\4\1\2\u00aa\u00b6\3\2\2\2")
        buf.write("\u00ab\u00ac\5F$\2\u00ac\u00ad\b\4\1\2\u00ad\u00b6\3\2")
        buf.write("\2\2\u00ae\u00af\5H%\2\u00af\u00b0\b\4\1\2\u00b0\u00b6")
        buf.write("\3\2\2\2\u00b1\u00b2\5N(\2\u00b2\u00b3\b\4\1\2\u00b3\u00b6")
        buf.write("\3\2\2\2\u00b4\u00b6\5P)\2\u00b5\u0097\3\2\2\2\u00b5\u0098")
        buf.write("\3\2\2\2\u00b5\u0099\3\2\2\2\u00b5\u009a\3\2\2\2\u00b5")
        buf.write("\u009b\3\2\2\2\u00b5\u009c\3\2\2\2\u00b5\u009d\3\2\2\2")
        buf.write("\u00b5\u009e\3\2\2\2\u00b5\u009f\3\2\2\2\u00b5\u00a0\3")
        buf.write("\2\2\2\u00b5\u00a1\3\2\2\2\u00b5\u00a2\3\2\2\2\u00b5\u00a3")
        buf.write("\3\2\2\2\u00b5\u00a6\3\2\2\2\u00b5\u00a7\3\2\2\2\u00b5")
        buf.write("\u00a8\3\2\2\2\u00b5\u00ab\3\2\2\2\u00b5\u00ae\3\2\2\2")
        buf.write("\u00b5\u00b1\3\2\2\2\u00b5\u00b4\3\2\2\2\u00b6\7\3\2\2")
        buf.write("\2\u00b7\u00b9\7\16\2\2\u00b8\u00ba\5\n\6\2\u00b9\u00b8")
        buf.write("\3\2\2\2\u00b9\u00ba\3\2\2\2\u00ba\u00bb\3\2\2\2\u00bb")
        buf.write("\u00bc\7\17\2\2\u00bc\t\3\2\2\2\u00bd\u00bf\5\6\4\2\u00be")
        buf.write("\u00bd\3\2\2\2\u00bf\u00c0\3\2\2\2\u00c0\u00be\3\2\2\2")
        buf.write("\u00c0\u00c1\3\2\2\2\u00c1\13\3\2\2\2\u00c2\u00c3\7n\2")
        buf.write("\2\u00c3\u00c4\5\16\b\2\u00c4\r\3\2\2\2\u00c5\u00c7\5")
        buf.write("\22\n\2\u00c6\u00c5\3\2\2\2\u00c6\u00c7\3\2\2\2\u00c7")
        buf.write("\u00ca\3\2\2\2\u00c8\u00cb\5\24\13\2\u00c9\u00cb\5\20")
        buf.write("\t\2\u00ca\u00c8\3\2\2\2\u00ca\u00c9\3\2\2\2\u00cb\u00cc")
        buf.write("\3\2\2\2\u00cc\u00cd\5\26\f\2\u00cd\u00ce\5\u008eH\2\u00ce")
        buf.write("\u00d2\3\2\2\2\u00cf\u00d0\7w\2\2\u00d0\u00d2\5\u008e")
        buf.write("H\2\u00d1\u00c6\3\2\2\2\u00d1\u00cf\3\2\2\2\u00d2\17\3")
        buf.write("\2\2\2\u00d3\u00d9\7\16\2\2\u00d4\u00d5\5\30\r\2\u00d5")
        buf.write("\u00d6\7\21\2\2\u00d6\u00d8\3\2\2\2\u00d7\u00d4\3\2\2")
        buf.write("\2\u00d8\u00db\3\2\2\2\u00d9\u00d7\3\2\2\2\u00d9\u00da")
        buf.write("\3\2\2\2\u00da\u00e0\3\2\2\2\u00db\u00d9\3\2\2\2\u00dc")
        buf.write("\u00de\5\30\r\2\u00dd\u00df\7\21\2\2\u00de\u00dd\3\2\2")
        buf.write("\2\u00de\u00df\3\2\2\2\u00df\u00e1\3\2\2\2\u00e0\u00dc")
        buf.write("\3\2\2\2\u00e0\u00e1\3\2\2\2\u00e1\u00e2\3\2\2\2\u00e2")
        buf.write("\u00e3\7\17\2\2\u00e3\21\3\2\2\2\u00e4\u00e5\5\30\r\2")
        buf.write("\u00e5\u00e6\7\21\2\2\u00e6\23\3\2\2\2\u00e7\u00ea\7\34")
        buf.write("\2\2\u00e8\u00e9\7j\2\2\u00e9\u00eb\5\u0088E\2\u00ea\u00e8")
        buf.write("\3\2\2\2\u00ea\u00eb\3\2\2\2\u00eb\25\3\2\2\2\u00ec\u00ed")
        buf.write("\7k\2\2\u00ed\u00ee\7w\2\2\u00ee\27\3\2\2\2\u00ef\u00f2")
        buf.write("\5\u0088E\2\u00f0\u00f1\7j\2\2\u00f1\u00f3\5\u0088E\2")
        buf.write("\u00f2\u00f0\3\2\2\2\u00f2\u00f3\3\2\2\2\u00f3\31\3\2")
        buf.write("\2\2\u00f4\u00f7\7m\2\2\u00f5\u00f8\5\34\17\2\u00f6\u00f8")
        buf.write("\5\36\20\2\u00f7\u00f5\3\2\2\2\u00f7\u00f6\3\2\2\2\u00f8")
        buf.write("\u00f9\3\2\2\2\u00f9\u00fa\5\u008eH\2\u00fa\u0101\3\2")
        buf.write("\2\2\u00fb\u00fc\7m\2\2\u00fc\u00fd\7Z\2\2\u00fd\u00fe")
        buf.write("\5v<\2\u00fe\u00ff\5\u008eH\2\u00ff\u0101\3\2\2\2\u0100")
        buf.write("\u00f4\3\2\2\2\u0100\u00fb\3\2\2\2\u0101\33\3\2\2\2\u0102")
        buf.write("\u0103\5\24\13\2\u0103\u0104\5\26\f\2\u0104\u0105\5\u008e")
        buf.write("H\2\u0105\u010d\3\2\2\2\u0106\u0108\5\20\t\2\u0107\u0109")
        buf.write("\5\26\f\2\u0108\u0107\3\2\2\2\u0108\u0109\3\2\2\2\u0109")
        buf.write("\u010a\3\2\2\2\u010a\u010b\5\u008eH\2\u010b\u010d\3\2")
        buf.write("\2\2\u010c\u0102\3\2\2\2\u010c\u0106\3\2\2\2\u010d\35")
        buf.write("\3\2\2\2\u010e\u0112\5 \21\2\u010f\u0112\5R*\2\u0110\u0112")
        buf.write("\5P)\2\u0111\u010e\3\2\2\2\u0111\u010f\3\2\2\2\u0111\u0110")
        buf.write("\3\2\2\2\u0112\37\3\2\2\2\u0113\u0114\5\"\22\2\u0114\u0115")
        buf.write("\5\u008eH\2\u0115!\3\2\2\2\u0116\u0117\5.\30\2\u0117\u011c")
        buf.write("\5$\23\2\u0118\u0119\7\21\2\2\u0119\u011b\5$\23\2\u011a")
        buf.write("\u0118\3\2\2\2\u011b\u011e\3\2\2\2\u011c\u011a\3\2\2\2")
        buf.write("\u011c\u011d\3\2\2\2\u011d#\3\2\2\2\u011e\u011c\3\2\2")
        buf.write("\2\u011f\u0122\5x=\2\u0120\u0121\7\22\2\2\u0121\u0123")
        buf.write("\5v<\2\u0122\u0120\3\2\2\2\u0122\u0123\3\2\2\2\u0123%")
        buf.write("\3\2\2\2\u0124\u0125\7\20\2\2\u0125\'\3\2\2\2\u0126\u0127")
        buf.write("\6\25\2\2\u0127\u0128\5t;\2\u0128\u0129\5\u008eH\2\u0129")
        buf.write(")\3\2\2\2\u012a\u012b\7[\2\2\u012b\u012c\7\f\2\2\u012c")
        buf.write("\u012d\5t;\2\u012d\u012e\7\r\2\2\u012e\u0131\5\6\4\2\u012f")
        buf.write("\u0130\7J\2\2\u0130\u0132\5\6\4\2\u0131\u012f\3\2\2\2")
        buf.write("\u0131\u0132\3\2\2\2\u0132+\3\2\2\2\u0133\u0134\7F\2\2")
        buf.write("\u0134\u0135\5\6\4\2\u0135\u0136\7U\2\2\u0136\u0137\7")
        buf.write("\f\2\2\u0137\u0138\5t;\2\u0138\u0139\7\r\2\2\u0139\u013a")
        buf.write("\5\u008eH\2\u013a\u015d\3\2\2\2\u013b\u013c\7U\2\2\u013c")
        buf.write("\u013d\7\f\2\2\u013d\u013e\5t;\2\u013e\u013f\7\r\2\2\u013f")
        buf.write("\u0140\5\6\4\2\u0140\u015d\3\2\2\2\u0141\u0142\7S\2\2")
        buf.write("\u0142\u0145\7\f\2\2\u0143\u0146\5t;\2\u0144\u0146\5\"")
        buf.write("\22\2\u0145\u0143\3\2\2\2\u0145\u0144\3\2\2\2\u0145\u0146")
        buf.write("\3\2\2\2\u0146\u0147\3\2\2\2\u0147\u0149\7\20\2\2\u0148")
        buf.write("\u014a\5t;\2\u0149\u0148\3\2\2\2\u0149\u014a\3\2\2\2\u014a")
        buf.write("\u014b\3\2\2\2\u014b\u014d\7\20\2\2\u014c\u014e\5t;\2")
        buf.write("\u014d\u014c\3\2\2\2\u014d\u014e\3\2\2\2\u014e\u014f\3")
        buf.write("\2\2\2\u014f\u0150\7\r\2\2\u0150\u015d\5\6\4\2\u0151\u0152")
        buf.write("\7S\2\2\u0152\u0155\7\f\2\2\u0153\u0156\5v<\2\u0154\u0156")
        buf.write("\5\"\22\2\u0155\u0153\3\2\2\2\u0155\u0154\3\2\2\2\u0156")
        buf.write("\u0157\3\2\2\2\u0157\u0158\7^\2\2\u0158\u0159\5t;\2\u0159")
        buf.write("\u015a\7\r\2\2\u015a\u015b\5\6\4\2\u015b\u015d\3\2\2\2")
        buf.write("\u015c\u0133\3\2\2\2\u015c\u013b\3\2\2\2\u015c\u0141\3")
        buf.write("\2\2\2\u015c\u0151\3\2\2\2\u015d-\3\2\2\2\u015e\u015f")
        buf.write("\t\2\2\2\u015f/\3\2\2\2\u0160\u0163\7R\2\2\u0161\u0162")
        buf.write("\6\31\3\2\u0162\u0164\7v\2\2\u0163\u0161\3\2\2\2\u0163")
        buf.write("\u0164\3\2\2\2\u0164\u0165\3\2\2\2\u0165\u0166\5\u008e")
        buf.write("H\2\u0166\61\3\2\2\2\u0167\u016a\7E\2\2\u0168\u0169\6")
        buf.write("\32\4\2\u0169\u016b\7v\2\2\u016a\u0168\3\2\2\2\u016a\u016b")
        buf.write("\3\2\2\2\u016b\u016c\3\2\2\2\u016c\u016d\5\u008eH\2\u016d")
        buf.write("\63\3\2\2\2\u016e\u0171\7P\2\2\u016f\u0170\6\33\5\2\u0170")
        buf.write("\u0172\5t;\2\u0171\u016f\3\2\2\2\u0171\u0172\3\2\2\2\u0172")
        buf.write("\u0173\3\2\2\2\u0173\u0174\5\u008eH\2\u0174\65\3\2\2\2")
        buf.write("\u0175\u0178\7u\2\2\u0176\u0177\6\34\6\2\u0177\u0179\5")
        buf.write("t;\2\u0178\u0176\3\2\2\2\u0178\u0179\3\2\2\2\u0179\u017a")
        buf.write("\3\2\2\2\u017a\u017b\5\u008eH\2\u017b\67\3\2\2\2\u017c")
        buf.write("\u017d\7Y\2\2\u017d\u017e\7\f\2\2\u017e\u017f\5t;\2\u017f")
        buf.write("\u0180\7\r\2\2\u0180\u0181\5\6\4\2\u01819\3\2\2\2\u0182")
        buf.write("\u0183\7T\2\2\u0183\u0184\7\f\2\2\u0184\u0185\5t;\2\u0185")
        buf.write("\u0186\7\r\2\2\u0186\u0187\5<\37\2\u0187;\3\2\2\2\u0188")
        buf.write("\u018a\7\16\2\2\u0189\u018b\5> \2\u018a\u0189\3\2\2\2")
        buf.write("\u018a\u018b\3\2\2\2\u018b\u0190\3\2\2\2\u018c\u018e\5")
        buf.write("B\"\2\u018d\u018f\5> \2\u018e\u018d\3\2\2\2\u018e\u018f")
        buf.write("\3\2\2\2\u018f\u0191\3\2\2\2\u0190\u018c\3\2\2\2\u0190")
        buf.write("\u0191\3\2\2\2\u0191\u0192\3\2\2\2\u0192\u0193\7\17\2")
        buf.write("\2\u0193=\3\2\2\2\u0194\u0196\5@!\2\u0195\u0194\3\2\2")
        buf.write("\2\u0196\u0197\3\2\2\2\u0197\u0195\3\2\2\2\u0197\u0198")
        buf.write("\3\2\2\2\u0198?\3\2\2\2\u0199\u019a\7I\2\2\u019a\u019b")
        buf.write("\5t;\2\u019b\u019d\7\24\2\2\u019c\u019e\5\n\6\2\u019d")
        buf.write("\u019c\3\2\2\2\u019d\u019e\3\2\2\2\u019eA\3\2\2\2\u019f")
        buf.write("\u01a0\7Z\2\2\u01a0\u01a2\7\24\2\2\u01a1\u01a3\5\n\6\2")
        buf.write("\u01a2\u01a1\3\2\2\2\u01a2\u01a3\3\2\2\2\u01a3C\3\2\2")
        buf.write("\2\u01a4\u01a5\7v\2\2\u01a5\u01a6\7\24\2\2\u01a6\u01a7")
        buf.write("\5\6\4\2\u01a7E\3\2\2\2\u01a8\u01a9\7\\\2\2\u01a9\u01aa")
        buf.write("\6$\7\2\u01aa\u01ab\5t;\2\u01ab\u01ac\5\u008eH\2\u01ac")
        buf.write("G\3\2\2\2\u01ad\u01ae\7_\2\2\u01ae\u01b4\5\b\5\2\u01af")
        buf.write("\u01b1\5J&\2\u01b0\u01b2\5L\'\2\u01b1\u01b0\3\2\2\2\u01b1")
        buf.write("\u01b2\3\2\2\2\u01b2\u01b5\3\2\2\2\u01b3\u01b5\5L\'\2")
        buf.write("\u01b4\u01af\3\2\2\2\u01b4\u01b3\3\2\2\2\u01b5I\3\2\2")
        buf.write("\2\u01b6\u01bc\7N\2\2\u01b7\u01b9\7\f\2\2\u01b8\u01ba")
        buf.write("\5x=\2\u01b9\u01b8\3\2\2\2\u01b9\u01ba\3\2\2\2\u01ba\u01bb")
        buf.write("\3\2\2\2\u01bb\u01bd\7\r\2\2\u01bc\u01b7\3\2\2\2\u01bc")
        buf.write("\u01bd\3\2\2\2\u01bd\u01be\3\2\2\2\u01be\u01bf\5\b\5\2")
        buf.write("\u01bfK\3\2\2\2\u01c0\u01c1\7O\2\2\u01c1\u01c2\5\b\5\2")
        buf.write("\u01c2M\3\2\2\2\u01c3\u01c4\7V\2\2\u01c4\u01c5\5\u008e")
        buf.write("H\2\u01c5O\3\2\2\2\u01c6\u01c8\7h\2\2\u01c7\u01c6\3\2")
        buf.write("\2\2\u01c7\u01c8\3\2\2\2\u01c8\u01c9\3\2\2\2\u01c9\u01cb")
        buf.write("\7W\2\2\u01ca\u01cc\7\34\2\2\u01cb\u01ca\3\2\2\2\u01cb")
        buf.write("\u01cc\3\2\2\2\u01cc\u01cd\3\2\2\2\u01cd\u01ce\7v\2\2")
        buf.write("\u01ce\u01d0\7\f\2\2\u01cf\u01d1\5Z.\2\u01d0\u01cf\3\2")
        buf.write("\2\2\u01d0\u01d1\3\2\2\2\u01d1\u01d2\3\2\2\2\u01d2\u01d3")
        buf.write("\7\r\2\2\u01d3\u01d4\7\16\2\2\u01d4\u01d5\5`\61\2\u01d5")
        buf.write("\u01d6\7\17\2\2\u01d6Q\3\2\2\2\u01d7\u01d8\7`\2\2\u01d8")
        buf.write("\u01d9\7v\2\2\u01d9\u01da\5T+\2\u01daS\3\2\2\2\u01db\u01dc")
        buf.write("\7a\2\2\u01dc\u01de\5v<\2\u01dd\u01db\3\2\2\2\u01dd\u01de")
        buf.write("\3\2\2\2\u01de\u01df\3\2\2\2\u01df\u01e3\7\16\2\2\u01e0")
        buf.write("\u01e2\5V,\2\u01e1\u01e0\3\2\2\2\u01e2\u01e5\3\2\2\2\u01e3")
        buf.write("\u01e1\3\2\2\2\u01e3\u01e4\3\2\2\2\u01e4\u01e6\3\2\2\2")
        buf.write("\u01e5\u01e3\3\2\2\2\u01e6\u01e7\7\17\2\2\u01e7U\3\2\2")
        buf.write("\2\u01e8\u01f2\5X-\2\u01e9\u01f2\5&\24\2\u01ea\u01ec\7")
        buf.write("\3\2\2\u01eb\u01ea\3\2\2\2\u01eb\u01ec\3\2\2\2\u01ec\u01ed")
        buf.write("\3\2\2\2\u01ed\u01ee\5n8\2\u01ee\u01ef\7\22\2\2\u01ef")
        buf.write("\u01f0\5v<\2\u01f0\u01f2\3\2\2\2\u01f1\u01e8\3\2\2\2\u01f1")
        buf.write("\u01e9\3\2\2\2\u01f1\u01eb\3\2\2\2\u01f2W\3\2\2\2\u01f3")
        buf.write("\u01f4\7c\2\2\u01f4\u01f6\7\f\2\2\u01f5\u01f7\5Z.\2\u01f6")
        buf.write("\u01f5\3\2\2\2\u01f6\u01f7\3\2\2\2\u01f7\u01f8\3\2\2\2")
        buf.write("\u01f8\u01f9\7\r\2\2\u01f9\u01fa\7\16\2\2\u01fa\u01fb")
        buf.write("\5`\61\2\u01fb\u01fc\7\17\2\2\u01fc\u0224\3\2\2\2\u01fd")
        buf.write("\u01fe\7e\2\2\u01fe\u01ff\7v\2\2\u01ff\u0201\7\f\2\2\u0200")
        buf.write("\u0202\5Z.\2\u0201\u0200\3\2\2\2\u0201\u0202\3\2\2\2\u0202")
        buf.write("\u0203\3\2\2\2\u0203\u0204\7\r\2\2\u0204\u0205\7\16\2")
        buf.write("\2\u0205\u0206\5`\61\2\u0206\u0207\7\17\2\2\u0207\u0224")
        buf.write("\3\2\2\2\u0208\u0209\7v\2\2\u0209\u020b\7\f\2\2\u020a")
        buf.write("\u020c\5Z.\2\u020b\u020a\3\2\2\2\u020b\u020c\3\2\2\2\u020c")
        buf.write("\u020d\3\2\2\2\u020d\u020e\7\r\2\2\u020e\u020f\7\16\2")
        buf.write("\2\u020f\u0210\5`\61\2\u0210\u0211\7\17\2\2\u0211\u0224")
        buf.write("\3\2\2\2\u0212\u0213\7f\2\2\u0213\u0214\7\f\2\2\u0214")
        buf.write("\u0215\7\r\2\2\u0215\u0216\7\16\2\2\u0216\u0217\5`\61")
        buf.write("\2\u0217\u0218\7\17\2\2\u0218\u0224\3\2\2\2\u0219\u021a")
        buf.write("\7g\2\2\u021a\u021c\7\f\2\2\u021b\u021d\5Z.\2\u021c\u021b")
        buf.write("\3\2\2\2\u021c\u021d\3\2\2\2\u021d\u021e\3\2\2\2\u021e")
        buf.write("\u021f\7\r\2\2\u021f\u0220\7\16\2\2\u0220\u0221\5`\61")
        buf.write("\2\u0221\u0222\7\17\2\2\u0222\u0224\3\2\2\2\u0223\u01f3")
        buf.write("\3\2\2\2\u0223\u01fd\3\2\2\2\u0223\u0208\3\2\2\2\u0223")
        buf.write("\u0212\3\2\2\2\u0223\u0219\3\2\2\2\u0224Y\3\2\2\2\u0225")
        buf.write("\u022a\5\\/\2\u0226\u0227\7\21\2\2\u0227\u0229\5\\/\2")
        buf.write("\u0228\u0226\3\2\2\2\u0229\u022c\3\2\2\2\u022a\u0228\3")
        buf.write("\2\2\2\u022a\u022b\3\2\2\2\u022b\u022f\3\2\2\2\u022c\u022a")
        buf.write("\3\2\2\2\u022d\u022e\7\21\2\2\u022e\u0230\5^\60\2\u022f")
        buf.write("\u022d\3\2\2\2\u022f\u0230\3\2\2\2\u0230\u0233\3\2\2\2")
        buf.write("\u0231\u0233\5^\60\2\u0232\u0225\3\2\2\2\u0232\u0231\3")
        buf.write("\2\2\2\u0233[\3\2\2\2\u0234\u0237\5x=\2\u0235\u0236\7")
        buf.write("\22\2\2\u0236\u0238\5v<\2\u0237\u0235\3\2\2\2\u0237\u0238")
        buf.write("\3\2\2\2\u0238]\3\2\2\2\u0239\u023a\7:\2\2\u023a\u023b")
        buf.write("\5v<\2\u023b_\3\2\2\2\u023c\u023e\5b\62\2\u023d\u023c")
        buf.write("\3\2\2\2\u023d\u023e\3\2\2\2\u023ea\3\2\2\2\u023f\u0241")
        buf.write("\5\4\3\2\u0240\u023f\3\2\2\2\u0241\u0242\3\2\2\2\u0242")
        buf.write("\u0240\3\2\2\2\u0242\u0243\3\2\2\2\u0243c\3\2\2\2\u0244")
        buf.write("\u0245\7\n\2\2\u0245\u0246\5f\64\2\u0246\u0247\7\13\2")
        buf.write("\2\u0247e\3\2\2\2\u0248\u024a\7\21\2\2\u0249\u0248\3\2")
        buf.write("\2\2\u024a\u024d\3\2\2\2\u024b\u0249\3\2\2\2\u024b\u024c")
        buf.write("\3\2\2\2\u024c\u024f\3\2\2\2\u024d\u024b\3\2\2\2\u024e")
        buf.write("\u0250\5h\65\2\u024f\u024e\3\2\2\2\u024f\u0250\3\2\2\2")
        buf.write("\u0250\u0259\3\2\2\2\u0251\u0253\7\21\2\2\u0252\u0251")
        buf.write("\3\2\2\2\u0253\u0254\3\2\2\2\u0254\u0252\3\2\2\2\u0254")
        buf.write("\u0255\3\2\2\2\u0255\u0256\3\2\2\2\u0256\u0258\5h\65\2")
        buf.write("\u0257\u0252\3\2\2\2\u0258\u025b\3\2\2\2\u0259\u0257\3")
        buf.write("\2\2\2\u0259\u025a\3\2\2\2\u025a\u025f\3\2\2\2\u025b\u0259")
        buf.write("\3\2\2\2\u025c\u025e\7\21\2\2\u025d\u025c\3\2\2\2\u025e")
        buf.write("\u0261\3\2\2\2\u025f\u025d\3\2\2\2\u025f\u0260\3\2\2\2")
        buf.write("\u0260g\3\2\2\2\u0261\u025f\3\2\2\2\u0262\u0264\7:\2\2")
        buf.write("\u0263\u0262\3\2\2\2\u0263\u0264\3\2\2\2\u0264\u0265\3")
        buf.write("\2\2\2\u0265\u0266\5v<\2\u0266\u0267\b\65\1\2\u0267i\3")
        buf.write("\2\2\2\u0268\u0271\7\16\2\2\u0269\u026e\5l\67\2\u026a")
        buf.write("\u026b\7\21\2\2\u026b\u026d\5l\67\2\u026c\u026a\3\2\2")
        buf.write("\2\u026d\u0270\3\2\2\2\u026e\u026c\3\2\2\2\u026e\u026f")
        buf.write("\3\2\2\2\u026f\u0272\3\2\2\2\u0270\u026e\3\2\2\2\u0271")
        buf.write("\u0269\3\2\2\2\u0271\u0272\3\2\2\2\u0272\u0274\3\2\2\2")
        buf.write("\u0273\u0275\7\21\2\2\u0274\u0273\3\2\2\2\u0274\u0275")
        buf.write("\3\2\2\2\u0275\u0276\3\2\2\2\u0276\u0277\7\17\2\2\u0277")
        buf.write("k\3\2\2\2\u0278\u0279\5n8\2\u0279\u027a\7\24\2\2\u027a")
        buf.write("\u027b\5v<\2\u027b\u02a6\3\2\2\2\u027c\u027d\7\n\2\2\u027d")
        buf.write("\u027e\5v<\2\u027e\u027f\7\13\2\2\u027f\u0280\7\24\2\2")
        buf.write("\u0280\u0281\5v<\2\u0281\u02a6\3\2\2\2\u0282\u0284\7h")
        buf.write("\2\2\u0283\u0282\3\2\2\2\u0283\u0284\3\2\2\2\u0284\u0286")
        buf.write("\3\2\2\2\u0285\u0287\7\34\2\2\u0286\u0285\3\2\2\2\u0286")
        buf.write("\u0287\3\2\2\2\u0287\u0288\3\2\2\2\u0288\u0289\5n8\2\u0289")
        buf.write("\u028b\7\f\2\2\u028a\u028c\5Z.\2\u028b\u028a\3\2\2\2\u028b")
        buf.write("\u028c\3\2\2\2\u028c\u028d\3\2\2\2\u028d\u028e\7\r\2\2")
        buf.write("\u028e\u028f\7\16\2\2\u028f\u0290\5`\61\2\u0290\u0291")
        buf.write("\7\17\2\2\u0291\u02a6\3\2\2\2\u0292\u0293\7f\2\2\u0293")
        buf.write("\u0294\7\f\2\2\u0294\u0295\7\r\2\2\u0295\u0296\7\16\2")
        buf.write("\2\u0296\u0297\5`\61\2\u0297\u0298\7\17\2\2\u0298\u02a6")
        buf.write("\3\2\2\2\u0299\u029a\7g\2\2\u029a\u029b\7\f\2\2\u029b")
        buf.write("\u029c\5\\/\2\u029c\u029d\7\r\2\2\u029d\u029e\7\16\2\2")
        buf.write("\u029e\u029f\5`\61\2\u029f\u02a0\7\17\2\2\u02a0\u02a6")
        buf.write("\3\2\2\2\u02a1\u02a3\7:\2\2\u02a2\u02a1\3\2\2\2\u02a2")
        buf.write("\u02a3\3\2\2\2\u02a3\u02a4\3\2\2\2\u02a4\u02a6\5v<\2\u02a5")
        buf.write("\u0278\3\2\2\2\u02a5\u027c\3\2\2\2\u02a5\u0283\3\2\2\2")
        buf.write("\u02a5\u0292\3\2\2\2\u02a5\u0299\3\2\2\2\u02a5\u02a2\3")
        buf.write("\2\2\2\u02a6m\3\2\2\2\u02a7\u02af\5\u0088E\2\u02a8\u02af")
        buf.write("\7w\2\2\u02a9\u02af\5\u0084C\2\u02aa\u02ab\7\n\2\2\u02ab")
        buf.write("\u02ac\5v<\2\u02ac\u02ad\7\13\2\2\u02ad\u02af\3\2\2\2")
        buf.write("\u02ae\u02a7\3\2\2\2\u02ae\u02a8\3\2\2\2\u02ae\u02a9\3")
        buf.write("\2\2\2\u02ae\u02aa\3\2\2\2\u02afo\3\2\2\2\u02b0\u02bc")
        buf.write("\7\f\2\2\u02b1\u02b6\5r:\2\u02b2\u02b3\7\21\2\2\u02b3")
        buf.write("\u02b5\5r:\2\u02b4\u02b2\3\2\2\2\u02b5\u02b8\3\2\2\2\u02b6")
        buf.write("\u02b4\3\2\2\2\u02b6\u02b7\3\2\2\2\u02b7\u02ba\3\2\2\2")
        buf.write("\u02b8\u02b6\3\2\2\2\u02b9\u02bb\7\21\2\2\u02ba\u02b9")
        buf.write("\3\2\2\2\u02ba\u02bb\3\2\2\2\u02bb\u02bd\3\2\2\2\u02bc")
        buf.write("\u02b1\3\2\2\2\u02bc\u02bd\3\2\2\2\u02bd\u02be\3\2\2\2")
        buf.write("\u02be\u02bf\7\r\2\2\u02bfq\3\2\2\2\u02c0\u02c2\7:\2\2")
        buf.write("\u02c1\u02c0\3\2\2\2\u02c1\u02c2\3\2\2\2\u02c2\u02c5\3")
        buf.write("\2\2\2\u02c3\u02c6\5v<\2\u02c4\u02c6\7v\2\2\u02c5\u02c3")
        buf.write("\3\2\2\2\u02c5\u02c4\3\2\2\2\u02c6s\3\2\2\2\u02c7\u02cc")
        buf.write("\5v<\2\u02c8\u02c9\7\21\2\2\u02c9\u02cb\5v<\2\u02ca\u02c8")
        buf.write("\3\2\2\2\u02cb\u02ce\3\2\2\2\u02cc\u02ca\3\2\2\2\u02cc")
        buf.write("\u02cd\3\2\2\2\u02cdu\3\2\2\2\u02ce\u02cc\3\2\2\2\u02cf")
        buf.write("\u02d0\b<\1\2\u02d0\u0307\5z>\2\u02d1\u02d3\7`\2\2\u02d2")
        buf.write("\u02d4\7v\2\2\u02d3\u02d2\3\2\2\2\u02d3\u02d4\3\2\2\2")
        buf.write("\u02d4\u02d5\3\2\2\2\u02d5\u0307\5T+\2\u02d6\u02d7\7K")
        buf.write("\2\2\u02d7\u02d9\5v<\2\u02d8\u02da\5p9\2\u02d9\u02d8\3")
        buf.write("\2\2\2\u02d9\u02da\3\2\2\2\u02da\u0307\3\2\2\2\u02db\u02dc")
        buf.write("\7K\2\2\u02dc\u02dd\7\25\2\2\u02dd\u0307\7v\2\2\u02de")
        buf.write("\u02df\7]\2\2\u02df\u0307\5v<\'\u02e0\u02e1\7Q\2\2\u02e1")
        buf.write("\u0307\5v<&\u02e2\u02e3\7H\2\2\u02e3\u0307\5v<%\u02e4")
        buf.write("\u02e5\7\26\2\2\u02e5\u0307\5v<$\u02e6\u02e7\7\27\2\2")
        buf.write("\u02e7\u0307\5v<#\u02e8\u02e9\7\30\2\2\u02e9\u0307\5v")
        buf.write("<\"\u02ea\u02eb\7\31\2\2\u02eb\u0307\5v<!\u02ec\u02ed")
        buf.write("\7\32\2\2\u02ed\u0307\5v< \u02ee\u02ef\7\33\2\2\u02ef")
        buf.write("\u0307\5v<\37\u02f0\u02f1\7i\2\2\u02f1\u02f2\5v<\36\u02f2")
        buf.write("\u02f3\b<\1\2\u02f3\u0307\3\2\2\2\u02f4\u02f5\7n\2\2\u02f5")
        buf.write("\u02f6\7\f\2\2\u02f6\u02f7\5v<\2\u02f7\u02f8\7\r\2\2\u02f8")
        buf.write("\u0307\3\2\2\2\u02f9\u02fa\5\66\34\2\u02fa\u02fb\b<\1")
        buf.write("\2\u02fb\u0307\3\2\2\2\u02fc\u0307\7X\2\2\u02fd\u0307")
        buf.write("\7v\2\2\u02fe\u0307\7b\2\2\u02ff\u0307\5\u0082B\2\u0300")
        buf.write("\u0307\5d\63\2\u0301\u0307\5j\66\2\u0302\u0303\7\f\2\2")
        buf.write("\u0303\u0304\5t;\2\u0304\u0305\7\r\2\2\u0305\u0307\3\2")
        buf.write("\2\2\u0306\u02cf\3\2\2\2\u0306\u02d1\3\2\2\2\u0306\u02d6")
        buf.write("\3\2\2\2\u0306\u02db\3\2\2\2\u0306\u02de\3\2\2\2\u0306")
        buf.write("\u02e0\3\2\2\2\u0306\u02e2\3\2\2\2\u0306\u02e4\3\2\2\2")
        buf.write("\u0306\u02e6\3\2\2\2\u0306\u02e8\3\2\2\2\u0306\u02ea\3")
        buf.write("\2\2\2\u0306\u02ec\3\2\2\2\u0306\u02ee\3\2\2\2\u0306\u02f0")
        buf.write("\3\2\2\2\u0306\u02f4\3\2\2\2\u0306\u02f9\3\2\2\2\u0306")
        buf.write("\u02fc\3\2\2\2\u0306\u02fd\3\2\2\2\u0306\u02fe\3\2\2\2")
        buf.write("\u0306\u02ff\3\2\2\2\u0306\u0300\3\2\2\2\u0306\u0301\3")
        buf.write("\2\2\2\u0306\u0302\3\2\2\2\u0307\u0359\3\2\2\2\u0308\u0309")
        buf.write("\f\35\2\2\u0309\u030a\7\4\2\2\u030a\u0358\5v<\35\u030b")
        buf.write("\u030c\f\34\2\2\u030c\u030d\t\3\2\2\u030d\u0358\5v<\35")
        buf.write("\u030e\u030f\f\33\2\2\u030f\u0310\t\4\2\2\u0310\u0358")
        buf.write("\5v<\34\u0311\u0312\f\32\2\2\u0312\u0313\7\5\2\2\u0313")
        buf.write("\u0358\5v<\33\u0314\u0315\f\31\2\2\u0315\u0316\t\5\2\2")
        buf.write("\u0316\u0358\5v<\32\u0317\u0318\f\30\2\2\u0318\u0319\t")
        buf.write("\6\2\2\u0319\u0358\5v<\31\u031a\u031b\f\27\2\2\u031b\u031c")
        buf.write("\7G\2\2\u031c\u0358\5v<\30\u031d\u031e\f\26\2\2\u031e")
        buf.write("\u031f\7^\2\2\u031f\u0358\5v<\27\u0320\u0321\f\25\2\2")
        buf.write("\u0321\u0322\t\7\2\2\u0322\u0358\5v<\26\u0323\u0324\f")
        buf.write("\24\2\2\u0324\u0325\7*\2\2\u0325\u0358\5v<\25\u0326\u0327")
        buf.write("\f\23\2\2\u0327\u0328\7+\2\2\u0328\u0358\5v<\24\u0329")
        buf.write("\u032a\f\22\2\2\u032a\u032b\7,\2\2\u032b\u0358\5v<\23")
        buf.write("\u032c\u032d\f\21\2\2\u032d\u032e\7-\2\2\u032e\u0358\5")
        buf.write("v<\22\u032f\u0330\f\20\2\2\u0330\u0331\7.\2\2\u0331\u0358")
        buf.write("\5v<\21\u0332\u0333\f\17\2\2\u0333\u0334\7\23\2\2\u0334")
        buf.write("\u0335\5v<\2\u0335\u0336\7\24\2\2\u0336\u0337\5v<\20\u0337")
        buf.write("\u0358\3\2\2\2\u0338\u0339\f\16\2\2\u0339\u033a\7\22\2")
        buf.write("\2\u033a\u0358\5v<\16\u033b\u033c\f\r\2\2\u033c\u033d")
        buf.write("\5\u0080A\2\u033d\u033e\5v<\r\u033e\u0358\3\2\2\2\u033f")
        buf.write("\u0340\f.\2\2\u0340\u0341\7\n\2\2\u0341\u0342\5t;\2\u0342")
        buf.write("\u0343\7\13\2\2\u0343\u0358\3\2\2\2\u0344\u0346\f-\2\2")
        buf.write("\u0345\u0347\7\23\2\2\u0346\u0345\3\2\2\2\u0346\u0347")
        buf.write("\3\2\2\2\u0347\u0348\3\2\2\2\u0348\u034a\7\25\2\2\u0349")
        buf.write("\u034b\7\3\2\2\u034a\u0349\3\2\2\2\u034a\u034b\3\2\2\2")
        buf.write("\u034b\u034c\3\2\2\2\u034c\u0358\5\u0088E\2\u034d\u034e")
        buf.write("\f,\2\2\u034e\u0358\5p9\2\u034f\u0350\f)\2\2\u0350\u0351")
        buf.write("\6<\35\2\u0351\u0358\7\26\2\2\u0352\u0353\f(\2\2\u0353")
        buf.write("\u0354\6<\37\2\u0354\u0358\7\27\2\2\u0355\u0356\f\13\2")
        buf.write("\2\u0356\u0358\7x\2\2\u0357\u0308\3\2\2\2\u0357\u030b")
        buf.write("\3\2\2\2\u0357\u030e\3\2\2\2\u0357\u0311\3\2\2\2\u0357")
        buf.write("\u0314\3\2\2\2\u0357\u0317\3\2\2\2\u0357\u031a\3\2\2\2")
        buf.write("\u0357\u031d\3\2\2\2\u0357\u0320\3\2\2\2\u0357\u0323\3")
        buf.write("\2\2\2\u0357\u0326\3\2\2\2\u0357\u0329\3\2\2\2\u0357\u032c")
        buf.write("\3\2\2\2\u0357\u032f\3\2\2\2\u0357\u0332\3\2\2\2\u0357")
        buf.write("\u0338\3\2\2\2\u0357\u033b\3\2\2\2\u0357\u033f\3\2\2\2")
        buf.write("\u0357\u0344\3\2\2\2\u0357\u034d\3\2\2\2\u0357\u034f\3")
        buf.write("\2\2\2\u0357\u0352\3\2\2\2\u0357\u0355\3\2\2\2\u0358\u035b")
        buf.write("\3\2\2\2\u0359\u0357\3\2\2\2\u0359\u035a\3\2\2\2\u035a")
        buf.write("w\3\2\2\2\u035b\u0359\3\2\2\2\u035c\u0360\7v\2\2\u035d")
        buf.write("\u0360\5d\63\2\u035e\u0360\5j\66\2\u035f\u035c\3\2\2\2")
        buf.write("\u035f\u035d\3\2\2\2\u035f\u035e\3\2\2\2\u0360y\3\2\2")
        buf.write("\2\u0361\u037a\5P)\2\u0362\u0364\7h\2\2\u0363\u0362\3")
        buf.write("\2\2\2\u0363\u0364\3\2\2\2\u0364\u0365\3\2\2\2\u0365\u0367")
        buf.write("\7W\2\2\u0366\u0368\7\34\2\2\u0367\u0366\3\2\2\2\u0367")
        buf.write("\u0368\3\2\2\2\u0368\u0369\3\2\2\2\u0369\u036b\7\f\2\2")
        buf.write("\u036a\u036c\5Z.\2\u036b\u036a\3\2\2\2\u036b\u036c\3\2")
        buf.write("\2\2\u036c\u036d\3\2\2\2\u036d\u036e\7\r\2\2\u036e\u036f")
        buf.write("\7\16\2\2\u036f\u0370\5`\61\2\u0370\u0371\7\17\2\2\u0371")
        buf.write("\u037a\3\2\2\2\u0372\u0374\7h\2\2\u0373\u0372\3\2\2\2")
        buf.write("\u0373\u0374\3\2\2\2\u0374\u0375\3\2\2\2\u0375\u0376\5")
        buf.write("|?\2\u0376\u0377\7\6\2\2\u0377\u0378\5~@\2\u0378\u037a")
        buf.write("\3\2\2\2\u0379\u0361\3\2\2\2\u0379\u0363\3\2\2\2\u0379")
        buf.write("\u0373\3\2\2\2\u037a{\3\2\2\2\u037b\u0382\7v\2\2\u037c")
        buf.write("\u037e\7\f\2\2\u037d\u037f\5Z.\2\u037e\u037d\3\2\2\2\u037e")
        buf.write("\u037f\3\2\2\2\u037f\u0380\3\2\2\2\u0380\u0382\7\r\2\2")
        buf.write("\u0381\u037b\3\2\2\2\u0381\u037c\3\2\2\2\u0382}\3\2\2")
        buf.write("\2\u0383\u0389\5v<\2\u0384\u0385\7\16\2\2\u0385\u0386")
        buf.write("\5`\61\2\u0386\u0387\7\17\2\2\u0387\u0389\3\2\2\2\u0388")
        buf.write("\u0383\3\2\2\2\u0388\u0384\3\2\2\2\u0389\177\3\2\2\2\u038a")
        buf.write("\u038b\t\b\2\2\u038b\u0081\3\2\2\2\u038c\u0394\7;\2\2")
        buf.write("\u038d\u0394\7<\2\2\u038e\u0394\7w\2\2\u038f\u0394\7x")
        buf.write("\2\2\u0390\u0394\7\b\2\2\u0391\u0394\5\u0084C\2\u0392")
        buf.write("\u0394\5\u0086D\2\u0393\u038c\3\2\2\2\u0393\u038d\3\2")
        buf.write("\2\2\u0393\u038e\3\2\2\2\u0393\u038f\3\2\2\2\u0393\u0390")
        buf.write("\3\2\2\2\u0393\u0391\3\2\2\2\u0393\u0392\3\2\2\2\u0394")
        buf.write("\u0083\3\2\2\2\u0395\u0396\t\t\2\2\u0396\u0085\3\2\2\2")
        buf.write("\u0397\u0398\t\n\2\2\u0398\u0087\3\2\2\2\u0399\u039c\7")
        buf.write("v\2\2\u039a\u039c\5\u008aF\2\u039b\u0399\3\2\2\2\u039b")
        buf.write("\u039a\3\2\2\2\u039c\u0089\3\2\2\2\u039d\u03a1\5\u008c")
        buf.write("G\2\u039e\u03a1\7;\2\2\u039f\u03a1\7<\2\2\u03a0\u039d")
        buf.write("\3\2\2\2\u03a0\u039e\3\2\2\2\u03a0\u039f\3\2\2\2\u03a1")
        buf.write("\u008b\3\2\2\2\u03a2\u03a3\t\13\2\2\u03a3\u008d\3\2\2")
        buf.write("\2\u03a4\u03a9\7\20\2\2\u03a5\u03a9\7\2\2\3\u03a6\u03a9")
        buf.write("\6H!\2\u03a7\u03a9\7\17\2\2\u03a8\u03a4\3\2\2\2\u03a8")
        buf.write("\u03a5\3\2\2\2\u03a8\u03a6\3\2\2\2\u03a8\u03a7\3\2\2\2")
        buf.write("\u03a9\u008f\3\2\2\2d\u0091\u00b5\u00b9\u00c0\u00c6\u00ca")
        buf.write("\u00d1\u00d9\u00de\u00e0\u00ea\u00f2\u00f7\u0100\u0108")
        buf.write("\u010c\u0111\u011c\u0122\u0131\u0145\u0149\u014d\u0155")
        buf.write("\u015c\u0163\u016a\u0171\u0178\u018a\u018e\u0190\u0197")
        buf.write("\u019d\u01a2\u01b1\u01b4\u01b9\u01bc\u01c7\u01cb\u01d0")
        buf.write("\u01dd\u01e3\u01eb\u01f1\u01f6\u0201\u020b\u021c\u0223")
        buf.write("\u022a\u022f\u0232\u0237\u023d\u0242\u024b\u024f\u0254")
        buf.write("\u0259\u025f\u0263\u026e\u0271\u0274\u0283\u0286\u028b")
        buf.write("\u02a2\u02a5\u02ae\u02b6\u02ba\u02bc\u02c1\u02c5\u02cc")
        buf.write("\u02d3\u02d9\u0306\u0346\u034a\u0357\u0359\u035f\u0363")
        buf.write("\u0367\u036b\u0373\u0379\u037e\u0381\u0388\u0393\u039b")
        buf.write("\u03a0\u03a8")
        return buf.getvalue()


class js_grammarParser ( Parser ):

    grammarFileName = "js_grammar.g4"

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    sharedContextCache = PredictionContextCache()

    literalNames = [ "<INVALID>", "'#'", "'**'", "'??'", "'=>'", "'**='", 
                     "<INVALID>", "<INVALID>", "'['", "']'", "'('", "')'", 
                     "'{'", "'}'", "';'", "','", "'='", "'?'", "':'", "'.'", 
                     "'++'", "'--'", "'+'", "'-'", "'~'", "'!'", "'*'", 
                     "'/'", "'%'", "'>>'", "'<<'", "'>>>'", "'<'", "'>'", 
                     "'<='", "'>='", "'=='", "'!='", "'==='", "'!=='", "'&'", 
                     "'^'", "'|'", "'&&'", "'||'", "'*='", "'/='", "'%='", 
                     "'+='", "'-='", "'<<='", "'>>='", "'>>>='", "'&='", 
                     "'^='", "'|='", "'...'", "'null'", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "'break'", "'do'", 
                     "'instanceof'", "'typeof'", "'case'", "'else'", "'new'", 
                     "'var'", "'let'", "'catch'", "'finally'", "'return'", 
                     "'void'", "'continue'", "'for'", "'switch'", "'while'", 
                     "'debugger'", "'function'", "'this'", "'with'", "'default'", 
                     "'if'", "'throw'", "'delete'", "'in'", "'try'", "'class'", 
                     "'extends'", "'super'", "'constructor'", "'const'", 
                     "'static'", "'get'", "'set'", "'async'", "'await'", 
                     "'as'", "'from'", "'enum'", "'export'", "'import'", 
                     "'implements'", "'private'", "'public'", "'interface'", 
                     "'package'", "'protected'", "'yield'" ]

    symbolicNames = [ "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "RegularExpressionLiteral", 
                      "LineTerminator", "OpenBracket", "CloseBracket", "OpenParen", 
                      "CloseParen", "OpenBrace", "CloseBrace", "SemiColon", 
                      "Comma", "Assign", "QuestionMark", "Colon", "Dot", 
                      "PlusPlus", "MinusMinus", "Plus", "Minus", "BitNot", 
                      "Not", "Multiply", "Divide", "Modulus", "RightShiftArithmetic", 
                      "LeftShiftArithmetic", "RightShiftLogical", "LessThan", 
                      "MoreThan", "LessThanEquals", "GreaterThanEquals", 
                      "Equals", "NotEquals", "IdentityEquals", "IdentityNotEquals", 
                      "BitAnd", "BitXOr", "BitOr", "And", "Or", "MultiplyAssign", 
                      "DivideAssign", "ModulusAssign", "PlusAssign", "MinusAssign", 
                      "LeftShiftArithmeticAssign", "RightShiftArithmeticAssign", 
                      "RightShiftLogicalAssign", "BitAndAssign", "BitXorAssign", 
                      "BitOrAssign", "Ellipsis", "NullLiteral", "BooleanLiteral", 
                      "DecimalLiteral", "HexIntegerLiteral", "OctalIntegerLiteral2", 
                      "BinaryIntegerLiteral", "BigHexIntegerLiteral", "BigOctalIntegerLiteral", 
                      "BigBinaryIntegerLiteral", "BigDecimalIntegerLiteral", 
                      "Break", "Do", "Instanceof", "Typeof", "Case", "Else", 
                      "New", "Var", "Let", "Catch", "Finally", "Return", 
                      "Void", "Continue", "For", "Switch", "While", "Debugger", 
                      "Function", "This", "With", "Default", "If", "Throw", 
                      "Delete", "In", "Try", "Class", "Extends", "Super", 
                      "Constructor", "Const", "Static", "Get", "Set", "Async", 
                      "Await", "As", "From", "Enum", "Export", "Import", 
                      "Implements", "Private", "Public", "Interface", "Package", 
                      "Protected", "Yield", "Identifier", "StringLiteral", 
                      "TemplateStringLiteral", "WhiteSpaces", "MultiLineComment", 
                      "SingleLineComment", "UnexpectedCharacter", "IdentifierName" ]

    RULE_program = 0
    RULE_sourceElement = 1
    RULE_statement = 2
    RULE_block = 3
    RULE_statementList = 4
    RULE_importStatement = 5
    RULE_importFromBlock = 6
    RULE_moduleItems = 7
    RULE_importDefault = 8
    RULE_importNamespace = 9
    RULE_importFrom = 10
    RULE_aliasName = 11
    RULE_exportStatement = 12
    RULE_exportFromBlock = 13
    RULE_declaration = 14
    RULE_variableStatement = 15
    RULE_variableDeclarationList = 16
    RULE_variableDeclaration = 17
    RULE_emptyStatement = 18
    RULE_expressionStatement = 19
    RULE_ifStatement = 20
    RULE_iterationStatement = 21
    RULE_varModifier = 22
    RULE_continueStatement = 23
    RULE_breakStatement = 24
    RULE_returnStatement = 25
    RULE_yieldStatement = 26
    RULE_withStatement = 27
    RULE_switchStatement = 28
    RULE_caseBlock = 29
    RULE_caseClauses = 30
    RULE_caseClause = 31
    RULE_defaultClause = 32
    RULE_labelledStatement = 33
    RULE_throwStatement = 34
    RULE_tryStatement = 35
    RULE_catchProduction = 36
    RULE_finallyProduction = 37
    RULE_debuggerStatement = 38
    RULE_functionDeclaration = 39
    RULE_classDeclaration = 40
    RULE_classTail = 41
    RULE_classElement = 42
    RULE_methodDefinition = 43
    RULE_formalParameterList = 44
    RULE_formalParameterArg = 45
    RULE_lastFormalParameterArg = 46
    RULE_functionBody = 47
    RULE_sourceElements = 48
    RULE_arrayLiteral = 49
    RULE_elementList = 50
    RULE_arrayElement = 51
    RULE_objectLiteral = 52
    RULE_propertyAssignment = 53
    RULE_propertyName = 54
    RULE_arguments = 55
    RULE_argument = 56
    RULE_expressionSequence = 57
    RULE_singleExpression = 58
    RULE_assignable = 59
    RULE_anoymousFunction = 60
    RULE_arrowFunctionParameters = 61
    RULE_arrowFunctionBody = 62
    RULE_assignmentOperator = 63
    RULE_literal = 64
    RULE_numericLiteral = 65
    RULE_bigintLiteral = 66
    RULE_identifierName = 67
    RULE_reservedWord = 68
    RULE_keyword = 69
    RULE_eos = 70

    ruleNames =  [ "program", "sourceElement", "statement", "block", "statementList", 
                   "importStatement", "importFromBlock", "moduleItems", 
                   "importDefault", "importNamespace", "importFrom", "aliasName", 
                   "exportStatement", "exportFromBlock", "declaration", 
                   "variableStatement", "variableDeclarationList", "variableDeclaration", 
                   "emptyStatement", "expressionStatement", "ifStatement", 
                   "iterationStatement", "varModifier", "continueStatement", 
                   "breakStatement", "returnStatement", "yieldStatement", 
                   "withStatement", "switchStatement", "caseBlock", "caseClauses", 
                   "caseClause", "defaultClause", "labelledStatement", "throwStatement", 
                   "tryStatement", "catchProduction", "finallyProduction", 
                   "debuggerStatement", "functionDeclaration", "classDeclaration", 
                   "classTail", "classElement", "methodDefinition", "formalParameterList", 
                   "formalParameterArg", "lastFormalParameterArg", "functionBody", 
                   "sourceElements", "arrayLiteral", "elementList", "arrayElement", 
                   "objectLiteral", "propertyAssignment", "propertyName", 
                   "arguments", "argument", "expressionSequence", "singleExpression", 
                   "assignable", "anoymousFunction", "arrowFunctionParameters", 
                   "arrowFunctionBody", "assignmentOperator", "literal", 
                   "numericLiteral", "bigintLiteral", "identifierName", 
                   "reservedWord", "keyword", "eos" ]

    EOF = Token.EOF
    T__0=1
    T__1=2
    T__2=3
    T__3=4
    T__4=5
    RegularExpressionLiteral=6
    LineTerminator=7
    OpenBracket=8
    CloseBracket=9
    OpenParen=10
    CloseParen=11
    OpenBrace=12
    CloseBrace=13
    SemiColon=14
    Comma=15
    Assign=16
    QuestionMark=17
    Colon=18
    Dot=19
    PlusPlus=20
    MinusMinus=21
    Plus=22
    Minus=23
    BitNot=24
    Not=25
    Multiply=26
    Divide=27
    Modulus=28
    RightShiftArithmetic=29
    LeftShiftArithmetic=30
    RightShiftLogical=31
    LessThan=32
    MoreThan=33
    LessThanEquals=34
    GreaterThanEquals=35
    Equals=36
    NotEquals=37
    IdentityEquals=38
    IdentityNotEquals=39
    BitAnd=40
    BitXOr=41
    BitOr=42
    And=43
    Or=44
    MultiplyAssign=45
    DivideAssign=46
    ModulusAssign=47
    PlusAssign=48
    MinusAssign=49
    LeftShiftArithmeticAssign=50
    RightShiftArithmeticAssign=51
    RightShiftLogicalAssign=52
    BitAndAssign=53
    BitXorAssign=54
    BitOrAssign=55
    Ellipsis=56
    NullLiteral=57
    BooleanLiteral=58
    DecimalLiteral=59
    HexIntegerLiteral=60
    OctalIntegerLiteral2=61
    BinaryIntegerLiteral=62
    BigHexIntegerLiteral=63
    BigOctalIntegerLiteral=64
    BigBinaryIntegerLiteral=65
    BigDecimalIntegerLiteral=66
    Break=67
    Do=68
    Instanceof=69
    Typeof=70
    Case=71
    Else=72
    New=73
    Var=74
    Let=75
    Catch=76
    Finally=77
    Return=78
    Void=79
    Continue=80
    For=81
    Switch=82
    While=83
    Debugger=84
    Function=85
    This=86
    With=87
    Default=88
    If=89
    Throw=90
    Delete=91
    In=92
    Try=93
    Class=94
    Extends=95
    Super=96
    Constructor=97
    Const=98
    Static=99
    Get=100
    Set=101
    Async=102
    Await=103
    As=104
    From=105
    Enum=106
    Export=107
    Import=108
    Implements=109
    Private=110
    Public=111
    Interface=112
    Package=113
    Protected=114
    Yield=115
    Identifier=116
    StringLiteral=117
    TemplateStringLiteral=118
    WhiteSpaces=119
    MultiLineComment=120
    SingleLineComment=121
    UnexpectedCharacter=122
    IdentifierName=123

    def __init__(self, input:TokenStream, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.8")
        self._interp = ParserATNSimulator(self, self.atn, self.decisionsToDFA, self.sharedContextCache)
        self._predicates = None


        private ITokenStream _input => this.InputStream as ITokenStream;
       
        private bool here(int type) {
            // Get the token ahead of the current index.
            int possibleIndexEosToken = this.CurrentToken.TokenIndex - 1;
            IToken ahead = _input.Get(possibleIndexEosToken);
            // Check if the token resides on the Hidden channel and if it's of the
            // provided type.
            return (ahead.Channel == Lexer.Hidden) && (ahead.Type == type);
        }


        private bool lineTerminatorAhead() {
            // Get the token ahead of the current index.
            int possibleIndexEosToken = this.CurrentToken.TokenIndex - 1;
            IToken ahead = _input.Get(possibleIndexEosToken);
            if (ahead.Channel != Lexer.Hidden) {
                // We're only interested in tokens on the Hidden channel.
                return false;
            }

            if (ahead.Type == LineTerminator) {
                // There is definitely a line terminator ahead.
                return true;
            }

            if (ahead.Type == WhiteSpaces) {
                // Get the token ahead of the current whitespaces.
                possibleIndexEosToken = this.CurrentToken.TokenIndex - 2;
                ahead = _input.Get(possibleIndexEosToken);
            }

            // Get the token's text and type.
            string text = ahead.Text;
            int type = ahead.Type;

            // Check if the token is, or contains a line terminator.
            return (type == MultiLineComment && (text.Contains("\r") || text.Contains("\n"))) ||
                    (type == LineTerminator);
        }                                
        
        private void notImplemented()
        {
            throw new NotImplementedException("This lexem construction doesn't supported");
        }



    class ProgramContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def EOF(self):
            return self.getToken(js_grammarParser.EOF, 0)

        def sourceElements(self):
            return self.getTypedRuleContext(js_grammarParser.SourceElementsContext,0)


        def getRuleIndex(self):
            return js_grammarParser.RULE_program

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterProgram" ):
                listener.enterProgram(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitProgram" ):
                listener.exitProgram(self)




    def program(self):

        localctx = js_grammarParser.ProgramContext(self, self._ctx, self.state)
        self.enterRule(localctx, 0, self.RULE_program)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 143
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,0,self._ctx)
            if la_ == 1:
                self.state = 142
                self.sourceElements()


            self.state = 145
            self.match(js_grammarParser.EOF)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SourceElementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def statement(self):
            return self.getTypedRuleContext(js_grammarParser.StatementContext,0)


        def getRuleIndex(self):
            return js_grammarParser.RULE_sourceElement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSourceElement" ):
                listener.enterSourceElement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSourceElement" ):
                listener.exitSourceElement(self)




    def sourceElement(self):

        localctx = js_grammarParser.SourceElementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 2, self.RULE_sourceElement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 147
            self.statement()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class StatementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def block(self):
            return self.getTypedRuleContext(js_grammarParser.BlockContext,0)


        def variableStatement(self):
            return self.getTypedRuleContext(js_grammarParser.VariableStatementContext,0)


        def importStatement(self):
            return self.getTypedRuleContext(js_grammarParser.ImportStatementContext,0)


        def exportStatement(self):
            return self.getTypedRuleContext(js_grammarParser.ExportStatementContext,0)


        def emptyStatement(self):
            return self.getTypedRuleContext(js_grammarParser.EmptyStatementContext,0)


        def classDeclaration(self):
            return self.getTypedRuleContext(js_grammarParser.ClassDeclarationContext,0)


        def expressionStatement(self):
            return self.getTypedRuleContext(js_grammarParser.ExpressionStatementContext,0)


        def ifStatement(self):
            return self.getTypedRuleContext(js_grammarParser.IfStatementContext,0)


        def iterationStatement(self):
            return self.getTypedRuleContext(js_grammarParser.IterationStatementContext,0)


        def continueStatement(self):
            return self.getTypedRuleContext(js_grammarParser.ContinueStatementContext,0)


        def breakStatement(self):
            return self.getTypedRuleContext(js_grammarParser.BreakStatementContext,0)


        def returnStatement(self):
            return self.getTypedRuleContext(js_grammarParser.ReturnStatementContext,0)


        def yieldStatement(self):
            return self.getTypedRuleContext(js_grammarParser.YieldStatementContext,0)


        def withStatement(self):
            return self.getTypedRuleContext(js_grammarParser.WithStatementContext,0)


        def labelledStatement(self):
            return self.getTypedRuleContext(js_grammarParser.LabelledStatementContext,0)


        def switchStatement(self):
            return self.getTypedRuleContext(js_grammarParser.SwitchStatementContext,0)


        def throwStatement(self):
            return self.getTypedRuleContext(js_grammarParser.ThrowStatementContext,0)


        def tryStatement(self):
            return self.getTypedRuleContext(js_grammarParser.TryStatementContext,0)


        def debuggerStatement(self):
            return self.getTypedRuleContext(js_grammarParser.DebuggerStatementContext,0)


        def functionDeclaration(self):
            return self.getTypedRuleContext(js_grammarParser.FunctionDeclarationContext,0)


        def getRuleIndex(self):
            return js_grammarParser.RULE_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStatement" ):
                listener.enterStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStatement" ):
                listener.exitStatement(self)




    def statement(self):

        localctx = js_grammarParser.StatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 4, self.RULE_statement)
        try:
            self.state = 179
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,1,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 149
                self.block()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 150
                self.variableStatement()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 151
                self.importStatement()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 152
                self.exportStatement()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 153
                self.emptyStatement()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 154
                self.classDeclaration()
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 155
                self.expressionStatement()
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 156
                self.ifStatement()
                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 157
                self.iterationStatement()
                pass

            elif la_ == 10:
                self.enterOuterAlt(localctx, 10)
                self.state = 158
                self.continueStatement()
                pass

            elif la_ == 11:
                self.enterOuterAlt(localctx, 11)
                self.state = 159
                self.breakStatement()
                pass

            elif la_ == 12:
                self.enterOuterAlt(localctx, 12)
                self.state = 160
                self.returnStatement()
                pass

            elif la_ == 13:
                self.enterOuterAlt(localctx, 13)
                self.state = 161
                self.yieldStatement()
                notImplemented();
                pass

            elif la_ == 14:
                self.enterOuterAlt(localctx, 14)
                self.state = 164
                self.withStatement()
                pass

            elif la_ == 15:
                self.enterOuterAlt(localctx, 15)
                self.state = 165
                self.labelledStatement()
                pass

            elif la_ == 16:
                self.enterOuterAlt(localctx, 16)
                self.state = 166
                self.switchStatement()
                notImplemented();
                pass

            elif la_ == 17:
                self.enterOuterAlt(localctx, 17)
                self.state = 169
                self.throwStatement()
                notImplemented();
                pass

            elif la_ == 18:
                self.enterOuterAlt(localctx, 18)
                self.state = 172
                self.tryStatement()
                notImplemented();
                pass

            elif la_ == 19:
                self.enterOuterAlt(localctx, 19)
                self.state = 175
                self.debuggerStatement()
                notImplemented();
                pass

            elif la_ == 20:
                self.enterOuterAlt(localctx, 20)
                self.state = 178
                self.functionDeclaration()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class BlockContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OpenBrace(self):
            return self.getToken(js_grammarParser.OpenBrace, 0)

        def CloseBrace(self):
            return self.getToken(js_grammarParser.CloseBrace, 0)

        def statementList(self):
            return self.getTypedRuleContext(js_grammarParser.StatementListContext,0)


        def getRuleIndex(self):
            return js_grammarParser.RULE_block

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBlock" ):
                listener.enterBlock(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBlock" ):
                listener.exitBlock(self)




    def block(self):

        localctx = js_grammarParser.BlockContext(self, self._ctx, self.state)
        self.enterRule(localctx, 6, self.RULE_block)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 181
            self.match(js_grammarParser.OpenBrace)
            self.state = 183
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,2,self._ctx)
            if la_ == 1:
                self.state = 182
                self.statementList()


            self.state = 185
            self.match(js_grammarParser.CloseBrace)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class StatementListContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def statement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(js_grammarParser.StatementContext)
            else:
                return self.getTypedRuleContext(js_grammarParser.StatementContext,i)


        def getRuleIndex(self):
            return js_grammarParser.RULE_statementList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStatementList" ):
                listener.enterStatementList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStatementList" ):
                listener.exitStatementList(self)




    def statementList(self):

        localctx = js_grammarParser.StatementListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 8, self.RULE_statementList)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 188 
            self._errHandler.sync(self)
            _alt = 1
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 187
                    self.statement()

                else:
                    raise NoViableAltException(self)
                self.state = 190 
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,3,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ImportStatementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Import(self):
            return self.getToken(js_grammarParser.Import, 0)

        def importFromBlock(self):
            return self.getTypedRuleContext(js_grammarParser.ImportFromBlockContext,0)


        def getRuleIndex(self):
            return js_grammarParser.RULE_importStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterImportStatement" ):
                listener.enterImportStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitImportStatement" ):
                listener.exitImportStatement(self)




    def importStatement(self):

        localctx = js_grammarParser.ImportStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 10, self.RULE_importStatement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 192
            self.match(js_grammarParser.Import)
            self.state = 193
            self.importFromBlock()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ImportFromBlockContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def importFrom(self):
            return self.getTypedRuleContext(js_grammarParser.ImportFromContext,0)


        def eos(self):
            return self.getTypedRuleContext(js_grammarParser.EosContext,0)


        def importNamespace(self):
            return self.getTypedRuleContext(js_grammarParser.ImportNamespaceContext,0)


        def moduleItems(self):
            return self.getTypedRuleContext(js_grammarParser.ModuleItemsContext,0)


        def importDefault(self):
            return self.getTypedRuleContext(js_grammarParser.ImportDefaultContext,0)


        def StringLiteral(self):
            return self.getToken(js_grammarParser.StringLiteral, 0)

        def getRuleIndex(self):
            return js_grammarParser.RULE_importFromBlock

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterImportFromBlock" ):
                listener.enterImportFromBlock(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitImportFromBlock" ):
                listener.exitImportFromBlock(self)




    def importFromBlock(self):

        localctx = js_grammarParser.ImportFromBlockContext(self, self._ctx, self.state)
        self.enterRule(localctx, 12, self.RULE_importFromBlock)
        self._la = 0 # Token type
        try:
            self.state = 207
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [js_grammarParser.OpenBrace, js_grammarParser.Multiply, js_grammarParser.NullLiteral, js_grammarParser.BooleanLiteral, js_grammarParser.Break, js_grammarParser.Do, js_grammarParser.Instanceof, js_grammarParser.Typeof, js_grammarParser.Case, js_grammarParser.Else, js_grammarParser.New, js_grammarParser.Var, js_grammarParser.Let, js_grammarParser.Catch, js_grammarParser.Finally, js_grammarParser.Return, js_grammarParser.Void, js_grammarParser.Continue, js_grammarParser.For, js_grammarParser.Switch, js_grammarParser.While, js_grammarParser.Debugger, js_grammarParser.Function, js_grammarParser.This, js_grammarParser.With, js_grammarParser.Default, js_grammarParser.If, js_grammarParser.Throw, js_grammarParser.Delete, js_grammarParser.In, js_grammarParser.Try, js_grammarParser.Class, js_grammarParser.Extends, js_grammarParser.Super, js_grammarParser.Const, js_grammarParser.Static, js_grammarParser.Get, js_grammarParser.Set, js_grammarParser.Async, js_grammarParser.Await, js_grammarParser.As, js_grammarParser.From, js_grammarParser.Enum, js_grammarParser.Export, js_grammarParser.Import, js_grammarParser.Implements, js_grammarParser.Private, js_grammarParser.Public, js_grammarParser.Interface, js_grammarParser.Package, js_grammarParser.Protected, js_grammarParser.Yield, js_grammarParser.Identifier]:
                self.enterOuterAlt(localctx, 1)
                self.state = 196
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if ((((_la - 57)) & ~0x3f) == 0 and ((1 << (_la - 57)) & ((1 << (js_grammarParser.NullLiteral - 57)) | (1 << (js_grammarParser.BooleanLiteral - 57)) | (1 << (js_grammarParser.Break - 57)) | (1 << (js_grammarParser.Do - 57)) | (1 << (js_grammarParser.Instanceof - 57)) | (1 << (js_grammarParser.Typeof - 57)) | (1 << (js_grammarParser.Case - 57)) | (1 << (js_grammarParser.Else - 57)) | (1 << (js_grammarParser.New - 57)) | (1 << (js_grammarParser.Var - 57)) | (1 << (js_grammarParser.Let - 57)) | (1 << (js_grammarParser.Catch - 57)) | (1 << (js_grammarParser.Finally - 57)) | (1 << (js_grammarParser.Return - 57)) | (1 << (js_grammarParser.Void - 57)) | (1 << (js_grammarParser.Continue - 57)) | (1 << (js_grammarParser.For - 57)) | (1 << (js_grammarParser.Switch - 57)) | (1 << (js_grammarParser.While - 57)) | (1 << (js_grammarParser.Debugger - 57)) | (1 << (js_grammarParser.Function - 57)) | (1 << (js_grammarParser.This - 57)) | (1 << (js_grammarParser.With - 57)) | (1 << (js_grammarParser.Default - 57)) | (1 << (js_grammarParser.If - 57)) | (1 << (js_grammarParser.Throw - 57)) | (1 << (js_grammarParser.Delete - 57)) | (1 << (js_grammarParser.In - 57)) | (1 << (js_grammarParser.Try - 57)) | (1 << (js_grammarParser.Class - 57)) | (1 << (js_grammarParser.Extends - 57)) | (1 << (js_grammarParser.Super - 57)) | (1 << (js_grammarParser.Const - 57)) | (1 << (js_grammarParser.Static - 57)) | (1 << (js_grammarParser.Get - 57)) | (1 << (js_grammarParser.Set - 57)) | (1 << (js_grammarParser.Async - 57)) | (1 << (js_grammarParser.Await - 57)) | (1 << (js_grammarParser.As - 57)) | (1 << (js_grammarParser.From - 57)) | (1 << (js_grammarParser.Enum - 57)) | (1 << (js_grammarParser.Export - 57)) | (1 << (js_grammarParser.Import - 57)) | (1 << (js_grammarParser.Implements - 57)) | (1 << (js_grammarParser.Private - 57)) | (1 << (js_grammarParser.Public - 57)) | (1 << (js_grammarParser.Interface - 57)) | (1 << (js_grammarParser.Package - 57)) | (1 << (js_grammarParser.Protected - 57)) | (1 << (js_grammarParser.Yield - 57)) | (1 << (js_grammarParser.Identifier - 57)))) != 0):
                    self.state = 195
                    self.importDefault()


                self.state = 200
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [js_grammarParser.Multiply]:
                    self.state = 198
                    self.importNamespace()
                    pass
                elif token in [js_grammarParser.OpenBrace]:
                    self.state = 199
                    self.moduleItems()
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 202
                self.importFrom()
                self.state = 203
                self.eos()
                pass
            elif token in [js_grammarParser.StringLiteral]:
                self.enterOuterAlt(localctx, 2)
                self.state = 205
                self.match(js_grammarParser.StringLiteral)
                self.state = 206
                self.eos()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ModuleItemsContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OpenBrace(self):
            return self.getToken(js_grammarParser.OpenBrace, 0)

        def CloseBrace(self):
            return self.getToken(js_grammarParser.CloseBrace, 0)

        def aliasName(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(js_grammarParser.AliasNameContext)
            else:
                return self.getTypedRuleContext(js_grammarParser.AliasNameContext,i)


        def Comma(self, i:int=None):
            if i is None:
                return self.getTokens(js_grammarParser.Comma)
            else:
                return self.getToken(js_grammarParser.Comma, i)

        def getRuleIndex(self):
            return js_grammarParser.RULE_moduleItems

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterModuleItems" ):
                listener.enterModuleItems(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitModuleItems" ):
                listener.exitModuleItems(self)




    def moduleItems(self):

        localctx = js_grammarParser.ModuleItemsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 14, self.RULE_moduleItems)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 209
            self.match(js_grammarParser.OpenBrace)
            self.state = 215
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,7,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 210
                    self.aliasName()
                    self.state = 211
                    self.match(js_grammarParser.Comma) 
                self.state = 217
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,7,self._ctx)

            self.state = 222
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((((_la - 57)) & ~0x3f) == 0 and ((1 << (_la - 57)) & ((1 << (js_grammarParser.NullLiteral - 57)) | (1 << (js_grammarParser.BooleanLiteral - 57)) | (1 << (js_grammarParser.Break - 57)) | (1 << (js_grammarParser.Do - 57)) | (1 << (js_grammarParser.Instanceof - 57)) | (1 << (js_grammarParser.Typeof - 57)) | (1 << (js_grammarParser.Case - 57)) | (1 << (js_grammarParser.Else - 57)) | (1 << (js_grammarParser.New - 57)) | (1 << (js_grammarParser.Var - 57)) | (1 << (js_grammarParser.Let - 57)) | (1 << (js_grammarParser.Catch - 57)) | (1 << (js_grammarParser.Finally - 57)) | (1 << (js_grammarParser.Return - 57)) | (1 << (js_grammarParser.Void - 57)) | (1 << (js_grammarParser.Continue - 57)) | (1 << (js_grammarParser.For - 57)) | (1 << (js_grammarParser.Switch - 57)) | (1 << (js_grammarParser.While - 57)) | (1 << (js_grammarParser.Debugger - 57)) | (1 << (js_grammarParser.Function - 57)) | (1 << (js_grammarParser.This - 57)) | (1 << (js_grammarParser.With - 57)) | (1 << (js_grammarParser.Default - 57)) | (1 << (js_grammarParser.If - 57)) | (1 << (js_grammarParser.Throw - 57)) | (1 << (js_grammarParser.Delete - 57)) | (1 << (js_grammarParser.In - 57)) | (1 << (js_grammarParser.Try - 57)) | (1 << (js_grammarParser.Class - 57)) | (1 << (js_grammarParser.Extends - 57)) | (1 << (js_grammarParser.Super - 57)) | (1 << (js_grammarParser.Const - 57)) | (1 << (js_grammarParser.Static - 57)) | (1 << (js_grammarParser.Get - 57)) | (1 << (js_grammarParser.Set - 57)) | (1 << (js_grammarParser.Async - 57)) | (1 << (js_grammarParser.Await - 57)) | (1 << (js_grammarParser.As - 57)) | (1 << (js_grammarParser.From - 57)) | (1 << (js_grammarParser.Enum - 57)) | (1 << (js_grammarParser.Export - 57)) | (1 << (js_grammarParser.Import - 57)) | (1 << (js_grammarParser.Implements - 57)) | (1 << (js_grammarParser.Private - 57)) | (1 << (js_grammarParser.Public - 57)) | (1 << (js_grammarParser.Interface - 57)) | (1 << (js_grammarParser.Package - 57)) | (1 << (js_grammarParser.Protected - 57)) | (1 << (js_grammarParser.Yield - 57)) | (1 << (js_grammarParser.Identifier - 57)))) != 0):
                self.state = 218
                self.aliasName()
                self.state = 220
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==js_grammarParser.Comma:
                    self.state = 219
                    self.match(js_grammarParser.Comma)




            self.state = 224
            self.match(js_grammarParser.CloseBrace)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ImportDefaultContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def aliasName(self):
            return self.getTypedRuleContext(js_grammarParser.AliasNameContext,0)


        def Comma(self):
            return self.getToken(js_grammarParser.Comma, 0)

        def getRuleIndex(self):
            return js_grammarParser.RULE_importDefault

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterImportDefault" ):
                listener.enterImportDefault(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitImportDefault" ):
                listener.exitImportDefault(self)




    def importDefault(self):

        localctx = js_grammarParser.ImportDefaultContext(self, self._ctx, self.state)
        self.enterRule(localctx, 16, self.RULE_importDefault)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 226
            self.aliasName()
            self.state = 227
            self.match(js_grammarParser.Comma)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ImportNamespaceContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Multiply(self):
            return self.getToken(js_grammarParser.Multiply, 0)

        def As(self):
            return self.getToken(js_grammarParser.As, 0)

        def identifierName(self):
            return self.getTypedRuleContext(js_grammarParser.IdentifierNameContext,0)


        def getRuleIndex(self):
            return js_grammarParser.RULE_importNamespace

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterImportNamespace" ):
                listener.enterImportNamespace(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitImportNamespace" ):
                listener.exitImportNamespace(self)




    def importNamespace(self):

        localctx = js_grammarParser.ImportNamespaceContext(self, self._ctx, self.state)
        self.enterRule(localctx, 18, self.RULE_importNamespace)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 229
            self.match(js_grammarParser.Multiply)
            self.state = 232
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==js_grammarParser.As:
                self.state = 230
                self.match(js_grammarParser.As)
                self.state = 231
                self.identifierName()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ImportFromContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def From(self):
            return self.getToken(js_grammarParser.From, 0)

        def StringLiteral(self):
            return self.getToken(js_grammarParser.StringLiteral, 0)

        def getRuleIndex(self):
            return js_grammarParser.RULE_importFrom

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterImportFrom" ):
                listener.enterImportFrom(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitImportFrom" ):
                listener.exitImportFrom(self)




    def importFrom(self):

        localctx = js_grammarParser.ImportFromContext(self, self._ctx, self.state)
        self.enterRule(localctx, 20, self.RULE_importFrom)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 234
            self.match(js_grammarParser.From)
            self.state = 235
            self.match(js_grammarParser.StringLiteral)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AliasNameContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifierName(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(js_grammarParser.IdentifierNameContext)
            else:
                return self.getTypedRuleContext(js_grammarParser.IdentifierNameContext,i)


        def As(self):
            return self.getToken(js_grammarParser.As, 0)

        def getRuleIndex(self):
            return js_grammarParser.RULE_aliasName

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAliasName" ):
                listener.enterAliasName(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAliasName" ):
                listener.exitAliasName(self)




    def aliasName(self):

        localctx = js_grammarParser.AliasNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 22, self.RULE_aliasName)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 237
            self.identifierName()
            self.state = 240
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==js_grammarParser.As:
                self.state = 238
                self.match(js_grammarParser.As)
                self.state = 239
                self.identifierName()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ExportStatementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return js_grammarParser.RULE_exportStatement

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class ExportDefaultDeclarationContext(ExportStatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a js_grammarParser.ExportStatementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def Export(self):
            return self.getToken(js_grammarParser.Export, 0)
        def Default(self):
            return self.getToken(js_grammarParser.Default, 0)
        def singleExpression(self):
            return self.getTypedRuleContext(js_grammarParser.SingleExpressionContext,0)

        def eos(self):
            return self.getTypedRuleContext(js_grammarParser.EosContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExportDefaultDeclaration" ):
                listener.enterExportDefaultDeclaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExportDefaultDeclaration" ):
                listener.exitExportDefaultDeclaration(self)


    class ExportDeclarationContext(ExportStatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a js_grammarParser.ExportStatementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def Export(self):
            return self.getToken(js_grammarParser.Export, 0)
        def eos(self):
            return self.getTypedRuleContext(js_grammarParser.EosContext,0)

        def exportFromBlock(self):
            return self.getTypedRuleContext(js_grammarParser.ExportFromBlockContext,0)

        def declaration(self):
            return self.getTypedRuleContext(js_grammarParser.DeclarationContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExportDeclaration" ):
                listener.enterExportDeclaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExportDeclaration" ):
                listener.exitExportDeclaration(self)



    def exportStatement(self):

        localctx = js_grammarParser.ExportStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 24, self.RULE_exportStatement)
        try:
            self.state = 254
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,13,self._ctx)
            if la_ == 1:
                localctx = js_grammarParser.ExportDeclarationContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 242
                self.match(js_grammarParser.Export)
                self.state = 245
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [js_grammarParser.OpenBrace, js_grammarParser.Multiply]:
                    self.state = 243
                    self.exportFromBlock()
                    pass
                elif token in [js_grammarParser.Var, js_grammarParser.Let, js_grammarParser.Function, js_grammarParser.Class, js_grammarParser.Const, js_grammarParser.Async]:
                    self.state = 244
                    self.declaration()
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 247
                self.eos()
                pass

            elif la_ == 2:
                localctx = js_grammarParser.ExportDefaultDeclarationContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 249
                self.match(js_grammarParser.Export)
                self.state = 250
                self.match(js_grammarParser.Default)
                self.state = 251
                self.singleExpression(0)
                self.state = 252
                self.eos()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ExportFromBlockContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def importNamespace(self):
            return self.getTypedRuleContext(js_grammarParser.ImportNamespaceContext,0)


        def importFrom(self):
            return self.getTypedRuleContext(js_grammarParser.ImportFromContext,0)


        def eos(self):
            return self.getTypedRuleContext(js_grammarParser.EosContext,0)


        def moduleItems(self):
            return self.getTypedRuleContext(js_grammarParser.ModuleItemsContext,0)


        def getRuleIndex(self):
            return js_grammarParser.RULE_exportFromBlock

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExportFromBlock" ):
                listener.enterExportFromBlock(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExportFromBlock" ):
                listener.exitExportFromBlock(self)




    def exportFromBlock(self):

        localctx = js_grammarParser.ExportFromBlockContext(self, self._ctx, self.state)
        self.enterRule(localctx, 26, self.RULE_exportFromBlock)
        try:
            self.state = 266
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [js_grammarParser.Multiply]:
                self.enterOuterAlt(localctx, 1)
                self.state = 256
                self.importNamespace()
                self.state = 257
                self.importFrom()
                self.state = 258
                self.eos()
                pass
            elif token in [js_grammarParser.OpenBrace]:
                self.enterOuterAlt(localctx, 2)
                self.state = 260
                self.moduleItems()
                self.state = 262
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,14,self._ctx)
                if la_ == 1:
                    self.state = 261
                    self.importFrom()


                self.state = 264
                self.eos()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DeclarationContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def variableStatement(self):
            return self.getTypedRuleContext(js_grammarParser.VariableStatementContext,0)


        def classDeclaration(self):
            return self.getTypedRuleContext(js_grammarParser.ClassDeclarationContext,0)


        def functionDeclaration(self):
            return self.getTypedRuleContext(js_grammarParser.FunctionDeclarationContext,0)


        def getRuleIndex(self):
            return js_grammarParser.RULE_declaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDeclaration" ):
                listener.enterDeclaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDeclaration" ):
                listener.exitDeclaration(self)




    def declaration(self):

        localctx = js_grammarParser.DeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 28, self.RULE_declaration)
        try:
            self.state = 271
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [js_grammarParser.Var, js_grammarParser.Let, js_grammarParser.Const]:
                self.enterOuterAlt(localctx, 1)
                self.state = 268
                self.variableStatement()
                pass
            elif token in [js_grammarParser.Class]:
                self.enterOuterAlt(localctx, 2)
                self.state = 269
                self.classDeclaration()
                pass
            elif token in [js_grammarParser.Function, js_grammarParser.Async]:
                self.enterOuterAlt(localctx, 3)
                self.state = 270
                self.functionDeclaration()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class VariableStatementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def variableDeclarationList(self):
            return self.getTypedRuleContext(js_grammarParser.VariableDeclarationListContext,0)


        def eos(self):
            return self.getTypedRuleContext(js_grammarParser.EosContext,0)


        def getRuleIndex(self):
            return js_grammarParser.RULE_variableStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVariableStatement" ):
                listener.enterVariableStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVariableStatement" ):
                listener.exitVariableStatement(self)




    def variableStatement(self):

        localctx = js_grammarParser.VariableStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 30, self.RULE_variableStatement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 273
            self.variableDeclarationList()
            self.state = 274
            self.eos()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class VariableDeclarationListContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def varModifier(self):
            return self.getTypedRuleContext(js_grammarParser.VarModifierContext,0)


        def variableDeclaration(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(js_grammarParser.VariableDeclarationContext)
            else:
                return self.getTypedRuleContext(js_grammarParser.VariableDeclarationContext,i)


        def Comma(self, i:int=None):
            if i is None:
                return self.getTokens(js_grammarParser.Comma)
            else:
                return self.getToken(js_grammarParser.Comma, i)

        def getRuleIndex(self):
            return js_grammarParser.RULE_variableDeclarationList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVariableDeclarationList" ):
                listener.enterVariableDeclarationList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVariableDeclarationList" ):
                listener.exitVariableDeclarationList(self)




    def variableDeclarationList(self):

        localctx = js_grammarParser.VariableDeclarationListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 32, self.RULE_variableDeclarationList)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 276
            self.varModifier()
            self.state = 277
            self.variableDeclaration()
            self.state = 282
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,17,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 278
                    self.match(js_grammarParser.Comma)
                    self.state = 279
                    self.variableDeclaration() 
                self.state = 284
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,17,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class VariableDeclarationContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def assignable(self):
            return self.getTypedRuleContext(js_grammarParser.AssignableContext,0)


        def Assign(self):
            return self.getToken(js_grammarParser.Assign, 0)

        def singleExpression(self):
            return self.getTypedRuleContext(js_grammarParser.SingleExpressionContext,0)


        def getRuleIndex(self):
            return js_grammarParser.RULE_variableDeclaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVariableDeclaration" ):
                listener.enterVariableDeclaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVariableDeclaration" ):
                listener.exitVariableDeclaration(self)




    def variableDeclaration(self):

        localctx = js_grammarParser.VariableDeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 34, self.RULE_variableDeclaration)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 285
            self.assignable()
            self.state = 288
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,18,self._ctx)
            if la_ == 1:
                self.state = 286
                self.match(js_grammarParser.Assign)
                self.state = 287
                self.singleExpression(0)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class EmptyStatementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SemiColon(self):
            return self.getToken(js_grammarParser.SemiColon, 0)

        def getRuleIndex(self):
            return js_grammarParser.RULE_emptyStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEmptyStatement" ):
                listener.enterEmptyStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEmptyStatement" ):
                listener.exitEmptyStatement(self)




    def emptyStatement(self):

        localctx = js_grammarParser.EmptyStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 36, self.RULE_emptyStatement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 290
            self.match(js_grammarParser.SemiColon)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ExpressionStatementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expressionSequence(self):
            return self.getTypedRuleContext(js_grammarParser.ExpressionSequenceContext,0)


        def eos(self):
            return self.getTypedRuleContext(js_grammarParser.EosContext,0)


        def getRuleIndex(self):
            return js_grammarParser.RULE_expressionStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExpressionStatement" ):
                listener.enterExpressionStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExpressionStatement" ):
                listener.exitExpressionStatement(self)




    def expressionStatement(self):

        localctx = js_grammarParser.ExpressionStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 38, self.RULE_expressionStatement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 292
            if not !here(Function) & !here(OpenBrace):
                from antlr4.error.Errors import FailedPredicateException
                raise FailedPredicateException(self, "!here(Function) & !here(OpenBrace)")
            self.state = 293
            self.expressionSequence()
            self.state = 294
            self.eos()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class IfStatementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def If(self):
            return self.getToken(js_grammarParser.If, 0)

        def OpenParen(self):
            return self.getToken(js_grammarParser.OpenParen, 0)

        def expressionSequence(self):
            return self.getTypedRuleContext(js_grammarParser.ExpressionSequenceContext,0)


        def CloseParen(self):
            return self.getToken(js_grammarParser.CloseParen, 0)

        def statement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(js_grammarParser.StatementContext)
            else:
                return self.getTypedRuleContext(js_grammarParser.StatementContext,i)


        def Else(self):
            return self.getToken(js_grammarParser.Else, 0)

        def getRuleIndex(self):
            return js_grammarParser.RULE_ifStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIfStatement" ):
                listener.enterIfStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIfStatement" ):
                listener.exitIfStatement(self)




    def ifStatement(self):

        localctx = js_grammarParser.IfStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 40, self.RULE_ifStatement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 296
            self.match(js_grammarParser.If)
            self.state = 297
            self.match(js_grammarParser.OpenParen)
            self.state = 298
            self.expressionSequence()
            self.state = 299
            self.match(js_grammarParser.CloseParen)
            self.state = 300
            self.statement()
            self.state = 303
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,19,self._ctx)
            if la_ == 1:
                self.state = 301
                self.match(js_grammarParser.Else)
                self.state = 302
                self.statement()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class IterationStatementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return js_grammarParser.RULE_iterationStatement

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class DoStatementContext(IterationStatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a js_grammarParser.IterationStatementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def Do(self):
            return self.getToken(js_grammarParser.Do, 0)
        def statement(self):
            return self.getTypedRuleContext(js_grammarParser.StatementContext,0)

        def While(self):
            return self.getToken(js_grammarParser.While, 0)
        def OpenParen(self):
            return self.getToken(js_grammarParser.OpenParen, 0)
        def expressionSequence(self):
            return self.getTypedRuleContext(js_grammarParser.ExpressionSequenceContext,0)

        def CloseParen(self):
            return self.getToken(js_grammarParser.CloseParen, 0)
        def eos(self):
            return self.getTypedRuleContext(js_grammarParser.EosContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDoStatement" ):
                listener.enterDoStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDoStatement" ):
                listener.exitDoStatement(self)


    class WhileStatementContext(IterationStatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a js_grammarParser.IterationStatementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def While(self):
            return self.getToken(js_grammarParser.While, 0)
        def OpenParen(self):
            return self.getToken(js_grammarParser.OpenParen, 0)
        def expressionSequence(self):
            return self.getTypedRuleContext(js_grammarParser.ExpressionSequenceContext,0)

        def CloseParen(self):
            return self.getToken(js_grammarParser.CloseParen, 0)
        def statement(self):
            return self.getTypedRuleContext(js_grammarParser.StatementContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWhileStatement" ):
                listener.enterWhileStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWhileStatement" ):
                listener.exitWhileStatement(self)


    class ForStatementContext(IterationStatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a js_grammarParser.IterationStatementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def For(self):
            return self.getToken(js_grammarParser.For, 0)
        def OpenParen(self):
            return self.getToken(js_grammarParser.OpenParen, 0)
        def SemiColon(self, i:int=None):
            if i is None:
                return self.getTokens(js_grammarParser.SemiColon)
            else:
                return self.getToken(js_grammarParser.SemiColon, i)
        def CloseParen(self):
            return self.getToken(js_grammarParser.CloseParen, 0)
        def statement(self):
            return self.getTypedRuleContext(js_grammarParser.StatementContext,0)

        def expressionSequence(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(js_grammarParser.ExpressionSequenceContext)
            else:
                return self.getTypedRuleContext(js_grammarParser.ExpressionSequenceContext,i)

        def variableDeclarationList(self):
            return self.getTypedRuleContext(js_grammarParser.VariableDeclarationListContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterForStatement" ):
                listener.enterForStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitForStatement" ):
                listener.exitForStatement(self)


    class ForInStatementContext(IterationStatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a js_grammarParser.IterationStatementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def For(self):
            return self.getToken(js_grammarParser.For, 0)
        def OpenParen(self):
            return self.getToken(js_grammarParser.OpenParen, 0)
        def In(self):
            return self.getToken(js_grammarParser.In, 0)
        def expressionSequence(self):
            return self.getTypedRuleContext(js_grammarParser.ExpressionSequenceContext,0)

        def CloseParen(self):
            return self.getToken(js_grammarParser.CloseParen, 0)
        def statement(self):
            return self.getTypedRuleContext(js_grammarParser.StatementContext,0)

        def singleExpression(self):
            return self.getTypedRuleContext(js_grammarParser.SingleExpressionContext,0)

        def variableDeclarationList(self):
            return self.getTypedRuleContext(js_grammarParser.VariableDeclarationListContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterForInStatement" ):
                listener.enterForInStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitForInStatement" ):
                listener.exitForInStatement(self)



    def iterationStatement(self):

        localctx = js_grammarParser.IterationStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 42, self.RULE_iterationStatement)
        self._la = 0 # Token type
        try:
            self.state = 346
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,24,self._ctx)
            if la_ == 1:
                localctx = js_grammarParser.DoStatementContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 305
                self.match(js_grammarParser.Do)
                self.state = 306
                self.statement()
                self.state = 307
                self.match(js_grammarParser.While)
                self.state = 308
                self.match(js_grammarParser.OpenParen)
                self.state = 309
                self.expressionSequence()
                self.state = 310
                self.match(js_grammarParser.CloseParen)
                self.state = 311
                self.eos()
                pass

            elif la_ == 2:
                localctx = js_grammarParser.WhileStatementContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 313
                self.match(js_grammarParser.While)
                self.state = 314
                self.match(js_grammarParser.OpenParen)
                self.state = 315
                self.expressionSequence()
                self.state = 316
                self.match(js_grammarParser.CloseParen)
                self.state = 317
                self.statement()
                pass

            elif la_ == 3:
                localctx = js_grammarParser.ForStatementContext(self, localctx)
                self.enterOuterAlt(localctx, 3)
                self.state = 319
                self.match(js_grammarParser.For)
                self.state = 320
                self.match(js_grammarParser.OpenParen)
                self.state = 323
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [js_grammarParser.RegularExpressionLiteral, js_grammarParser.OpenBracket, js_grammarParser.OpenParen, js_grammarParser.OpenBrace, js_grammarParser.PlusPlus, js_grammarParser.MinusMinus, js_grammarParser.Plus, js_grammarParser.Minus, js_grammarParser.BitNot, js_grammarParser.Not, js_grammarParser.NullLiteral, js_grammarParser.BooleanLiteral, js_grammarParser.DecimalLiteral, js_grammarParser.HexIntegerLiteral, js_grammarParser.OctalIntegerLiteral2, js_grammarParser.BinaryIntegerLiteral, js_grammarParser.BigHexIntegerLiteral, js_grammarParser.BigOctalIntegerLiteral, js_grammarParser.BigBinaryIntegerLiteral, js_grammarParser.BigDecimalIntegerLiteral, js_grammarParser.Typeof, js_grammarParser.New, js_grammarParser.Void, js_grammarParser.Function, js_grammarParser.This, js_grammarParser.Delete, js_grammarParser.Class, js_grammarParser.Super, js_grammarParser.Async, js_grammarParser.Await, js_grammarParser.Import, js_grammarParser.Yield, js_grammarParser.Identifier, js_grammarParser.StringLiteral, js_grammarParser.TemplateStringLiteral]:
                    self.state = 321
                    self.expressionSequence()
                    pass
                elif token in [js_grammarParser.Var, js_grammarParser.Let, js_grammarParser.Const]:
                    self.state = 322
                    self.variableDeclarationList()
                    pass
                elif token in [js_grammarParser.SemiColon]:
                    pass
                else:
                    pass
                self.state = 325
                self.match(js_grammarParser.SemiColon)
                self.state = 327
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << js_grammarParser.RegularExpressionLiteral) | (1 << js_grammarParser.OpenBracket) | (1 << js_grammarParser.OpenParen) | (1 << js_grammarParser.OpenBrace) | (1 << js_grammarParser.PlusPlus) | (1 << js_grammarParser.MinusMinus) | (1 << js_grammarParser.Plus) | (1 << js_grammarParser.Minus) | (1 << js_grammarParser.BitNot) | (1 << js_grammarParser.Not) | (1 << js_grammarParser.NullLiteral) | (1 << js_grammarParser.BooleanLiteral) | (1 << js_grammarParser.DecimalLiteral) | (1 << js_grammarParser.HexIntegerLiteral) | (1 << js_grammarParser.OctalIntegerLiteral2) | (1 << js_grammarParser.BinaryIntegerLiteral) | (1 << js_grammarParser.BigHexIntegerLiteral))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (js_grammarParser.BigOctalIntegerLiteral - 64)) | (1 << (js_grammarParser.BigBinaryIntegerLiteral - 64)) | (1 << (js_grammarParser.BigDecimalIntegerLiteral - 64)) | (1 << (js_grammarParser.Typeof - 64)) | (1 << (js_grammarParser.New - 64)) | (1 << (js_grammarParser.Void - 64)) | (1 << (js_grammarParser.Function - 64)) | (1 << (js_grammarParser.This - 64)) | (1 << (js_grammarParser.Delete - 64)) | (1 << (js_grammarParser.Class - 64)) | (1 << (js_grammarParser.Super - 64)) | (1 << (js_grammarParser.Async - 64)) | (1 << (js_grammarParser.Await - 64)) | (1 << (js_grammarParser.Import - 64)) | (1 << (js_grammarParser.Yield - 64)) | (1 << (js_grammarParser.Identifier - 64)) | (1 << (js_grammarParser.StringLiteral - 64)) | (1 << (js_grammarParser.TemplateStringLiteral - 64)))) != 0):
                    self.state = 326
                    self.expressionSequence()


                self.state = 329
                self.match(js_grammarParser.SemiColon)
                self.state = 331
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << js_grammarParser.RegularExpressionLiteral) | (1 << js_grammarParser.OpenBracket) | (1 << js_grammarParser.OpenParen) | (1 << js_grammarParser.OpenBrace) | (1 << js_grammarParser.PlusPlus) | (1 << js_grammarParser.MinusMinus) | (1 << js_grammarParser.Plus) | (1 << js_grammarParser.Minus) | (1 << js_grammarParser.BitNot) | (1 << js_grammarParser.Not) | (1 << js_grammarParser.NullLiteral) | (1 << js_grammarParser.BooleanLiteral) | (1 << js_grammarParser.DecimalLiteral) | (1 << js_grammarParser.HexIntegerLiteral) | (1 << js_grammarParser.OctalIntegerLiteral2) | (1 << js_grammarParser.BinaryIntegerLiteral) | (1 << js_grammarParser.BigHexIntegerLiteral))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (js_grammarParser.BigOctalIntegerLiteral - 64)) | (1 << (js_grammarParser.BigBinaryIntegerLiteral - 64)) | (1 << (js_grammarParser.BigDecimalIntegerLiteral - 64)) | (1 << (js_grammarParser.Typeof - 64)) | (1 << (js_grammarParser.New - 64)) | (1 << (js_grammarParser.Void - 64)) | (1 << (js_grammarParser.Function - 64)) | (1 << (js_grammarParser.This - 64)) | (1 << (js_grammarParser.Delete - 64)) | (1 << (js_grammarParser.Class - 64)) | (1 << (js_grammarParser.Super - 64)) | (1 << (js_grammarParser.Async - 64)) | (1 << (js_grammarParser.Await - 64)) | (1 << (js_grammarParser.Import - 64)) | (1 << (js_grammarParser.Yield - 64)) | (1 << (js_grammarParser.Identifier - 64)) | (1 << (js_grammarParser.StringLiteral - 64)) | (1 << (js_grammarParser.TemplateStringLiteral - 64)))) != 0):
                    self.state = 330
                    self.expressionSequence()


                self.state = 333
                self.match(js_grammarParser.CloseParen)
                self.state = 334
                self.statement()
                pass

            elif la_ == 4:
                localctx = js_grammarParser.ForInStatementContext(self, localctx)
                self.enterOuterAlt(localctx, 4)
                self.state = 335
                self.match(js_grammarParser.For)
                self.state = 336
                self.match(js_grammarParser.OpenParen)
                self.state = 339
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [js_grammarParser.RegularExpressionLiteral, js_grammarParser.OpenBracket, js_grammarParser.OpenParen, js_grammarParser.OpenBrace, js_grammarParser.PlusPlus, js_grammarParser.MinusMinus, js_grammarParser.Plus, js_grammarParser.Minus, js_grammarParser.BitNot, js_grammarParser.Not, js_grammarParser.NullLiteral, js_grammarParser.BooleanLiteral, js_grammarParser.DecimalLiteral, js_grammarParser.HexIntegerLiteral, js_grammarParser.OctalIntegerLiteral2, js_grammarParser.BinaryIntegerLiteral, js_grammarParser.BigHexIntegerLiteral, js_grammarParser.BigOctalIntegerLiteral, js_grammarParser.BigBinaryIntegerLiteral, js_grammarParser.BigDecimalIntegerLiteral, js_grammarParser.Typeof, js_grammarParser.New, js_grammarParser.Void, js_grammarParser.Function, js_grammarParser.This, js_grammarParser.Delete, js_grammarParser.Class, js_grammarParser.Super, js_grammarParser.Async, js_grammarParser.Await, js_grammarParser.Import, js_grammarParser.Yield, js_grammarParser.Identifier, js_grammarParser.StringLiteral, js_grammarParser.TemplateStringLiteral]:
                    self.state = 337
                    self.singleExpression(0)
                    pass
                elif token in [js_grammarParser.Var, js_grammarParser.Let, js_grammarParser.Const]:
                    self.state = 338
                    self.variableDeclarationList()
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 341
                self.match(js_grammarParser.In)
                self.state = 342
                self.expressionSequence()
                self.state = 343
                self.match(js_grammarParser.CloseParen)
                self.state = 344
                self.statement()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class VarModifierContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Var(self):
            return self.getToken(js_grammarParser.Var, 0)

        def Let(self):
            return self.getToken(js_grammarParser.Let, 0)

        def Const(self):
            return self.getToken(js_grammarParser.Const, 0)

        def getRuleIndex(self):
            return js_grammarParser.RULE_varModifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVarModifier" ):
                listener.enterVarModifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVarModifier" ):
                listener.exitVarModifier(self)




    def varModifier(self):

        localctx = js_grammarParser.VarModifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 44, self.RULE_varModifier)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 348
            _la = self._input.LA(1)
            if not(((((_la - 74)) & ~0x3f) == 0 and ((1 << (_la - 74)) & ((1 << (js_grammarParser.Var - 74)) | (1 << (js_grammarParser.Let - 74)) | (1 << (js_grammarParser.Const - 74)))) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ContinueStatementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Continue(self):
            return self.getToken(js_grammarParser.Continue, 0)

        def eos(self):
            return self.getTypedRuleContext(js_grammarParser.EosContext,0)


        def Identifier(self):
            return self.getToken(js_grammarParser.Identifier, 0)

        def getRuleIndex(self):
            return js_grammarParser.RULE_continueStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterContinueStatement" ):
                listener.enterContinueStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitContinueStatement" ):
                listener.exitContinueStatement(self)




    def continueStatement(self):

        localctx = js_grammarParser.ContinueStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 46, self.RULE_continueStatement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 350
            self.match(js_grammarParser.Continue)
            self.state = 353
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,25,self._ctx)
            if la_ == 1:
                self.state = 351
                if not !here(LineTerminator):
                    from antlr4.error.Errors import FailedPredicateException
                    raise FailedPredicateException(self, "!here(LineTerminator)")
                self.state = 352
                self.match(js_grammarParser.Identifier)


            self.state = 355
            self.eos()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class BreakStatementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Break(self):
            return self.getToken(js_grammarParser.Break, 0)

        def eos(self):
            return self.getTypedRuleContext(js_grammarParser.EosContext,0)


        def Identifier(self):
            return self.getToken(js_grammarParser.Identifier, 0)

        def getRuleIndex(self):
            return js_grammarParser.RULE_breakStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBreakStatement" ):
                listener.enterBreakStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBreakStatement" ):
                listener.exitBreakStatement(self)




    def breakStatement(self):

        localctx = js_grammarParser.BreakStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 48, self.RULE_breakStatement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 357
            self.match(js_grammarParser.Break)
            self.state = 360
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,26,self._ctx)
            if la_ == 1:
                self.state = 358
                if not !here(LineTerminator):
                    from antlr4.error.Errors import FailedPredicateException
                    raise FailedPredicateException(self, "!here(LineTerminator)")
                self.state = 359
                self.match(js_grammarParser.Identifier)


            self.state = 362
            self.eos()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ReturnStatementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Return(self):
            return self.getToken(js_grammarParser.Return, 0)

        def eos(self):
            return self.getTypedRuleContext(js_grammarParser.EosContext,0)


        def expressionSequence(self):
            return self.getTypedRuleContext(js_grammarParser.ExpressionSequenceContext,0)


        def getRuleIndex(self):
            return js_grammarParser.RULE_returnStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterReturnStatement" ):
                listener.enterReturnStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitReturnStatement" ):
                listener.exitReturnStatement(self)




    def returnStatement(self):

        localctx = js_grammarParser.ReturnStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 50, self.RULE_returnStatement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 364
            self.match(js_grammarParser.Return)
            self.state = 367
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,27,self._ctx)
            if la_ == 1:
                self.state = 365
                if not !here(LineTerminator):
                    from antlr4.error.Errors import FailedPredicateException
                    raise FailedPredicateException(self, "!here(LineTerminator)")
                self.state = 366
                self.expressionSequence()


            self.state = 369
            self.eos()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class YieldStatementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Yield(self):
            return self.getToken(js_grammarParser.Yield, 0)

        def eos(self):
            return self.getTypedRuleContext(js_grammarParser.EosContext,0)


        def expressionSequence(self):
            return self.getTypedRuleContext(js_grammarParser.ExpressionSequenceContext,0)


        def getRuleIndex(self):
            return js_grammarParser.RULE_yieldStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterYieldStatement" ):
                listener.enterYieldStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitYieldStatement" ):
                listener.exitYieldStatement(self)




    def yieldStatement(self):

        localctx = js_grammarParser.YieldStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 52, self.RULE_yieldStatement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 371
            self.match(js_grammarParser.Yield)
            self.state = 374
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,28,self._ctx)
            if la_ == 1:
                self.state = 372
                if not !here(LineTerminator):
                    from antlr4.error.Errors import FailedPredicateException
                    raise FailedPredicateException(self, "!here(LineTerminator)")
                self.state = 373
                self.expressionSequence()


            self.state = 376
            self.eos()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class WithStatementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def With(self):
            return self.getToken(js_grammarParser.With, 0)

        def OpenParen(self):
            return self.getToken(js_grammarParser.OpenParen, 0)

        def expressionSequence(self):
            return self.getTypedRuleContext(js_grammarParser.ExpressionSequenceContext,0)


        def CloseParen(self):
            return self.getToken(js_grammarParser.CloseParen, 0)

        def statement(self):
            return self.getTypedRuleContext(js_grammarParser.StatementContext,0)


        def getRuleIndex(self):
            return js_grammarParser.RULE_withStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWithStatement" ):
                listener.enterWithStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWithStatement" ):
                listener.exitWithStatement(self)




    def withStatement(self):

        localctx = js_grammarParser.WithStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 54, self.RULE_withStatement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 378
            self.match(js_grammarParser.With)
            self.state = 379
            self.match(js_grammarParser.OpenParen)
            self.state = 380
            self.expressionSequence()
            self.state = 381
            self.match(js_grammarParser.CloseParen)
            self.state = 382
            self.statement()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SwitchStatementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Switch(self):
            return self.getToken(js_grammarParser.Switch, 0)

        def OpenParen(self):
            return self.getToken(js_grammarParser.OpenParen, 0)

        def expressionSequence(self):
            return self.getTypedRuleContext(js_grammarParser.ExpressionSequenceContext,0)


        def CloseParen(self):
            return self.getToken(js_grammarParser.CloseParen, 0)

        def caseBlock(self):
            return self.getTypedRuleContext(js_grammarParser.CaseBlockContext,0)


        def getRuleIndex(self):
            return js_grammarParser.RULE_switchStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSwitchStatement" ):
                listener.enterSwitchStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSwitchStatement" ):
                listener.exitSwitchStatement(self)




    def switchStatement(self):

        localctx = js_grammarParser.SwitchStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 56, self.RULE_switchStatement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 384
            self.match(js_grammarParser.Switch)
            self.state = 385
            self.match(js_grammarParser.OpenParen)
            self.state = 386
            self.expressionSequence()
            self.state = 387
            self.match(js_grammarParser.CloseParen)
            self.state = 388
            self.caseBlock()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CaseBlockContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OpenBrace(self):
            return self.getToken(js_grammarParser.OpenBrace, 0)

        def CloseBrace(self):
            return self.getToken(js_grammarParser.CloseBrace, 0)

        def caseClauses(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(js_grammarParser.CaseClausesContext)
            else:
                return self.getTypedRuleContext(js_grammarParser.CaseClausesContext,i)


        def defaultClause(self):
            return self.getTypedRuleContext(js_grammarParser.DefaultClauseContext,0)


        def getRuleIndex(self):
            return js_grammarParser.RULE_caseBlock

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCaseBlock" ):
                listener.enterCaseBlock(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCaseBlock" ):
                listener.exitCaseBlock(self)




    def caseBlock(self):

        localctx = js_grammarParser.CaseBlockContext(self, self._ctx, self.state)
        self.enterRule(localctx, 58, self.RULE_caseBlock)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 390
            self.match(js_grammarParser.OpenBrace)
            self.state = 392
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==js_grammarParser.Case:
                self.state = 391
                self.caseClauses()


            self.state = 398
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==js_grammarParser.Default:
                self.state = 394
                self.defaultClause()
                self.state = 396
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==js_grammarParser.Case:
                    self.state = 395
                    self.caseClauses()




            self.state = 400
            self.match(js_grammarParser.CloseBrace)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CaseClausesContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def caseClause(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(js_grammarParser.CaseClauseContext)
            else:
                return self.getTypedRuleContext(js_grammarParser.CaseClauseContext,i)


        def getRuleIndex(self):
            return js_grammarParser.RULE_caseClauses

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCaseClauses" ):
                listener.enterCaseClauses(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCaseClauses" ):
                listener.exitCaseClauses(self)




    def caseClauses(self):

        localctx = js_grammarParser.CaseClausesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 60, self.RULE_caseClauses)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 403 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 402
                self.caseClause()
                self.state = 405 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (_la==js_grammarParser.Case):
                    break

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CaseClauseContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Case(self):
            return self.getToken(js_grammarParser.Case, 0)

        def expressionSequence(self):
            return self.getTypedRuleContext(js_grammarParser.ExpressionSequenceContext,0)


        def Colon(self):
            return self.getToken(js_grammarParser.Colon, 0)

        def statementList(self):
            return self.getTypedRuleContext(js_grammarParser.StatementListContext,0)


        def getRuleIndex(self):
            return js_grammarParser.RULE_caseClause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCaseClause" ):
                listener.enterCaseClause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCaseClause" ):
                listener.exitCaseClause(self)




    def caseClause(self):

        localctx = js_grammarParser.CaseClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 62, self.RULE_caseClause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 407
            self.match(js_grammarParser.Case)
            self.state = 408
            self.expressionSequence()
            self.state = 409
            self.match(js_grammarParser.Colon)
            self.state = 411
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,33,self._ctx)
            if la_ == 1:
                self.state = 410
                self.statementList()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DefaultClauseContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Default(self):
            return self.getToken(js_grammarParser.Default, 0)

        def Colon(self):
            return self.getToken(js_grammarParser.Colon, 0)

        def statementList(self):
            return self.getTypedRuleContext(js_grammarParser.StatementListContext,0)


        def getRuleIndex(self):
            return js_grammarParser.RULE_defaultClause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDefaultClause" ):
                listener.enterDefaultClause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDefaultClause" ):
                listener.exitDefaultClause(self)




    def defaultClause(self):

        localctx = js_grammarParser.DefaultClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 64, self.RULE_defaultClause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 413
            self.match(js_grammarParser.Default)
            self.state = 414
            self.match(js_grammarParser.Colon)
            self.state = 416
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,34,self._ctx)
            if la_ == 1:
                self.state = 415
                self.statementList()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LabelledStatementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Identifier(self):
            return self.getToken(js_grammarParser.Identifier, 0)

        def Colon(self):
            return self.getToken(js_grammarParser.Colon, 0)

        def statement(self):
            return self.getTypedRuleContext(js_grammarParser.StatementContext,0)


        def getRuleIndex(self):
            return js_grammarParser.RULE_labelledStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLabelledStatement" ):
                listener.enterLabelledStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLabelledStatement" ):
                listener.exitLabelledStatement(self)




    def labelledStatement(self):

        localctx = js_grammarParser.LabelledStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 66, self.RULE_labelledStatement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 418
            self.match(js_grammarParser.Identifier)
            self.state = 419
            self.match(js_grammarParser.Colon)
            self.state = 420
            self.statement()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ThrowStatementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Throw(self):
            return self.getToken(js_grammarParser.Throw, 0)

        def expressionSequence(self):
            return self.getTypedRuleContext(js_grammarParser.ExpressionSequenceContext,0)


        def eos(self):
            return self.getTypedRuleContext(js_grammarParser.EosContext,0)


        def getRuleIndex(self):
            return js_grammarParser.RULE_throwStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterThrowStatement" ):
                listener.enterThrowStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitThrowStatement" ):
                listener.exitThrowStatement(self)




    def throwStatement(self):

        localctx = js_grammarParser.ThrowStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 68, self.RULE_throwStatement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 422
            self.match(js_grammarParser.Throw)
            self.state = 423
            if not !here(LineTerminator):
                from antlr4.error.Errors import FailedPredicateException
                raise FailedPredicateException(self, "!here(LineTerminator)")
            self.state = 424
            self.expressionSequence()
            self.state = 425
            self.eos()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TryStatementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Try(self):
            return self.getToken(js_grammarParser.Try, 0)

        def block(self):
            return self.getTypedRuleContext(js_grammarParser.BlockContext,0)


        def catchProduction(self):
            return self.getTypedRuleContext(js_grammarParser.CatchProductionContext,0)


        def finallyProduction(self):
            return self.getTypedRuleContext(js_grammarParser.FinallyProductionContext,0)


        def getRuleIndex(self):
            return js_grammarParser.RULE_tryStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTryStatement" ):
                listener.enterTryStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTryStatement" ):
                listener.exitTryStatement(self)




    def tryStatement(self):

        localctx = js_grammarParser.TryStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 70, self.RULE_tryStatement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 427
            self.match(js_grammarParser.Try)
            self.state = 428
            self.block()
            self.state = 434
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [js_grammarParser.Catch]:
                self.state = 429
                self.catchProduction()
                self.state = 431
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,35,self._ctx)
                if la_ == 1:
                    self.state = 430
                    self.finallyProduction()


                pass
            elif token in [js_grammarParser.Finally]:
                self.state = 433
                self.finallyProduction()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CatchProductionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Catch(self):
            return self.getToken(js_grammarParser.Catch, 0)

        def block(self):
            return self.getTypedRuleContext(js_grammarParser.BlockContext,0)


        def OpenParen(self):
            return self.getToken(js_grammarParser.OpenParen, 0)

        def CloseParen(self):
            return self.getToken(js_grammarParser.CloseParen, 0)

        def assignable(self):
            return self.getTypedRuleContext(js_grammarParser.AssignableContext,0)


        def getRuleIndex(self):
            return js_grammarParser.RULE_catchProduction

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCatchProduction" ):
                listener.enterCatchProduction(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCatchProduction" ):
                listener.exitCatchProduction(self)




    def catchProduction(self):

        localctx = js_grammarParser.CatchProductionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 72, self.RULE_catchProduction)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 436
            self.match(js_grammarParser.Catch)
            self.state = 442
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==js_grammarParser.OpenParen:
                self.state = 437
                self.match(js_grammarParser.OpenParen)
                self.state = 439
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==js_grammarParser.OpenBracket or _la==js_grammarParser.OpenBrace or _la==js_grammarParser.Identifier:
                    self.state = 438
                    self.assignable()


                self.state = 441
                self.match(js_grammarParser.CloseParen)


            self.state = 444
            self.block()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FinallyProductionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Finally(self):
            return self.getToken(js_grammarParser.Finally, 0)

        def block(self):
            return self.getTypedRuleContext(js_grammarParser.BlockContext,0)


        def getRuleIndex(self):
            return js_grammarParser.RULE_finallyProduction

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFinallyProduction" ):
                listener.enterFinallyProduction(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFinallyProduction" ):
                listener.exitFinallyProduction(self)




    def finallyProduction(self):

        localctx = js_grammarParser.FinallyProductionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 74, self.RULE_finallyProduction)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 446
            self.match(js_grammarParser.Finally)
            self.state = 447
            self.block()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DebuggerStatementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Debugger(self):
            return self.getToken(js_grammarParser.Debugger, 0)

        def eos(self):
            return self.getTypedRuleContext(js_grammarParser.EosContext,0)


        def getRuleIndex(self):
            return js_grammarParser.RULE_debuggerStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDebuggerStatement" ):
                listener.enterDebuggerStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDebuggerStatement" ):
                listener.exitDebuggerStatement(self)




    def debuggerStatement(self):

        localctx = js_grammarParser.DebuggerStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 76, self.RULE_debuggerStatement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 449
            self.match(js_grammarParser.Debugger)
            self.state = 450
            self.eos()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FunctionDeclarationContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Function(self):
            return self.getToken(js_grammarParser.Function, 0)

        def Identifier(self):
            return self.getToken(js_grammarParser.Identifier, 0)

        def OpenParen(self):
            return self.getToken(js_grammarParser.OpenParen, 0)

        def CloseParen(self):
            return self.getToken(js_grammarParser.CloseParen, 0)

        def OpenBrace(self):
            return self.getToken(js_grammarParser.OpenBrace, 0)

        def functionBody(self):
            return self.getTypedRuleContext(js_grammarParser.FunctionBodyContext,0)


        def CloseBrace(self):
            return self.getToken(js_grammarParser.CloseBrace, 0)

        def Async(self):
            return self.getToken(js_grammarParser.Async, 0)

        def Multiply(self):
            return self.getToken(js_grammarParser.Multiply, 0)

        def formalParameterList(self):
            return self.getTypedRuleContext(js_grammarParser.FormalParameterListContext,0)


        def getRuleIndex(self):
            return js_grammarParser.RULE_functionDeclaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFunctionDeclaration" ):
                listener.enterFunctionDeclaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFunctionDeclaration" ):
                listener.exitFunctionDeclaration(self)




    def functionDeclaration(self):

        localctx = js_grammarParser.FunctionDeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 78, self.RULE_functionDeclaration)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 453
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==js_grammarParser.Async:
                self.state = 452
                self.match(js_grammarParser.Async)


            self.state = 455
            self.match(js_grammarParser.Function)
            self.state = 457
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==js_grammarParser.Multiply:
                self.state = 456
                self.match(js_grammarParser.Multiply)


            self.state = 459
            self.match(js_grammarParser.Identifier)
            self.state = 460
            self.match(js_grammarParser.OpenParen)
            self.state = 462
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << js_grammarParser.OpenBracket) | (1 << js_grammarParser.OpenBrace) | (1 << js_grammarParser.Ellipsis))) != 0) or _la==js_grammarParser.Identifier:
                self.state = 461
                self.formalParameterList()


            self.state = 464
            self.match(js_grammarParser.CloseParen)
            self.state = 465
            self.match(js_grammarParser.OpenBrace)
            self.state = 466
            self.functionBody()
            self.state = 467
            self.match(js_grammarParser.CloseBrace)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ClassDeclarationContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Class(self):
            return self.getToken(js_grammarParser.Class, 0)

        def Identifier(self):
            return self.getToken(js_grammarParser.Identifier, 0)

        def classTail(self):
            return self.getTypedRuleContext(js_grammarParser.ClassTailContext,0)


        def getRuleIndex(self):
            return js_grammarParser.RULE_classDeclaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterClassDeclaration" ):
                listener.enterClassDeclaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitClassDeclaration" ):
                listener.exitClassDeclaration(self)




    def classDeclaration(self):

        localctx = js_grammarParser.ClassDeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 80, self.RULE_classDeclaration)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 469
            self.match(js_grammarParser.Class)
            self.state = 470
            self.match(js_grammarParser.Identifier)
            self.state = 471
            self.classTail()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ClassTailContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OpenBrace(self):
            return self.getToken(js_grammarParser.OpenBrace, 0)

        def CloseBrace(self):
            return self.getToken(js_grammarParser.CloseBrace, 0)

        def Extends(self):
            return self.getToken(js_grammarParser.Extends, 0)

        def singleExpression(self):
            return self.getTypedRuleContext(js_grammarParser.SingleExpressionContext,0)


        def classElement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(js_grammarParser.ClassElementContext)
            else:
                return self.getTypedRuleContext(js_grammarParser.ClassElementContext,i)


        def getRuleIndex(self):
            return js_grammarParser.RULE_classTail

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterClassTail" ):
                listener.enterClassTail(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitClassTail" ):
                listener.exitClassTail(self)




    def classTail(self):

        localctx = js_grammarParser.ClassTailContext(self, self._ctx, self.state)
        self.enterRule(localctx, 82, self.RULE_classTail)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 475
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==js_grammarParser.Extends:
                self.state = 473
                self.match(js_grammarParser.Extends)
                self.state = 474
                self.singleExpression(0)


            self.state = 477
            self.match(js_grammarParser.OpenBrace)
            self.state = 481
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << js_grammarParser.T__0) | (1 << js_grammarParser.OpenBracket) | (1 << js_grammarParser.SemiColon) | (1 << js_grammarParser.NullLiteral) | (1 << js_grammarParser.BooleanLiteral) | (1 << js_grammarParser.DecimalLiteral) | (1 << js_grammarParser.HexIntegerLiteral) | (1 << js_grammarParser.OctalIntegerLiteral2) | (1 << js_grammarParser.BinaryIntegerLiteral))) != 0) or ((((_la - 67)) & ~0x3f) == 0 and ((1 << (_la - 67)) & ((1 << (js_grammarParser.Break - 67)) | (1 << (js_grammarParser.Do - 67)) | (1 << (js_grammarParser.Instanceof - 67)) | (1 << (js_grammarParser.Typeof - 67)) | (1 << (js_grammarParser.Case - 67)) | (1 << (js_grammarParser.Else - 67)) | (1 << (js_grammarParser.New - 67)) | (1 << (js_grammarParser.Var - 67)) | (1 << (js_grammarParser.Let - 67)) | (1 << (js_grammarParser.Catch - 67)) | (1 << (js_grammarParser.Finally - 67)) | (1 << (js_grammarParser.Return - 67)) | (1 << (js_grammarParser.Void - 67)) | (1 << (js_grammarParser.Continue - 67)) | (1 << (js_grammarParser.For - 67)) | (1 << (js_grammarParser.Switch - 67)) | (1 << (js_grammarParser.While - 67)) | (1 << (js_grammarParser.Debugger - 67)) | (1 << (js_grammarParser.Function - 67)) | (1 << (js_grammarParser.This - 67)) | (1 << (js_grammarParser.With - 67)) | (1 << (js_grammarParser.Default - 67)) | (1 << (js_grammarParser.If - 67)) | (1 << (js_grammarParser.Throw - 67)) | (1 << (js_grammarParser.Delete - 67)) | (1 << (js_grammarParser.In - 67)) | (1 << (js_grammarParser.Try - 67)) | (1 << (js_grammarParser.Class - 67)) | (1 << (js_grammarParser.Extends - 67)) | (1 << (js_grammarParser.Super - 67)) | (1 << (js_grammarParser.Constructor - 67)) | (1 << (js_grammarParser.Const - 67)) | (1 << (js_grammarParser.Static - 67)) | (1 << (js_grammarParser.Get - 67)) | (1 << (js_grammarParser.Set - 67)) | (1 << (js_grammarParser.Async - 67)) | (1 << (js_grammarParser.Await - 67)) | (1 << (js_grammarParser.As - 67)) | (1 << (js_grammarParser.From - 67)) | (1 << (js_grammarParser.Enum - 67)) | (1 << (js_grammarParser.Export - 67)) | (1 << (js_grammarParser.Import - 67)) | (1 << (js_grammarParser.Implements - 67)) | (1 << (js_grammarParser.Private - 67)) | (1 << (js_grammarParser.Public - 67)) | (1 << (js_grammarParser.Interface - 67)) | (1 << (js_grammarParser.Package - 67)) | (1 << (js_grammarParser.Protected - 67)) | (1 << (js_grammarParser.Yield - 67)) | (1 << (js_grammarParser.Identifier - 67)) | (1 << (js_grammarParser.StringLiteral - 67)))) != 0):
                self.state = 478
                self.classElement()
                self.state = 483
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 484
            self.match(js_grammarParser.CloseBrace)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ClassElementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def methodDefinition(self):
            return self.getTypedRuleContext(js_grammarParser.MethodDefinitionContext,0)


        def emptyStatement(self):
            return self.getTypedRuleContext(js_grammarParser.EmptyStatementContext,0)


        def propertyName(self):
            return self.getTypedRuleContext(js_grammarParser.PropertyNameContext,0)


        def Assign(self):
            return self.getToken(js_grammarParser.Assign, 0)

        def singleExpression(self):
            return self.getTypedRuleContext(js_grammarParser.SingleExpressionContext,0)


        def getRuleIndex(self):
            return js_grammarParser.RULE_classElement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterClassElement" ):
                listener.enterClassElement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitClassElement" ):
                listener.exitClassElement(self)




    def classElement(self):

        localctx = js_grammarParser.ClassElementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 84, self.RULE_classElement)
        self._la = 0 # Token type
        try:
            self.state = 495
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,45,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 486
                self.methodDefinition()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 487
                self.emptyStatement()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 489
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==js_grammarParser.T__0:
                    self.state = 488
                    self.match(js_grammarParser.T__0)


                self.state = 491
                self.propertyName()
                self.state = 492
                self.match(js_grammarParser.Assign)
                self.state = 493
                self.singleExpression(0)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MethodDefinitionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Constructor(self):
            return self.getToken(js_grammarParser.Constructor, 0)

        def OpenParen(self):
            return self.getToken(js_grammarParser.OpenParen, 0)

        def CloseParen(self):
            return self.getToken(js_grammarParser.CloseParen, 0)

        def OpenBrace(self):
            return self.getToken(js_grammarParser.OpenBrace, 0)

        def functionBody(self):
            return self.getTypedRuleContext(js_grammarParser.FunctionBodyContext,0)


        def CloseBrace(self):
            return self.getToken(js_grammarParser.CloseBrace, 0)

        def formalParameterList(self):
            return self.getTypedRuleContext(js_grammarParser.FormalParameterListContext,0)


        def Static(self):
            return self.getToken(js_grammarParser.Static, 0)

        def Identifier(self):
            return self.getToken(js_grammarParser.Identifier, 0)

        def Get(self):
            return self.getToken(js_grammarParser.Get, 0)

        def Set(self):
            return self.getToken(js_grammarParser.Set, 0)

        def getRuleIndex(self):
            return js_grammarParser.RULE_methodDefinition

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMethodDefinition" ):
                listener.enterMethodDefinition(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMethodDefinition" ):
                listener.exitMethodDefinition(self)




    def methodDefinition(self):

        localctx = js_grammarParser.MethodDefinitionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 86, self.RULE_methodDefinition)
        self._la = 0 # Token type
        try:
            self.state = 545
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [js_grammarParser.Constructor]:
                self.enterOuterAlt(localctx, 1)
                self.state = 497
                self.match(js_grammarParser.Constructor)
                self.state = 498
                self.match(js_grammarParser.OpenParen)
                self.state = 500
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << js_grammarParser.OpenBracket) | (1 << js_grammarParser.OpenBrace) | (1 << js_grammarParser.Ellipsis))) != 0) or _la==js_grammarParser.Identifier:
                    self.state = 499
                    self.formalParameterList()


                self.state = 502
                self.match(js_grammarParser.CloseParen)
                self.state = 503
                self.match(js_grammarParser.OpenBrace)
                self.state = 504
                self.functionBody()
                self.state = 505
                self.match(js_grammarParser.CloseBrace)
                pass
            elif token in [js_grammarParser.Static]:
                self.enterOuterAlt(localctx, 2)
                self.state = 507
                self.match(js_grammarParser.Static)
                self.state = 508
                self.match(js_grammarParser.Identifier)
                self.state = 509
                self.match(js_grammarParser.OpenParen)
                self.state = 511
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << js_grammarParser.OpenBracket) | (1 << js_grammarParser.OpenBrace) | (1 << js_grammarParser.Ellipsis))) != 0) or _la==js_grammarParser.Identifier:
                    self.state = 510
                    self.formalParameterList()


                self.state = 513
                self.match(js_grammarParser.CloseParen)
                self.state = 514
                self.match(js_grammarParser.OpenBrace)
                self.state = 515
                self.functionBody()
                self.state = 516
                self.match(js_grammarParser.CloseBrace)
                pass
            elif token in [js_grammarParser.Identifier]:
                self.enterOuterAlt(localctx, 3)
                self.state = 518
                self.match(js_grammarParser.Identifier)
                self.state = 519
                self.match(js_grammarParser.OpenParen)
                self.state = 521
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << js_grammarParser.OpenBracket) | (1 << js_grammarParser.OpenBrace) | (1 << js_grammarParser.Ellipsis))) != 0) or _la==js_grammarParser.Identifier:
                    self.state = 520
                    self.formalParameterList()


                self.state = 523
                self.match(js_grammarParser.CloseParen)
                self.state = 524
                self.match(js_grammarParser.OpenBrace)
                self.state = 525
                self.functionBody()
                self.state = 526
                self.match(js_grammarParser.CloseBrace)
                pass
            elif token in [js_grammarParser.Get]:
                self.enterOuterAlt(localctx, 4)
                self.state = 528
                self.match(js_grammarParser.Get)
                self.state = 529
                self.match(js_grammarParser.OpenParen)
                self.state = 530
                self.match(js_grammarParser.CloseParen)
                self.state = 531
                self.match(js_grammarParser.OpenBrace)
                self.state = 532
                self.functionBody()
                self.state = 533
                self.match(js_grammarParser.CloseBrace)
                pass
            elif token in [js_grammarParser.Set]:
                self.enterOuterAlt(localctx, 5)
                self.state = 535
                self.match(js_grammarParser.Set)
                self.state = 536
                self.match(js_grammarParser.OpenParen)
                self.state = 538
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << js_grammarParser.OpenBracket) | (1 << js_grammarParser.OpenBrace) | (1 << js_grammarParser.Ellipsis))) != 0) or _la==js_grammarParser.Identifier:
                    self.state = 537
                    self.formalParameterList()


                self.state = 540
                self.match(js_grammarParser.CloseParen)
                self.state = 541
                self.match(js_grammarParser.OpenBrace)
                self.state = 542
                self.functionBody()
                self.state = 543
                self.match(js_grammarParser.CloseBrace)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FormalParameterListContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def formalParameterArg(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(js_grammarParser.FormalParameterArgContext)
            else:
                return self.getTypedRuleContext(js_grammarParser.FormalParameterArgContext,i)


        def Comma(self, i:int=None):
            if i is None:
                return self.getTokens(js_grammarParser.Comma)
            else:
                return self.getToken(js_grammarParser.Comma, i)

        def lastFormalParameterArg(self):
            return self.getTypedRuleContext(js_grammarParser.LastFormalParameterArgContext,0)


        def getRuleIndex(self):
            return js_grammarParser.RULE_formalParameterList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFormalParameterList" ):
                listener.enterFormalParameterList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFormalParameterList" ):
                listener.exitFormalParameterList(self)




    def formalParameterList(self):

        localctx = js_grammarParser.FormalParameterListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 88, self.RULE_formalParameterList)
        self._la = 0 # Token type
        try:
            self.state = 560
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [js_grammarParser.OpenBracket, js_grammarParser.OpenBrace, js_grammarParser.Identifier]:
                self.enterOuterAlt(localctx, 1)
                self.state = 547
                self.formalParameterArg()
                self.state = 552
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,51,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 548
                        self.match(js_grammarParser.Comma)
                        self.state = 549
                        self.formalParameterArg() 
                    self.state = 554
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,51,self._ctx)

                self.state = 557
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==js_grammarParser.Comma:
                    self.state = 555
                    self.match(js_grammarParser.Comma)
                    self.state = 556
                    self.lastFormalParameterArg()


                pass
            elif token in [js_grammarParser.Ellipsis]:
                self.enterOuterAlt(localctx, 2)
                self.state = 559
                self.lastFormalParameterArg()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FormalParameterArgContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def assignable(self):
            return self.getTypedRuleContext(js_grammarParser.AssignableContext,0)


        def Assign(self):
            return self.getToken(js_grammarParser.Assign, 0)

        def singleExpression(self):
            return self.getTypedRuleContext(js_grammarParser.SingleExpressionContext,0)


        def getRuleIndex(self):
            return js_grammarParser.RULE_formalParameterArg

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFormalParameterArg" ):
                listener.enterFormalParameterArg(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFormalParameterArg" ):
                listener.exitFormalParameterArg(self)




    def formalParameterArg(self):

        localctx = js_grammarParser.FormalParameterArgContext(self, self._ctx, self.state)
        self.enterRule(localctx, 90, self.RULE_formalParameterArg)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 562
            self.assignable()
            self.state = 565
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==js_grammarParser.Assign:
                self.state = 563
                self.match(js_grammarParser.Assign)
                self.state = 564
                self.singleExpression(0)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LastFormalParameterArgContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Ellipsis(self):
            return self.getToken(js_grammarParser.Ellipsis, 0)

        def singleExpression(self):
            return self.getTypedRuleContext(js_grammarParser.SingleExpressionContext,0)


        def getRuleIndex(self):
            return js_grammarParser.RULE_lastFormalParameterArg

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLastFormalParameterArg" ):
                listener.enterLastFormalParameterArg(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLastFormalParameterArg" ):
                listener.exitLastFormalParameterArg(self)




    def lastFormalParameterArg(self):

        localctx = js_grammarParser.LastFormalParameterArgContext(self, self._ctx, self.state)
        self.enterRule(localctx, 92, self.RULE_lastFormalParameterArg)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 567
            self.match(js_grammarParser.Ellipsis)
            self.state = 568
            self.singleExpression(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FunctionBodyContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def sourceElements(self):
            return self.getTypedRuleContext(js_grammarParser.SourceElementsContext,0)


        def getRuleIndex(self):
            return js_grammarParser.RULE_functionBody

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFunctionBody" ):
                listener.enterFunctionBody(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFunctionBody" ):
                listener.exitFunctionBody(self)




    def functionBody(self):

        localctx = js_grammarParser.FunctionBodyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 94, self.RULE_functionBody)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 571
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,55,self._ctx)
            if la_ == 1:
                self.state = 570
                self.sourceElements()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SourceElementsContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def sourceElement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(js_grammarParser.SourceElementContext)
            else:
                return self.getTypedRuleContext(js_grammarParser.SourceElementContext,i)


        def getRuleIndex(self):
            return js_grammarParser.RULE_sourceElements

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSourceElements" ):
                listener.enterSourceElements(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSourceElements" ):
                listener.exitSourceElements(self)




    def sourceElements(self):

        localctx = js_grammarParser.SourceElementsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 96, self.RULE_sourceElements)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 574 
            self._errHandler.sync(self)
            _alt = 1
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 573
                    self.sourceElement()

                else:
                    raise NoViableAltException(self)
                self.state = 576 
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,56,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ArrayLiteralContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OpenBracket(self):
            return self.getToken(js_grammarParser.OpenBracket, 0)

        def elementList(self):
            return self.getTypedRuleContext(js_grammarParser.ElementListContext,0)


        def CloseBracket(self):
            return self.getToken(js_grammarParser.CloseBracket, 0)

        def getRuleIndex(self):
            return js_grammarParser.RULE_arrayLiteral

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterArrayLiteral" ):
                listener.enterArrayLiteral(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitArrayLiteral" ):
                listener.exitArrayLiteral(self)




    def arrayLiteral(self):

        localctx = js_grammarParser.ArrayLiteralContext(self, self._ctx, self.state)
        self.enterRule(localctx, 98, self.RULE_arrayLiteral)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 578
            self.match(js_grammarParser.OpenBracket)
            self.state = 579
            self.elementList()
            self.state = 580
            self.match(js_grammarParser.CloseBracket)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ElementListContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Comma(self, i:int=None):
            if i is None:
                return self.getTokens(js_grammarParser.Comma)
            else:
                return self.getToken(js_grammarParser.Comma, i)

        def arrayElement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(js_grammarParser.ArrayElementContext)
            else:
                return self.getTypedRuleContext(js_grammarParser.ArrayElementContext,i)


        def getRuleIndex(self):
            return js_grammarParser.RULE_elementList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterElementList" ):
                listener.enterElementList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitElementList" ):
                listener.exitElementList(self)




    def elementList(self):

        localctx = js_grammarParser.ElementListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 100, self.RULE_elementList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 585
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,57,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 582
                    self.match(js_grammarParser.Comma) 
                self.state = 587
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,57,self._ctx)

            self.state = 589
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << js_grammarParser.RegularExpressionLiteral) | (1 << js_grammarParser.OpenBracket) | (1 << js_grammarParser.OpenParen) | (1 << js_grammarParser.OpenBrace) | (1 << js_grammarParser.PlusPlus) | (1 << js_grammarParser.MinusMinus) | (1 << js_grammarParser.Plus) | (1 << js_grammarParser.Minus) | (1 << js_grammarParser.BitNot) | (1 << js_grammarParser.Not) | (1 << js_grammarParser.Ellipsis) | (1 << js_grammarParser.NullLiteral) | (1 << js_grammarParser.BooleanLiteral) | (1 << js_grammarParser.DecimalLiteral) | (1 << js_grammarParser.HexIntegerLiteral) | (1 << js_grammarParser.OctalIntegerLiteral2) | (1 << js_grammarParser.BinaryIntegerLiteral) | (1 << js_grammarParser.BigHexIntegerLiteral))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (js_grammarParser.BigOctalIntegerLiteral - 64)) | (1 << (js_grammarParser.BigBinaryIntegerLiteral - 64)) | (1 << (js_grammarParser.BigDecimalIntegerLiteral - 64)) | (1 << (js_grammarParser.Typeof - 64)) | (1 << (js_grammarParser.New - 64)) | (1 << (js_grammarParser.Void - 64)) | (1 << (js_grammarParser.Function - 64)) | (1 << (js_grammarParser.This - 64)) | (1 << (js_grammarParser.Delete - 64)) | (1 << (js_grammarParser.Class - 64)) | (1 << (js_grammarParser.Super - 64)) | (1 << (js_grammarParser.Async - 64)) | (1 << (js_grammarParser.Await - 64)) | (1 << (js_grammarParser.Import - 64)) | (1 << (js_grammarParser.Yield - 64)) | (1 << (js_grammarParser.Identifier - 64)) | (1 << (js_grammarParser.StringLiteral - 64)) | (1 << (js_grammarParser.TemplateStringLiteral - 64)))) != 0):
                self.state = 588
                self.arrayElement()


            self.state = 599
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,60,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 592 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while True:
                        self.state = 591
                        self.match(js_grammarParser.Comma)
                        self.state = 594 
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if not (_la==js_grammarParser.Comma):
                            break

                    self.state = 596
                    self.arrayElement() 
                self.state = 601
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,60,self._ctx)

            self.state = 605
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==js_grammarParser.Comma:
                self.state = 602
                self.match(js_grammarParser.Comma)
                self.state = 607
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ArrayElementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def singleExpression(self):
            return self.getTypedRuleContext(js_grammarParser.SingleExpressionContext,0)


        def Ellipsis(self):
            return self.getToken(js_grammarParser.Ellipsis, 0)

        def getRuleIndex(self):
            return js_grammarParser.RULE_arrayElement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterArrayElement" ):
                listener.enterArrayElement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitArrayElement" ):
                listener.exitArrayElement(self)




    def arrayElement(self):

        localctx = js_grammarParser.ArrayElementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 102, self.RULE_arrayElement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 609
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==js_grammarParser.Ellipsis:
                self.state = 608
                self.match(js_grammarParser.Ellipsis)


            self.state = 611
            self.singleExpression(0)
            notImplemented();
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ObjectLiteralContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OpenBrace(self):
            return self.getToken(js_grammarParser.OpenBrace, 0)

        def CloseBrace(self):
            return self.getToken(js_grammarParser.CloseBrace, 0)

        def propertyAssignment(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(js_grammarParser.PropertyAssignmentContext)
            else:
                return self.getTypedRuleContext(js_grammarParser.PropertyAssignmentContext,i)


        def Comma(self, i:int=None):
            if i is None:
                return self.getTokens(js_grammarParser.Comma)
            else:
                return self.getToken(js_grammarParser.Comma, i)

        def getRuleIndex(self):
            return js_grammarParser.RULE_objectLiteral

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterObjectLiteral" ):
                listener.enterObjectLiteral(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitObjectLiteral" ):
                listener.exitObjectLiteral(self)




    def objectLiteral(self):

        localctx = js_grammarParser.ObjectLiteralContext(self, self._ctx, self.state)
        self.enterRule(localctx, 104, self.RULE_objectLiteral)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 614
            self.match(js_grammarParser.OpenBrace)
            self.state = 623
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << js_grammarParser.RegularExpressionLiteral) | (1 << js_grammarParser.OpenBracket) | (1 << js_grammarParser.OpenParen) | (1 << js_grammarParser.OpenBrace) | (1 << js_grammarParser.PlusPlus) | (1 << js_grammarParser.MinusMinus) | (1 << js_grammarParser.Plus) | (1 << js_grammarParser.Minus) | (1 << js_grammarParser.BitNot) | (1 << js_grammarParser.Not) | (1 << js_grammarParser.Multiply) | (1 << js_grammarParser.Ellipsis) | (1 << js_grammarParser.NullLiteral) | (1 << js_grammarParser.BooleanLiteral) | (1 << js_grammarParser.DecimalLiteral) | (1 << js_grammarParser.HexIntegerLiteral) | (1 << js_grammarParser.OctalIntegerLiteral2) | (1 << js_grammarParser.BinaryIntegerLiteral) | (1 << js_grammarParser.BigHexIntegerLiteral))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (js_grammarParser.BigOctalIntegerLiteral - 64)) | (1 << (js_grammarParser.BigBinaryIntegerLiteral - 64)) | (1 << (js_grammarParser.BigDecimalIntegerLiteral - 64)) | (1 << (js_grammarParser.Break - 64)) | (1 << (js_grammarParser.Do - 64)) | (1 << (js_grammarParser.Instanceof - 64)) | (1 << (js_grammarParser.Typeof - 64)) | (1 << (js_grammarParser.Case - 64)) | (1 << (js_grammarParser.Else - 64)) | (1 << (js_grammarParser.New - 64)) | (1 << (js_grammarParser.Var - 64)) | (1 << (js_grammarParser.Let - 64)) | (1 << (js_grammarParser.Catch - 64)) | (1 << (js_grammarParser.Finally - 64)) | (1 << (js_grammarParser.Return - 64)) | (1 << (js_grammarParser.Void - 64)) | (1 << (js_grammarParser.Continue - 64)) | (1 << (js_grammarParser.For - 64)) | (1 << (js_grammarParser.Switch - 64)) | (1 << (js_grammarParser.While - 64)) | (1 << (js_grammarParser.Debugger - 64)) | (1 << (js_grammarParser.Function - 64)) | (1 << (js_grammarParser.This - 64)) | (1 << (js_grammarParser.With - 64)) | (1 << (js_grammarParser.Default - 64)) | (1 << (js_grammarParser.If - 64)) | (1 << (js_grammarParser.Throw - 64)) | (1 << (js_grammarParser.Delete - 64)) | (1 << (js_grammarParser.In - 64)) | (1 << (js_grammarParser.Try - 64)) | (1 << (js_grammarParser.Class - 64)) | (1 << (js_grammarParser.Extends - 64)) | (1 << (js_grammarParser.Super - 64)) | (1 << (js_grammarParser.Const - 64)) | (1 << (js_grammarParser.Static - 64)) | (1 << (js_grammarParser.Get - 64)) | (1 << (js_grammarParser.Set - 64)) | (1 << (js_grammarParser.Async - 64)) | (1 << (js_grammarParser.Await - 64)) | (1 << (js_grammarParser.As - 64)) | (1 << (js_grammarParser.From - 64)) | (1 << (js_grammarParser.Enum - 64)) | (1 << (js_grammarParser.Export - 64)) | (1 << (js_grammarParser.Import - 64)) | (1 << (js_grammarParser.Implements - 64)) | (1 << (js_grammarParser.Private - 64)) | (1 << (js_grammarParser.Public - 64)) | (1 << (js_grammarParser.Interface - 64)) | (1 << (js_grammarParser.Package - 64)) | (1 << (js_grammarParser.Protected - 64)) | (1 << (js_grammarParser.Yield - 64)) | (1 << (js_grammarParser.Identifier - 64)) | (1 << (js_grammarParser.StringLiteral - 64)) | (1 << (js_grammarParser.TemplateStringLiteral - 64)))) != 0):
                self.state = 615
                self.propertyAssignment()
                self.state = 620
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,63,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 616
                        self.match(js_grammarParser.Comma)
                        self.state = 617
                        self.propertyAssignment() 
                    self.state = 622
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,63,self._ctx)



            self.state = 626
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==js_grammarParser.Comma:
                self.state = 625
                self.match(js_grammarParser.Comma)


            self.state = 628
            self.match(js_grammarParser.CloseBrace)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PropertyAssignmentContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return js_grammarParser.RULE_propertyAssignment

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class PropertyExpressionAssignmentContext(PropertyAssignmentContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a js_grammarParser.PropertyAssignmentContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def propertyName(self):
            return self.getTypedRuleContext(js_grammarParser.PropertyNameContext,0)

        def Colon(self):
            return self.getToken(js_grammarParser.Colon, 0)
        def singleExpression(self):
            return self.getTypedRuleContext(js_grammarParser.SingleExpressionContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPropertyExpressionAssignment" ):
                listener.enterPropertyExpressionAssignment(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPropertyExpressionAssignment" ):
                listener.exitPropertyExpressionAssignment(self)


    class ComputedPropertyExpressionAssignmentContext(PropertyAssignmentContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a js_grammarParser.PropertyAssignmentContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def OpenBracket(self):
            return self.getToken(js_grammarParser.OpenBracket, 0)
        def singleExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(js_grammarParser.SingleExpressionContext)
            else:
                return self.getTypedRuleContext(js_grammarParser.SingleExpressionContext,i)

        def CloseBracket(self):
            return self.getToken(js_grammarParser.CloseBracket, 0)
        def Colon(self):
            return self.getToken(js_grammarParser.Colon, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterComputedPropertyExpressionAssignment" ):
                listener.enterComputedPropertyExpressionAssignment(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitComputedPropertyExpressionAssignment" ):
                listener.exitComputedPropertyExpressionAssignment(self)


    class PropertyShorthandContext(PropertyAssignmentContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a js_grammarParser.PropertyAssignmentContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def singleExpression(self):
            return self.getTypedRuleContext(js_grammarParser.SingleExpressionContext,0)

        def Ellipsis(self):
            return self.getToken(js_grammarParser.Ellipsis, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPropertyShorthand" ):
                listener.enterPropertyShorthand(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPropertyShorthand" ):
                listener.exitPropertyShorthand(self)


    class PropertySetterContext(PropertyAssignmentContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a js_grammarParser.PropertyAssignmentContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def Set(self):
            return self.getToken(js_grammarParser.Set, 0)
        def OpenParen(self):
            return self.getToken(js_grammarParser.OpenParen, 0)
        def formalParameterArg(self):
            return self.getTypedRuleContext(js_grammarParser.FormalParameterArgContext,0)

        def CloseParen(self):
            return self.getToken(js_grammarParser.CloseParen, 0)
        def OpenBrace(self):
            return self.getToken(js_grammarParser.OpenBrace, 0)
        def functionBody(self):
            return self.getTypedRuleContext(js_grammarParser.FunctionBodyContext,0)

        def CloseBrace(self):
            return self.getToken(js_grammarParser.CloseBrace, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPropertySetter" ):
                listener.enterPropertySetter(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPropertySetter" ):
                listener.exitPropertySetter(self)


    class PropertyGetterContext(PropertyAssignmentContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a js_grammarParser.PropertyAssignmentContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def Get(self):
            return self.getToken(js_grammarParser.Get, 0)
        def OpenParen(self):
            return self.getToken(js_grammarParser.OpenParen, 0)
        def CloseParen(self):
            return self.getToken(js_grammarParser.CloseParen, 0)
        def OpenBrace(self):
            return self.getToken(js_grammarParser.OpenBrace, 0)
        def functionBody(self):
            return self.getTypedRuleContext(js_grammarParser.FunctionBodyContext,0)

        def CloseBrace(self):
            return self.getToken(js_grammarParser.CloseBrace, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPropertyGetter" ):
                listener.enterPropertyGetter(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPropertyGetter" ):
                listener.exitPropertyGetter(self)


    class FunctionPropertyContext(PropertyAssignmentContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a js_grammarParser.PropertyAssignmentContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def propertyName(self):
            return self.getTypedRuleContext(js_grammarParser.PropertyNameContext,0)

        def OpenParen(self):
            return self.getToken(js_grammarParser.OpenParen, 0)
        def CloseParen(self):
            return self.getToken(js_grammarParser.CloseParen, 0)
        def OpenBrace(self):
            return self.getToken(js_grammarParser.OpenBrace, 0)
        def functionBody(self):
            return self.getTypedRuleContext(js_grammarParser.FunctionBodyContext,0)

        def CloseBrace(self):
            return self.getToken(js_grammarParser.CloseBrace, 0)
        def Async(self):
            return self.getToken(js_grammarParser.Async, 0)
        def Multiply(self):
            return self.getToken(js_grammarParser.Multiply, 0)
        def formalParameterList(self):
            return self.getTypedRuleContext(js_grammarParser.FormalParameterListContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFunctionProperty" ):
                listener.enterFunctionProperty(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFunctionProperty" ):
                listener.exitFunctionProperty(self)



    def propertyAssignment(self):

        localctx = js_grammarParser.PropertyAssignmentContext(self, self._ctx, self.state)
        self.enterRule(localctx, 106, self.RULE_propertyAssignment)
        self._la = 0 # Token type
        try:
            self.state = 675
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,70,self._ctx)
            if la_ == 1:
                localctx = js_grammarParser.PropertyExpressionAssignmentContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 630
                self.propertyName()
                self.state = 631
                self.match(js_grammarParser.Colon)
                self.state = 632
                self.singleExpression(0)
                pass

            elif la_ == 2:
                localctx = js_grammarParser.ComputedPropertyExpressionAssignmentContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 634
                self.match(js_grammarParser.OpenBracket)
                self.state = 635
                self.singleExpression(0)
                self.state = 636
                self.match(js_grammarParser.CloseBracket)
                self.state = 637
                self.match(js_grammarParser.Colon)
                self.state = 638
                self.singleExpression(0)
                pass

            elif la_ == 3:
                localctx = js_grammarParser.FunctionPropertyContext(self, localctx)
                self.enterOuterAlt(localctx, 3)
                self.state = 641
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,66,self._ctx)
                if la_ == 1:
                    self.state = 640
                    self.match(js_grammarParser.Async)


                self.state = 644
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==js_grammarParser.Multiply:
                    self.state = 643
                    self.match(js_grammarParser.Multiply)


                self.state = 646
                self.propertyName()
                self.state = 647
                self.match(js_grammarParser.OpenParen)
                self.state = 649
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << js_grammarParser.OpenBracket) | (1 << js_grammarParser.OpenBrace) | (1 << js_grammarParser.Ellipsis))) != 0) or _la==js_grammarParser.Identifier:
                    self.state = 648
                    self.formalParameterList()


                self.state = 651
                self.match(js_grammarParser.CloseParen)
                self.state = 652
                self.match(js_grammarParser.OpenBrace)
                self.state = 653
                self.functionBody()
                self.state = 654
                self.match(js_grammarParser.CloseBrace)
                pass

            elif la_ == 4:
                localctx = js_grammarParser.PropertyGetterContext(self, localctx)
                self.enterOuterAlt(localctx, 4)
                self.state = 656
                self.match(js_grammarParser.Get)
                self.state = 657
                self.match(js_grammarParser.OpenParen)
                self.state = 658
                self.match(js_grammarParser.CloseParen)
                self.state = 659
                self.match(js_grammarParser.OpenBrace)
                self.state = 660
                self.functionBody()
                self.state = 661
                self.match(js_grammarParser.CloseBrace)
                pass

            elif la_ == 5:
                localctx = js_grammarParser.PropertySetterContext(self, localctx)
                self.enterOuterAlt(localctx, 5)
                self.state = 663
                self.match(js_grammarParser.Set)
                self.state = 664
                self.match(js_grammarParser.OpenParen)
                self.state = 665
                self.formalParameterArg()
                self.state = 666
                self.match(js_grammarParser.CloseParen)
                self.state = 667
                self.match(js_grammarParser.OpenBrace)
                self.state = 668
                self.functionBody()
                self.state = 669
                self.match(js_grammarParser.CloseBrace)
                pass

            elif la_ == 6:
                localctx = js_grammarParser.PropertyShorthandContext(self, localctx)
                self.enterOuterAlt(localctx, 6)
                self.state = 672
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==js_grammarParser.Ellipsis:
                    self.state = 671
                    self.match(js_grammarParser.Ellipsis)


                self.state = 674
                self.singleExpression(0)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PropertyNameContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifierName(self):
            return self.getTypedRuleContext(js_grammarParser.IdentifierNameContext,0)


        def StringLiteral(self):
            return self.getToken(js_grammarParser.StringLiteral, 0)

        def numericLiteral(self):
            return self.getTypedRuleContext(js_grammarParser.NumericLiteralContext,0)


        def OpenBracket(self):
            return self.getToken(js_grammarParser.OpenBracket, 0)

        def singleExpression(self):
            return self.getTypedRuleContext(js_grammarParser.SingleExpressionContext,0)


        def CloseBracket(self):
            return self.getToken(js_grammarParser.CloseBracket, 0)

        def getRuleIndex(self):
            return js_grammarParser.RULE_propertyName

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPropertyName" ):
                listener.enterPropertyName(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPropertyName" ):
                listener.exitPropertyName(self)




    def propertyName(self):

        localctx = js_grammarParser.PropertyNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 108, self.RULE_propertyName)
        try:
            self.state = 684
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [js_grammarParser.NullLiteral, js_grammarParser.BooleanLiteral, js_grammarParser.Break, js_grammarParser.Do, js_grammarParser.Instanceof, js_grammarParser.Typeof, js_grammarParser.Case, js_grammarParser.Else, js_grammarParser.New, js_grammarParser.Var, js_grammarParser.Let, js_grammarParser.Catch, js_grammarParser.Finally, js_grammarParser.Return, js_grammarParser.Void, js_grammarParser.Continue, js_grammarParser.For, js_grammarParser.Switch, js_grammarParser.While, js_grammarParser.Debugger, js_grammarParser.Function, js_grammarParser.This, js_grammarParser.With, js_grammarParser.Default, js_grammarParser.If, js_grammarParser.Throw, js_grammarParser.Delete, js_grammarParser.In, js_grammarParser.Try, js_grammarParser.Class, js_grammarParser.Extends, js_grammarParser.Super, js_grammarParser.Const, js_grammarParser.Static, js_grammarParser.Get, js_grammarParser.Set, js_grammarParser.Async, js_grammarParser.Await, js_grammarParser.As, js_grammarParser.From, js_grammarParser.Enum, js_grammarParser.Export, js_grammarParser.Import, js_grammarParser.Implements, js_grammarParser.Private, js_grammarParser.Public, js_grammarParser.Interface, js_grammarParser.Package, js_grammarParser.Protected, js_grammarParser.Yield, js_grammarParser.Identifier]:
                self.enterOuterAlt(localctx, 1)
                self.state = 677
                self.identifierName()
                pass
            elif token in [js_grammarParser.StringLiteral]:
                self.enterOuterAlt(localctx, 2)
                self.state = 678
                self.match(js_grammarParser.StringLiteral)
                pass
            elif token in [js_grammarParser.DecimalLiteral, js_grammarParser.HexIntegerLiteral, js_grammarParser.OctalIntegerLiteral2, js_grammarParser.BinaryIntegerLiteral]:
                self.enterOuterAlt(localctx, 3)
                self.state = 679
                self.numericLiteral()
                pass
            elif token in [js_grammarParser.OpenBracket]:
                self.enterOuterAlt(localctx, 4)
                self.state = 680
                self.match(js_grammarParser.OpenBracket)
                self.state = 681
                self.singleExpression(0)
                self.state = 682
                self.match(js_grammarParser.CloseBracket)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ArgumentsContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OpenParen(self):
            return self.getToken(js_grammarParser.OpenParen, 0)

        def CloseParen(self):
            return self.getToken(js_grammarParser.CloseParen, 0)

        def argument(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(js_grammarParser.ArgumentContext)
            else:
                return self.getTypedRuleContext(js_grammarParser.ArgumentContext,i)


        def Comma(self, i:int=None):
            if i is None:
                return self.getTokens(js_grammarParser.Comma)
            else:
                return self.getToken(js_grammarParser.Comma, i)

        def getRuleIndex(self):
            return js_grammarParser.RULE_arguments

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterArguments" ):
                listener.enterArguments(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitArguments" ):
                listener.exitArguments(self)




    def arguments(self):

        localctx = js_grammarParser.ArgumentsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 110, self.RULE_arguments)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 686
            self.match(js_grammarParser.OpenParen)
            self.state = 698
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << js_grammarParser.RegularExpressionLiteral) | (1 << js_grammarParser.OpenBracket) | (1 << js_grammarParser.OpenParen) | (1 << js_grammarParser.OpenBrace) | (1 << js_grammarParser.PlusPlus) | (1 << js_grammarParser.MinusMinus) | (1 << js_grammarParser.Plus) | (1 << js_grammarParser.Minus) | (1 << js_grammarParser.BitNot) | (1 << js_grammarParser.Not) | (1 << js_grammarParser.Ellipsis) | (1 << js_grammarParser.NullLiteral) | (1 << js_grammarParser.BooleanLiteral) | (1 << js_grammarParser.DecimalLiteral) | (1 << js_grammarParser.HexIntegerLiteral) | (1 << js_grammarParser.OctalIntegerLiteral2) | (1 << js_grammarParser.BinaryIntegerLiteral) | (1 << js_grammarParser.BigHexIntegerLiteral))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (js_grammarParser.BigOctalIntegerLiteral - 64)) | (1 << (js_grammarParser.BigBinaryIntegerLiteral - 64)) | (1 << (js_grammarParser.BigDecimalIntegerLiteral - 64)) | (1 << (js_grammarParser.Typeof - 64)) | (1 << (js_grammarParser.New - 64)) | (1 << (js_grammarParser.Void - 64)) | (1 << (js_grammarParser.Function - 64)) | (1 << (js_grammarParser.This - 64)) | (1 << (js_grammarParser.Delete - 64)) | (1 << (js_grammarParser.Class - 64)) | (1 << (js_grammarParser.Super - 64)) | (1 << (js_grammarParser.Async - 64)) | (1 << (js_grammarParser.Await - 64)) | (1 << (js_grammarParser.Import - 64)) | (1 << (js_grammarParser.Yield - 64)) | (1 << (js_grammarParser.Identifier - 64)) | (1 << (js_grammarParser.StringLiteral - 64)) | (1 << (js_grammarParser.TemplateStringLiteral - 64)))) != 0):
                self.state = 687
                self.argument()
                self.state = 692
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,72,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 688
                        self.match(js_grammarParser.Comma)
                        self.state = 689
                        self.argument() 
                    self.state = 694
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,72,self._ctx)

                self.state = 696
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==js_grammarParser.Comma:
                    self.state = 695
                    self.match(js_grammarParser.Comma)




            self.state = 700
            self.match(js_grammarParser.CloseParen)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ArgumentContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def singleExpression(self):
            return self.getTypedRuleContext(js_grammarParser.SingleExpressionContext,0)


        def Identifier(self):
            return self.getToken(js_grammarParser.Identifier, 0)

        def Ellipsis(self):
            return self.getToken(js_grammarParser.Ellipsis, 0)

        def getRuleIndex(self):
            return js_grammarParser.RULE_argument

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterArgument" ):
                listener.enterArgument(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitArgument" ):
                listener.exitArgument(self)




    def argument(self):

        localctx = js_grammarParser.ArgumentContext(self, self._ctx, self.state)
        self.enterRule(localctx, 112, self.RULE_argument)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 703
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==js_grammarParser.Ellipsis:
                self.state = 702
                self.match(js_grammarParser.Ellipsis)


            self.state = 707
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,76,self._ctx)
            if la_ == 1:
                self.state = 705
                self.singleExpression(0)
                pass

            elif la_ == 2:
                self.state = 706
                self.match(js_grammarParser.Identifier)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ExpressionSequenceContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def singleExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(js_grammarParser.SingleExpressionContext)
            else:
                return self.getTypedRuleContext(js_grammarParser.SingleExpressionContext,i)


        def Comma(self, i:int=None):
            if i is None:
                return self.getTokens(js_grammarParser.Comma)
            else:
                return self.getToken(js_grammarParser.Comma, i)

        def getRuleIndex(self):
            return js_grammarParser.RULE_expressionSequence

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExpressionSequence" ):
                listener.enterExpressionSequence(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExpressionSequence" ):
                listener.exitExpressionSequence(self)




    def expressionSequence(self):

        localctx = js_grammarParser.ExpressionSequenceContext(self, self._ctx, self.state)
        self.enterRule(localctx, 114, self.RULE_expressionSequence)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 709
            self.singleExpression(0)
            self.state = 714
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,77,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 710
                    self.match(js_grammarParser.Comma)
                    self.state = 711
                    self.singleExpression(0) 
                self.state = 716
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,77,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SingleExpressionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return js_grammarParser.RULE_singleExpression

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)


    class TemplateStringExpressionContext(SingleExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a js_grammarParser.SingleExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def singleExpression(self):
            return self.getTypedRuleContext(js_grammarParser.SingleExpressionContext,0)

        def TemplateStringLiteral(self):
            return self.getToken(js_grammarParser.TemplateStringLiteral, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTemplateStringExpression" ):
                listener.enterTemplateStringExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTemplateStringExpression" ):
                listener.exitTemplateStringExpression(self)


    class TernaryExpressionContext(SingleExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a js_grammarParser.SingleExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def singleExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(js_grammarParser.SingleExpressionContext)
            else:
                return self.getTypedRuleContext(js_grammarParser.SingleExpressionContext,i)

        def QuestionMark(self):
            return self.getToken(js_grammarParser.QuestionMark, 0)
        def Colon(self):
            return self.getToken(js_grammarParser.Colon, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTernaryExpression" ):
                listener.enterTernaryExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTernaryExpression" ):
                listener.exitTernaryExpression(self)


    class LogicalAndExpressionContext(SingleExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a js_grammarParser.SingleExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def singleExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(js_grammarParser.SingleExpressionContext)
            else:
                return self.getTypedRuleContext(js_grammarParser.SingleExpressionContext,i)

        def And(self):
            return self.getToken(js_grammarParser.And, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLogicalAndExpression" ):
                listener.enterLogicalAndExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLogicalAndExpression" ):
                listener.exitLogicalAndExpression(self)


    class PowerExpressionContext(SingleExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a js_grammarParser.SingleExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def singleExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(js_grammarParser.SingleExpressionContext)
            else:
                return self.getTypedRuleContext(js_grammarParser.SingleExpressionContext,i)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPowerExpression" ):
                listener.enterPowerExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPowerExpression" ):
                listener.exitPowerExpression(self)


    class PreIncrementExpressionContext(SingleExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a js_grammarParser.SingleExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def PlusPlus(self):
            return self.getToken(js_grammarParser.PlusPlus, 0)
        def singleExpression(self):
            return self.getTypedRuleContext(js_grammarParser.SingleExpressionContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPreIncrementExpression" ):
                listener.enterPreIncrementExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPreIncrementExpression" ):
                listener.exitPreIncrementExpression(self)


    class ObjectLiteralExpressionContext(SingleExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a js_grammarParser.SingleExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def objectLiteral(self):
            return self.getTypedRuleContext(js_grammarParser.ObjectLiteralContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterObjectLiteralExpression" ):
                listener.enterObjectLiteralExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitObjectLiteralExpression" ):
                listener.exitObjectLiteralExpression(self)


    class MetaExpressionContext(SingleExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a js_grammarParser.SingleExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def New(self):
            return self.getToken(js_grammarParser.New, 0)
        def Dot(self):
            return self.getToken(js_grammarParser.Dot, 0)
        def Identifier(self):
            return self.getToken(js_grammarParser.Identifier, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMetaExpression" ):
                listener.enterMetaExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMetaExpression" ):
                listener.exitMetaExpression(self)


    class InExpressionContext(SingleExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a js_grammarParser.SingleExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def singleExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(js_grammarParser.SingleExpressionContext)
            else:
                return self.getTypedRuleContext(js_grammarParser.SingleExpressionContext,i)

        def In(self):
            return self.getToken(js_grammarParser.In, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInExpression" ):
                listener.enterInExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInExpression" ):
                listener.exitInExpression(self)


    class LogicalOrExpressionContext(SingleExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a js_grammarParser.SingleExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def singleExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(js_grammarParser.SingleExpressionContext)
            else:
                return self.getTypedRuleContext(js_grammarParser.SingleExpressionContext,i)

        def Or(self):
            return self.getToken(js_grammarParser.Or, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLogicalOrExpression" ):
                listener.enterLogicalOrExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLogicalOrExpression" ):
                listener.exitLogicalOrExpression(self)


    class NotExpressionContext(SingleExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a js_grammarParser.SingleExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def Not(self):
            return self.getToken(js_grammarParser.Not, 0)
        def singleExpression(self):
            return self.getTypedRuleContext(js_grammarParser.SingleExpressionContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNotExpression" ):
                listener.enterNotExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNotExpression" ):
                listener.exitNotExpression(self)


    class PreDecreaseExpressionContext(SingleExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a js_grammarParser.SingleExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def MinusMinus(self):
            return self.getToken(js_grammarParser.MinusMinus, 0)
        def singleExpression(self):
            return self.getTypedRuleContext(js_grammarParser.SingleExpressionContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPreDecreaseExpression" ):
                listener.enterPreDecreaseExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPreDecreaseExpression" ):
                listener.exitPreDecreaseExpression(self)


    class ArgumentsExpressionContext(SingleExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a js_grammarParser.SingleExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def singleExpression(self):
            return self.getTypedRuleContext(js_grammarParser.SingleExpressionContext,0)

        def arguments(self):
            return self.getTypedRuleContext(js_grammarParser.ArgumentsContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterArgumentsExpression" ):
                listener.enterArgumentsExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitArgumentsExpression" ):
                listener.exitArgumentsExpression(self)


    class AwaitExpressionContext(SingleExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a js_grammarParser.SingleExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def Await(self):
            return self.getToken(js_grammarParser.Await, 0)
        def singleExpression(self):
            return self.getTypedRuleContext(js_grammarParser.SingleExpressionContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAwaitExpression" ):
                listener.enterAwaitExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAwaitExpression" ):
                listener.exitAwaitExpression(self)


    class ThisExpressionContext(SingleExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a js_grammarParser.SingleExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def This(self):
            return self.getToken(js_grammarParser.This, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterThisExpression" ):
                listener.enterThisExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitThisExpression" ):
                listener.exitThisExpression(self)


    class FunctionExpressionContext(SingleExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a js_grammarParser.SingleExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def anoymousFunction(self):
            return self.getTypedRuleContext(js_grammarParser.AnoymousFunctionContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFunctionExpression" ):
                listener.enterFunctionExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFunctionExpression" ):
                listener.exitFunctionExpression(self)


    class UnaryMinusExpressionContext(SingleExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a js_grammarParser.SingleExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def Minus(self):
            return self.getToken(js_grammarParser.Minus, 0)
        def singleExpression(self):
            return self.getTypedRuleContext(js_grammarParser.SingleExpressionContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUnaryMinusExpression" ):
                listener.enterUnaryMinusExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUnaryMinusExpression" ):
                listener.exitUnaryMinusExpression(self)


    class AssignmentExpressionContext(SingleExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a js_grammarParser.SingleExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def singleExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(js_grammarParser.SingleExpressionContext)
            else:
                return self.getTypedRuleContext(js_grammarParser.SingleExpressionContext,i)

        def Assign(self):
            return self.getToken(js_grammarParser.Assign, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAssignmentExpression" ):
                listener.enterAssignmentExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAssignmentExpression" ):
                listener.exitAssignmentExpression(self)


    class PostDecreaseExpressionContext(SingleExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a js_grammarParser.SingleExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def singleExpression(self):
            return self.getTypedRuleContext(js_grammarParser.SingleExpressionContext,0)

        def MinusMinus(self):
            return self.getToken(js_grammarParser.MinusMinus, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPostDecreaseExpression" ):
                listener.enterPostDecreaseExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPostDecreaseExpression" ):
                listener.exitPostDecreaseExpression(self)


    class TypeofExpressionContext(SingleExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a js_grammarParser.SingleExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def Typeof(self):
            return self.getToken(js_grammarParser.Typeof, 0)
        def singleExpression(self):
            return self.getTypedRuleContext(js_grammarParser.SingleExpressionContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTypeofExpression" ):
                listener.enterTypeofExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTypeofExpression" ):
                listener.exitTypeofExpression(self)


    class InstanceofExpressionContext(SingleExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a js_grammarParser.SingleExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def singleExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(js_grammarParser.SingleExpressionContext)
            else:
                return self.getTypedRuleContext(js_grammarParser.SingleExpressionContext,i)

        def Instanceof(self):
            return self.getToken(js_grammarParser.Instanceof, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInstanceofExpression" ):
                listener.enterInstanceofExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInstanceofExpression" ):
                listener.exitInstanceofExpression(self)


    class UnaryPlusExpressionContext(SingleExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a js_grammarParser.SingleExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def Plus(self):
            return self.getToken(js_grammarParser.Plus, 0)
        def singleExpression(self):
            return self.getTypedRuleContext(js_grammarParser.SingleExpressionContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUnaryPlusExpression" ):
                listener.enterUnaryPlusExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUnaryPlusExpression" ):
                listener.exitUnaryPlusExpression(self)


    class DeleteExpressionContext(SingleExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a js_grammarParser.SingleExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def Delete(self):
            return self.getToken(js_grammarParser.Delete, 0)
        def singleExpression(self):
            return self.getTypedRuleContext(js_grammarParser.SingleExpressionContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDeleteExpression" ):
                listener.enterDeleteExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDeleteExpression" ):
                listener.exitDeleteExpression(self)


    class ImportExpressionContext(SingleExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a js_grammarParser.SingleExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def Import(self):
            return self.getToken(js_grammarParser.Import, 0)
        def OpenParen(self):
            return self.getToken(js_grammarParser.OpenParen, 0)
        def singleExpression(self):
            return self.getTypedRuleContext(js_grammarParser.SingleExpressionContext,0)

        def CloseParen(self):
            return self.getToken(js_grammarParser.CloseParen, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterImportExpression" ):
                listener.enterImportExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitImportExpression" ):
                listener.exitImportExpression(self)


    class EqualityExpressionContext(SingleExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a js_grammarParser.SingleExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def singleExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(js_grammarParser.SingleExpressionContext)
            else:
                return self.getTypedRuleContext(js_grammarParser.SingleExpressionContext,i)

        def Equals(self):
            return self.getToken(js_grammarParser.Equals, 0)
        def NotEquals(self):
            return self.getToken(js_grammarParser.NotEquals, 0)
        def IdentityEquals(self):
            return self.getToken(js_grammarParser.IdentityEquals, 0)
        def IdentityNotEquals(self):
            return self.getToken(js_grammarParser.IdentityNotEquals, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEqualityExpression" ):
                listener.enterEqualityExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEqualityExpression" ):
                listener.exitEqualityExpression(self)


    class BitXOrExpressionContext(SingleExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a js_grammarParser.SingleExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def singleExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(js_grammarParser.SingleExpressionContext)
            else:
                return self.getTypedRuleContext(js_grammarParser.SingleExpressionContext,i)

        def BitXOr(self):
            return self.getToken(js_grammarParser.BitXOr, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBitXOrExpression" ):
                listener.enterBitXOrExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBitXOrExpression" ):
                listener.exitBitXOrExpression(self)


    class SuperExpressionContext(SingleExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a js_grammarParser.SingleExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def Super(self):
            return self.getToken(js_grammarParser.Super, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSuperExpression" ):
                listener.enterSuperExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSuperExpression" ):
                listener.exitSuperExpression(self)


    class MultiplicativeExpressionContext(SingleExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a js_grammarParser.SingleExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def singleExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(js_grammarParser.SingleExpressionContext)
            else:
                return self.getTypedRuleContext(js_grammarParser.SingleExpressionContext,i)

        def Multiply(self):
            return self.getToken(js_grammarParser.Multiply, 0)
        def Divide(self):
            return self.getToken(js_grammarParser.Divide, 0)
        def Modulus(self):
            return self.getToken(js_grammarParser.Modulus, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMultiplicativeExpression" ):
                listener.enterMultiplicativeExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMultiplicativeExpression" ):
                listener.exitMultiplicativeExpression(self)


    class BitShiftExpressionContext(SingleExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a js_grammarParser.SingleExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def singleExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(js_grammarParser.SingleExpressionContext)
            else:
                return self.getTypedRuleContext(js_grammarParser.SingleExpressionContext,i)

        def LeftShiftArithmetic(self):
            return self.getToken(js_grammarParser.LeftShiftArithmetic, 0)
        def RightShiftArithmetic(self):
            return self.getToken(js_grammarParser.RightShiftArithmetic, 0)
        def RightShiftLogical(self):
            return self.getToken(js_grammarParser.RightShiftLogical, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBitShiftExpression" ):
                listener.enterBitShiftExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBitShiftExpression" ):
                listener.exitBitShiftExpression(self)


    class ParenthesizedExpressionContext(SingleExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a js_grammarParser.SingleExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def OpenParen(self):
            return self.getToken(js_grammarParser.OpenParen, 0)
        def expressionSequence(self):
            return self.getTypedRuleContext(js_grammarParser.ExpressionSequenceContext,0)

        def CloseParen(self):
            return self.getToken(js_grammarParser.CloseParen, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterParenthesizedExpression" ):
                listener.enterParenthesizedExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitParenthesizedExpression" ):
                listener.exitParenthesizedExpression(self)


    class AdditiveExpressionContext(SingleExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a js_grammarParser.SingleExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def singleExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(js_grammarParser.SingleExpressionContext)
            else:
                return self.getTypedRuleContext(js_grammarParser.SingleExpressionContext,i)

        def Plus(self):
            return self.getToken(js_grammarParser.Plus, 0)
        def Minus(self):
            return self.getToken(js_grammarParser.Minus, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAdditiveExpression" ):
                listener.enterAdditiveExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAdditiveExpression" ):
                listener.exitAdditiveExpression(self)


    class RelationalExpressionContext(SingleExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a js_grammarParser.SingleExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def singleExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(js_grammarParser.SingleExpressionContext)
            else:
                return self.getTypedRuleContext(js_grammarParser.SingleExpressionContext,i)

        def LessThan(self):
            return self.getToken(js_grammarParser.LessThan, 0)
        def MoreThan(self):
            return self.getToken(js_grammarParser.MoreThan, 0)
        def LessThanEquals(self):
            return self.getToken(js_grammarParser.LessThanEquals, 0)
        def GreaterThanEquals(self):
            return self.getToken(js_grammarParser.GreaterThanEquals, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRelationalExpression" ):
                listener.enterRelationalExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRelationalExpression" ):
                listener.exitRelationalExpression(self)


    class PostIncrementExpressionContext(SingleExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a js_grammarParser.SingleExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def singleExpression(self):
            return self.getTypedRuleContext(js_grammarParser.SingleExpressionContext,0)

        def PlusPlus(self):
            return self.getToken(js_grammarParser.PlusPlus, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPostIncrementExpression" ):
                listener.enterPostIncrementExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPostIncrementExpression" ):
                listener.exitPostIncrementExpression(self)


    class YieldExpressionContext(SingleExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a js_grammarParser.SingleExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def yieldStatement(self):
            return self.getTypedRuleContext(js_grammarParser.YieldStatementContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterYieldExpression" ):
                listener.enterYieldExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitYieldExpression" ):
                listener.exitYieldExpression(self)


    class BitNotExpressionContext(SingleExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a js_grammarParser.SingleExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def BitNot(self):
            return self.getToken(js_grammarParser.BitNot, 0)
        def singleExpression(self):
            return self.getTypedRuleContext(js_grammarParser.SingleExpressionContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBitNotExpression" ):
                listener.enterBitNotExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBitNotExpression" ):
                listener.exitBitNotExpression(self)


    class NewExpressionContext(SingleExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a js_grammarParser.SingleExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def New(self):
            return self.getToken(js_grammarParser.New, 0)
        def singleExpression(self):
            return self.getTypedRuleContext(js_grammarParser.SingleExpressionContext,0)

        def arguments(self):
            return self.getTypedRuleContext(js_grammarParser.ArgumentsContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNewExpression" ):
                listener.enterNewExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNewExpression" ):
                listener.exitNewExpression(self)


    class LiteralExpressionContext(SingleExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a js_grammarParser.SingleExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def literal(self):
            return self.getTypedRuleContext(js_grammarParser.LiteralContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLiteralExpression" ):
                listener.enterLiteralExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLiteralExpression" ):
                listener.exitLiteralExpression(self)


    class ArrayLiteralExpressionContext(SingleExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a js_grammarParser.SingleExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def arrayLiteral(self):
            return self.getTypedRuleContext(js_grammarParser.ArrayLiteralContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterArrayLiteralExpression" ):
                listener.enterArrayLiteralExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitArrayLiteralExpression" ):
                listener.exitArrayLiteralExpression(self)


    class MemberDotExpressionContext(SingleExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a js_grammarParser.SingleExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def singleExpression(self):
            return self.getTypedRuleContext(js_grammarParser.SingleExpressionContext,0)

        def Dot(self):
            return self.getToken(js_grammarParser.Dot, 0)
        def identifierName(self):
            return self.getTypedRuleContext(js_grammarParser.IdentifierNameContext,0)

        def QuestionMark(self):
            return self.getToken(js_grammarParser.QuestionMark, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMemberDotExpression" ):
                listener.enterMemberDotExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMemberDotExpression" ):
                listener.exitMemberDotExpression(self)


    class ClassExpressionContext(SingleExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a js_grammarParser.SingleExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def Class(self):
            return self.getToken(js_grammarParser.Class, 0)
        def classTail(self):
            return self.getTypedRuleContext(js_grammarParser.ClassTailContext,0)

        def Identifier(self):
            return self.getToken(js_grammarParser.Identifier, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterClassExpression" ):
                listener.enterClassExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitClassExpression" ):
                listener.exitClassExpression(self)


    class MemberIndexExpressionContext(SingleExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a js_grammarParser.SingleExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def singleExpression(self):
            return self.getTypedRuleContext(js_grammarParser.SingleExpressionContext,0)

        def OpenBracket(self):
            return self.getToken(js_grammarParser.OpenBracket, 0)
        def expressionSequence(self):
            return self.getTypedRuleContext(js_grammarParser.ExpressionSequenceContext,0)

        def CloseBracket(self):
            return self.getToken(js_grammarParser.CloseBracket, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMemberIndexExpression" ):
                listener.enterMemberIndexExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMemberIndexExpression" ):
                listener.exitMemberIndexExpression(self)


    class IdentifierExpressionContext(SingleExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a js_grammarParser.SingleExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def Identifier(self):
            return self.getToken(js_grammarParser.Identifier, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIdentifierExpression" ):
                listener.enterIdentifierExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIdentifierExpression" ):
                listener.exitIdentifierExpression(self)


    class BitAndExpressionContext(SingleExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a js_grammarParser.SingleExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def singleExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(js_grammarParser.SingleExpressionContext)
            else:
                return self.getTypedRuleContext(js_grammarParser.SingleExpressionContext,i)

        def BitAnd(self):
            return self.getToken(js_grammarParser.BitAnd, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBitAndExpression" ):
                listener.enterBitAndExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBitAndExpression" ):
                listener.exitBitAndExpression(self)


    class BitOrExpressionContext(SingleExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a js_grammarParser.SingleExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def singleExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(js_grammarParser.SingleExpressionContext)
            else:
                return self.getTypedRuleContext(js_grammarParser.SingleExpressionContext,i)

        def BitOr(self):
            return self.getToken(js_grammarParser.BitOr, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBitOrExpression" ):
                listener.enterBitOrExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBitOrExpression" ):
                listener.exitBitOrExpression(self)


    class AssignmentOperatorExpressionContext(SingleExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a js_grammarParser.SingleExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def singleExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(js_grammarParser.SingleExpressionContext)
            else:
                return self.getTypedRuleContext(js_grammarParser.SingleExpressionContext,i)

        def assignmentOperator(self):
            return self.getTypedRuleContext(js_grammarParser.AssignmentOperatorContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAssignmentOperatorExpression" ):
                listener.enterAssignmentOperatorExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAssignmentOperatorExpression" ):
                listener.exitAssignmentOperatorExpression(self)


    class VoidExpressionContext(SingleExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a js_grammarParser.SingleExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def Void(self):
            return self.getToken(js_grammarParser.Void, 0)
        def singleExpression(self):
            return self.getTypedRuleContext(js_grammarParser.SingleExpressionContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVoidExpression" ):
                listener.enterVoidExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVoidExpression" ):
                listener.exitVoidExpression(self)


    class CoalesceExpressionContext(SingleExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a js_grammarParser.SingleExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def singleExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(js_grammarParser.SingleExpressionContext)
            else:
                return self.getTypedRuleContext(js_grammarParser.SingleExpressionContext,i)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCoalesceExpression" ):
                listener.enterCoalesceExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCoalesceExpression" ):
                listener.exitCoalesceExpression(self)



    def singleExpression(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = js_grammarParser.SingleExpressionContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 116
        self.enterRecursionRule(localctx, 116, self.RULE_singleExpression, _p)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 772
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,80,self._ctx)
            if la_ == 1:
                localctx = js_grammarParser.FunctionExpressionContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx

                self.state = 718
                self.anoymousFunction()
                pass

            elif la_ == 2:
                localctx = js_grammarParser.ClassExpressionContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 719
                self.match(js_grammarParser.Class)
                self.state = 721
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==js_grammarParser.Identifier:
                    self.state = 720
                    self.match(js_grammarParser.Identifier)


                self.state = 723
                self.classTail()
                pass

            elif la_ == 3:
                localctx = js_grammarParser.NewExpressionContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 724
                self.match(js_grammarParser.New)
                self.state = 725
                self.singleExpression(0)
                self.state = 727
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,79,self._ctx)
                if la_ == 1:
                    self.state = 726
                    self.arguments()


                pass

            elif la_ == 4:
                localctx = js_grammarParser.MetaExpressionContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 729
                self.match(js_grammarParser.New)
                self.state = 730
                self.match(js_grammarParser.Dot)
                self.state = 731
                self.match(js_grammarParser.Identifier)
                pass

            elif la_ == 5:
                localctx = js_grammarParser.DeleteExpressionContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 732
                self.match(js_grammarParser.Delete)
                self.state = 733
                self.singleExpression(37)
                pass

            elif la_ == 6:
                localctx = js_grammarParser.VoidExpressionContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 734
                self.match(js_grammarParser.Void)
                self.state = 735
                self.singleExpression(36)
                pass

            elif la_ == 7:
                localctx = js_grammarParser.TypeofExpressionContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 736
                self.match(js_grammarParser.Typeof)
                self.state = 737
                self.singleExpression(35)
                pass

            elif la_ == 8:
                localctx = js_grammarParser.PreIncrementExpressionContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 738
                self.match(js_grammarParser.PlusPlus)
                self.state = 739
                self.singleExpression(34)
                pass

            elif la_ == 9:
                localctx = js_grammarParser.PreDecreaseExpressionContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 740
                self.match(js_grammarParser.MinusMinus)
                self.state = 741
                self.singleExpression(33)
                pass

            elif la_ == 10:
                localctx = js_grammarParser.UnaryPlusExpressionContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 742
                self.match(js_grammarParser.Plus)
                self.state = 743
                self.singleExpression(32)
                pass

            elif la_ == 11:
                localctx = js_grammarParser.UnaryMinusExpressionContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 744
                self.match(js_grammarParser.Minus)
                self.state = 745
                self.singleExpression(31)
                pass

            elif la_ == 12:
                localctx = js_grammarParser.BitNotExpressionContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 746
                self.match(js_grammarParser.BitNot)
                self.state = 747
                self.singleExpression(30)
                pass

            elif la_ == 13:
                localctx = js_grammarParser.NotExpressionContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 748
                self.match(js_grammarParser.Not)
                self.state = 749
                self.singleExpression(29)
                pass

            elif la_ == 14:
                localctx = js_grammarParser.AwaitExpressionContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 750
                self.match(js_grammarParser.Await)
                self.state = 751
                self.singleExpression(28)
                notImplemented();
                pass

            elif la_ == 15:
                localctx = js_grammarParser.ImportExpressionContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 754
                self.match(js_grammarParser.Import)
                self.state = 755
                self.match(js_grammarParser.OpenParen)
                self.state = 756
                self.singleExpression(0)
                self.state = 757
                self.match(js_grammarParser.CloseParen)
                pass

            elif la_ == 16:
                localctx = js_grammarParser.YieldExpressionContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 759
                self.yieldStatement()
                notImplemented();
                pass

            elif la_ == 17:
                localctx = js_grammarParser.ThisExpressionContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 762
                self.match(js_grammarParser.This)
                pass

            elif la_ == 18:
                localctx = js_grammarParser.IdentifierExpressionContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 763
                self.match(js_grammarParser.Identifier)
                pass

            elif la_ == 19:
                localctx = js_grammarParser.SuperExpressionContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 764
                self.match(js_grammarParser.Super)
                pass

            elif la_ == 20:
                localctx = js_grammarParser.LiteralExpressionContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 765
                self.literal()
                pass

            elif la_ == 21:
                localctx = js_grammarParser.ArrayLiteralExpressionContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 766
                self.arrayLiteral()
                pass

            elif la_ == 22:
                localctx = js_grammarParser.ObjectLiteralExpressionContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 767
                self.objectLiteral()
                pass

            elif la_ == 23:
                localctx = js_grammarParser.ParenthesizedExpressionContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 768
                self.match(js_grammarParser.OpenParen)
                self.state = 769
                self.expressionSequence()
                self.state = 770
                self.match(js_grammarParser.CloseParen)
                pass


            self._ctx.stop = self._input.LT(-1)
            self.state = 855
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,84,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    self.state = 853
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,83,self._ctx)
                    if la_ == 1:
                        localctx = js_grammarParser.PowerExpressionContext(self, js_grammarParser.SingleExpressionContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_singleExpression)
                        self.state = 774
                        if not self.precpred(self._ctx, 27):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 27)")
                        self.state = 775
                        self.match(js_grammarParser.T__1)
                        self.state = 776
                        self.singleExpression(27)
                        pass

                    elif la_ == 2:
                        localctx = js_grammarParser.MultiplicativeExpressionContext(self, js_grammarParser.SingleExpressionContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_singleExpression)
                        self.state = 777
                        if not self.precpred(self._ctx, 26):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 26)")
                        self.state = 778
                        _la = self._input.LA(1)
                        if not((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << js_grammarParser.Multiply) | (1 << js_grammarParser.Divide) | (1 << js_grammarParser.Modulus))) != 0)):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 779
                        self.singleExpression(27)
                        pass

                    elif la_ == 3:
                        localctx = js_grammarParser.AdditiveExpressionContext(self, js_grammarParser.SingleExpressionContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_singleExpression)
                        self.state = 780
                        if not self.precpred(self._ctx, 25):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 25)")
                        self.state = 781
                        _la = self._input.LA(1)
                        if not(_la==js_grammarParser.Plus or _la==js_grammarParser.Minus):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 782
                        self.singleExpression(26)
                        pass

                    elif la_ == 4:
                        localctx = js_grammarParser.CoalesceExpressionContext(self, js_grammarParser.SingleExpressionContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_singleExpression)
                        self.state = 783
                        if not self.precpred(self._ctx, 24):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 24)")
                        self.state = 784
                        self.match(js_grammarParser.T__2)
                        self.state = 785
                        self.singleExpression(25)
                        pass

                    elif la_ == 5:
                        localctx = js_grammarParser.BitShiftExpressionContext(self, js_grammarParser.SingleExpressionContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_singleExpression)
                        self.state = 786
                        if not self.precpred(self._ctx, 23):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 23)")
                        self.state = 787
                        _la = self._input.LA(1)
                        if not((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << js_grammarParser.RightShiftArithmetic) | (1 << js_grammarParser.LeftShiftArithmetic) | (1 << js_grammarParser.RightShiftLogical))) != 0)):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 788
                        self.singleExpression(24)
                        pass

                    elif la_ == 6:
                        localctx = js_grammarParser.RelationalExpressionContext(self, js_grammarParser.SingleExpressionContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_singleExpression)
                        self.state = 789
                        if not self.precpred(self._ctx, 22):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 22)")
                        self.state = 790
                        _la = self._input.LA(1)
                        if not((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << js_grammarParser.LessThan) | (1 << js_grammarParser.MoreThan) | (1 << js_grammarParser.LessThanEquals) | (1 << js_grammarParser.GreaterThanEquals))) != 0)):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 791
                        self.singleExpression(23)
                        pass

                    elif la_ == 7:
                        localctx = js_grammarParser.InstanceofExpressionContext(self, js_grammarParser.SingleExpressionContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_singleExpression)
                        self.state = 792
                        if not self.precpred(self._ctx, 21):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 21)")
                        self.state = 793
                        self.match(js_grammarParser.Instanceof)
                        self.state = 794
                        self.singleExpression(22)
                        pass

                    elif la_ == 8:
                        localctx = js_grammarParser.InExpressionContext(self, js_grammarParser.SingleExpressionContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_singleExpression)
                        self.state = 795
                        if not self.precpred(self._ctx, 20):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 20)")
                        self.state = 796
                        self.match(js_grammarParser.In)
                        self.state = 797
                        self.singleExpression(21)
                        pass

                    elif la_ == 9:
                        localctx = js_grammarParser.EqualityExpressionContext(self, js_grammarParser.SingleExpressionContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_singleExpression)
                        self.state = 798
                        if not self.precpred(self._ctx, 19):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 19)")
                        self.state = 799
                        _la = self._input.LA(1)
                        if not((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << js_grammarParser.Equals) | (1 << js_grammarParser.NotEquals) | (1 << js_grammarParser.IdentityEquals) | (1 << js_grammarParser.IdentityNotEquals))) != 0)):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 800
                        self.singleExpression(20)
                        pass

                    elif la_ == 10:
                        localctx = js_grammarParser.BitAndExpressionContext(self, js_grammarParser.SingleExpressionContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_singleExpression)
                        self.state = 801
                        if not self.precpred(self._ctx, 18):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 18)")
                        self.state = 802
                        self.match(js_grammarParser.BitAnd)
                        self.state = 803
                        self.singleExpression(19)
                        pass

                    elif la_ == 11:
                        localctx = js_grammarParser.BitXOrExpressionContext(self, js_grammarParser.SingleExpressionContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_singleExpression)
                        self.state = 804
                        if not self.precpred(self._ctx, 17):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 17)")
                        self.state = 805
                        self.match(js_grammarParser.BitXOr)
                        self.state = 806
                        self.singleExpression(18)
                        pass

                    elif la_ == 12:
                        localctx = js_grammarParser.BitOrExpressionContext(self, js_grammarParser.SingleExpressionContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_singleExpression)
                        self.state = 807
                        if not self.precpred(self._ctx, 16):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 16)")
                        self.state = 808
                        self.match(js_grammarParser.BitOr)
                        self.state = 809
                        self.singleExpression(17)
                        pass

                    elif la_ == 13:
                        localctx = js_grammarParser.LogicalAndExpressionContext(self, js_grammarParser.SingleExpressionContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_singleExpression)
                        self.state = 810
                        if not self.precpred(self._ctx, 15):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 15)")
                        self.state = 811
                        self.match(js_grammarParser.And)
                        self.state = 812
                        self.singleExpression(16)
                        pass

                    elif la_ == 14:
                        localctx = js_grammarParser.LogicalOrExpressionContext(self, js_grammarParser.SingleExpressionContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_singleExpression)
                        self.state = 813
                        if not self.precpred(self._ctx, 14):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 14)")
                        self.state = 814
                        self.match(js_grammarParser.Or)
                        self.state = 815
                        self.singleExpression(15)
                        pass

                    elif la_ == 15:
                        localctx = js_grammarParser.TernaryExpressionContext(self, js_grammarParser.SingleExpressionContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_singleExpression)
                        self.state = 816
                        if not self.precpred(self._ctx, 13):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 13)")
                        self.state = 817
                        self.match(js_grammarParser.QuestionMark)
                        self.state = 818
                        self.singleExpression(0)
                        self.state = 819
                        self.match(js_grammarParser.Colon)
                        self.state = 820
                        self.singleExpression(14)
                        pass

                    elif la_ == 16:
                        localctx = js_grammarParser.AssignmentExpressionContext(self, js_grammarParser.SingleExpressionContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_singleExpression)
                        self.state = 822
                        if not self.precpred(self._ctx, 12):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 12)")
                        self.state = 823
                        self.match(js_grammarParser.Assign)
                        self.state = 824
                        self.singleExpression(12)
                        pass

                    elif la_ == 17:
                        localctx = js_grammarParser.AssignmentOperatorExpressionContext(self, js_grammarParser.SingleExpressionContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_singleExpression)
                        self.state = 825
                        if not self.precpred(self._ctx, 11):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 11)")
                        self.state = 826
                        self.assignmentOperator()
                        self.state = 827
                        self.singleExpression(11)
                        pass

                    elif la_ == 18:
                        localctx = js_grammarParser.MemberIndexExpressionContext(self, js_grammarParser.SingleExpressionContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_singleExpression)
                        self.state = 829
                        if not self.precpred(self._ctx, 44):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 44)")
                        self.state = 830
                        self.match(js_grammarParser.OpenBracket)
                        self.state = 831
                        self.expressionSequence()
                        self.state = 832
                        self.match(js_grammarParser.CloseBracket)
                        pass

                    elif la_ == 19:
                        localctx = js_grammarParser.MemberDotExpressionContext(self, js_grammarParser.SingleExpressionContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_singleExpression)
                        self.state = 834
                        if not self.precpred(self._ctx, 43):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 43)")
                        self.state = 836
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==js_grammarParser.QuestionMark:
                            self.state = 835
                            self.match(js_grammarParser.QuestionMark)


                        self.state = 838
                        self.match(js_grammarParser.Dot)
                        self.state = 840
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==js_grammarParser.T__0:
                            self.state = 839
                            self.match(js_grammarParser.T__0)


                        self.state = 842
                        self.identifierName()
                        pass

                    elif la_ == 20:
                        localctx = js_grammarParser.ArgumentsExpressionContext(self, js_grammarParser.SingleExpressionContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_singleExpression)
                        self.state = 843
                        if not self.precpred(self._ctx, 42):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 42)")
                        self.state = 844
                        self.arguments()
                        pass

                    elif la_ == 21:
                        localctx = js_grammarParser.PostIncrementExpressionContext(self, js_grammarParser.SingleExpressionContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_singleExpression)
                        self.state = 845
                        if not self.precpred(self._ctx, 39):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 39)")
                        self.state = 846
                        if not !here(LineTerminator):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "!here(LineTerminator)")
                        self.state = 847
                        self.match(js_grammarParser.PlusPlus)
                        pass

                    elif la_ == 22:
                        localctx = js_grammarParser.PostDecreaseExpressionContext(self, js_grammarParser.SingleExpressionContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_singleExpression)
                        self.state = 848
                        if not self.precpred(self._ctx, 38):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 38)")
                        self.state = 849
                        if not !here(LineTerminator):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "!here(LineTerminator)")
                        self.state = 850
                        self.match(js_grammarParser.MinusMinus)
                        pass

                    elif la_ == 23:
                        localctx = js_grammarParser.TemplateStringExpressionContext(self, js_grammarParser.SingleExpressionContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_singleExpression)
                        self.state = 851
                        if not self.precpred(self._ctx, 9):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 9)")
                        self.state = 852
                        self.match(js_grammarParser.TemplateStringLiteral)
                        pass

             
                self.state = 857
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,84,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class AssignableContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Identifier(self):
            return self.getToken(js_grammarParser.Identifier, 0)

        def arrayLiteral(self):
            return self.getTypedRuleContext(js_grammarParser.ArrayLiteralContext,0)


        def objectLiteral(self):
            return self.getTypedRuleContext(js_grammarParser.ObjectLiteralContext,0)


        def getRuleIndex(self):
            return js_grammarParser.RULE_assignable

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAssignable" ):
                listener.enterAssignable(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAssignable" ):
                listener.exitAssignable(self)




    def assignable(self):

        localctx = js_grammarParser.AssignableContext(self, self._ctx, self.state)
        self.enterRule(localctx, 118, self.RULE_assignable)
        try:
            self.state = 861
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [js_grammarParser.Identifier]:
                self.enterOuterAlt(localctx, 1)
                self.state = 858
                self.match(js_grammarParser.Identifier)
                pass
            elif token in [js_grammarParser.OpenBracket]:
                self.enterOuterAlt(localctx, 2)
                self.state = 859
                self.arrayLiteral()
                pass
            elif token in [js_grammarParser.OpenBrace]:
                self.enterOuterAlt(localctx, 3)
                self.state = 860
                self.objectLiteral()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AnoymousFunctionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return js_grammarParser.RULE_anoymousFunction

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class AnoymousFunctionDeclContext(AnoymousFunctionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a js_grammarParser.AnoymousFunctionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def Function(self):
            return self.getToken(js_grammarParser.Function, 0)
        def OpenParen(self):
            return self.getToken(js_grammarParser.OpenParen, 0)
        def CloseParen(self):
            return self.getToken(js_grammarParser.CloseParen, 0)
        def OpenBrace(self):
            return self.getToken(js_grammarParser.OpenBrace, 0)
        def functionBody(self):
            return self.getTypedRuleContext(js_grammarParser.FunctionBodyContext,0)

        def CloseBrace(self):
            return self.getToken(js_grammarParser.CloseBrace, 0)
        def Async(self):
            return self.getToken(js_grammarParser.Async, 0)
        def Multiply(self):
            return self.getToken(js_grammarParser.Multiply, 0)
        def formalParameterList(self):
            return self.getTypedRuleContext(js_grammarParser.FormalParameterListContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAnoymousFunctionDecl" ):
                listener.enterAnoymousFunctionDecl(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAnoymousFunctionDecl" ):
                listener.exitAnoymousFunctionDecl(self)


    class ArrowFunctionContext(AnoymousFunctionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a js_grammarParser.AnoymousFunctionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def arrowFunctionParameters(self):
            return self.getTypedRuleContext(js_grammarParser.ArrowFunctionParametersContext,0)

        def arrowFunctionBody(self):
            return self.getTypedRuleContext(js_grammarParser.ArrowFunctionBodyContext,0)

        def Async(self):
            return self.getToken(js_grammarParser.Async, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterArrowFunction" ):
                listener.enterArrowFunction(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitArrowFunction" ):
                listener.exitArrowFunction(self)


    class FunctionDeclContext(AnoymousFunctionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a js_grammarParser.AnoymousFunctionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def functionDeclaration(self):
            return self.getTypedRuleContext(js_grammarParser.FunctionDeclarationContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFunctionDecl" ):
                listener.enterFunctionDecl(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFunctionDecl" ):
                listener.exitFunctionDecl(self)



    def anoymousFunction(self):

        localctx = js_grammarParser.AnoymousFunctionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 120, self.RULE_anoymousFunction)
        self._la = 0 # Token type
        try:
            self.state = 887
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,90,self._ctx)
            if la_ == 1:
                localctx = js_grammarParser.FunctionDeclContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 863
                self.functionDeclaration()
                pass

            elif la_ == 2:
                localctx = js_grammarParser.AnoymousFunctionDeclContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 865
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==js_grammarParser.Async:
                    self.state = 864
                    self.match(js_grammarParser.Async)


                self.state = 867
                self.match(js_grammarParser.Function)
                self.state = 869
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==js_grammarParser.Multiply:
                    self.state = 868
                    self.match(js_grammarParser.Multiply)


                self.state = 871
                self.match(js_grammarParser.OpenParen)
                self.state = 873
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << js_grammarParser.OpenBracket) | (1 << js_grammarParser.OpenBrace) | (1 << js_grammarParser.Ellipsis))) != 0) or _la==js_grammarParser.Identifier:
                    self.state = 872
                    self.formalParameterList()


                self.state = 875
                self.match(js_grammarParser.CloseParen)
                self.state = 876
                self.match(js_grammarParser.OpenBrace)
                self.state = 877
                self.functionBody()
                self.state = 878
                self.match(js_grammarParser.CloseBrace)
                pass

            elif la_ == 3:
                localctx = js_grammarParser.ArrowFunctionContext(self, localctx)
                self.enterOuterAlt(localctx, 3)
                self.state = 881
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==js_grammarParser.Async:
                    self.state = 880
                    self.match(js_grammarParser.Async)


                self.state = 883
                self.arrowFunctionParameters()
                self.state = 884
                self.match(js_grammarParser.T__3)
                self.state = 885
                self.arrowFunctionBody()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ArrowFunctionParametersContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Identifier(self):
            return self.getToken(js_grammarParser.Identifier, 0)

        def OpenParen(self):
            return self.getToken(js_grammarParser.OpenParen, 0)

        def CloseParen(self):
            return self.getToken(js_grammarParser.CloseParen, 0)

        def formalParameterList(self):
            return self.getTypedRuleContext(js_grammarParser.FormalParameterListContext,0)


        def getRuleIndex(self):
            return js_grammarParser.RULE_arrowFunctionParameters

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterArrowFunctionParameters" ):
                listener.enterArrowFunctionParameters(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitArrowFunctionParameters" ):
                listener.exitArrowFunctionParameters(self)




    def arrowFunctionParameters(self):

        localctx = js_grammarParser.ArrowFunctionParametersContext(self, self._ctx, self.state)
        self.enterRule(localctx, 122, self.RULE_arrowFunctionParameters)
        self._la = 0 # Token type
        try:
            self.state = 895
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [js_grammarParser.Identifier]:
                self.enterOuterAlt(localctx, 1)
                self.state = 889
                self.match(js_grammarParser.Identifier)
                pass
            elif token in [js_grammarParser.OpenParen]:
                self.enterOuterAlt(localctx, 2)
                self.state = 890
                self.match(js_grammarParser.OpenParen)
                self.state = 892
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << js_grammarParser.OpenBracket) | (1 << js_grammarParser.OpenBrace) | (1 << js_grammarParser.Ellipsis))) != 0) or _la==js_grammarParser.Identifier:
                    self.state = 891
                    self.formalParameterList()


                self.state = 894
                self.match(js_grammarParser.CloseParen)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ArrowFunctionBodyContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def singleExpression(self):
            return self.getTypedRuleContext(js_grammarParser.SingleExpressionContext,0)


        def OpenBrace(self):
            return self.getToken(js_grammarParser.OpenBrace, 0)

        def functionBody(self):
            return self.getTypedRuleContext(js_grammarParser.FunctionBodyContext,0)


        def CloseBrace(self):
            return self.getToken(js_grammarParser.CloseBrace, 0)

        def getRuleIndex(self):
            return js_grammarParser.RULE_arrowFunctionBody

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterArrowFunctionBody" ):
                listener.enterArrowFunctionBody(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitArrowFunctionBody" ):
                listener.exitArrowFunctionBody(self)




    def arrowFunctionBody(self):

        localctx = js_grammarParser.ArrowFunctionBodyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 124, self.RULE_arrowFunctionBody)
        try:
            self.state = 902
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,93,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 897
                self.singleExpression(0)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 898
                self.match(js_grammarParser.OpenBrace)
                self.state = 899
                self.functionBody()
                self.state = 900
                self.match(js_grammarParser.CloseBrace)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AssignmentOperatorContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def MultiplyAssign(self):
            return self.getToken(js_grammarParser.MultiplyAssign, 0)

        def DivideAssign(self):
            return self.getToken(js_grammarParser.DivideAssign, 0)

        def ModulusAssign(self):
            return self.getToken(js_grammarParser.ModulusAssign, 0)

        def PlusAssign(self):
            return self.getToken(js_grammarParser.PlusAssign, 0)

        def MinusAssign(self):
            return self.getToken(js_grammarParser.MinusAssign, 0)

        def LeftShiftArithmeticAssign(self):
            return self.getToken(js_grammarParser.LeftShiftArithmeticAssign, 0)

        def RightShiftArithmeticAssign(self):
            return self.getToken(js_grammarParser.RightShiftArithmeticAssign, 0)

        def RightShiftLogicalAssign(self):
            return self.getToken(js_grammarParser.RightShiftLogicalAssign, 0)

        def BitAndAssign(self):
            return self.getToken(js_grammarParser.BitAndAssign, 0)

        def BitXorAssign(self):
            return self.getToken(js_grammarParser.BitXorAssign, 0)

        def BitOrAssign(self):
            return self.getToken(js_grammarParser.BitOrAssign, 0)

        def getRuleIndex(self):
            return js_grammarParser.RULE_assignmentOperator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAssignmentOperator" ):
                listener.enterAssignmentOperator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAssignmentOperator" ):
                listener.exitAssignmentOperator(self)




    def assignmentOperator(self):

        localctx = js_grammarParser.AssignmentOperatorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 126, self.RULE_assignmentOperator)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 904
            _la = self._input.LA(1)
            if not((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << js_grammarParser.T__4) | (1 << js_grammarParser.MultiplyAssign) | (1 << js_grammarParser.DivideAssign) | (1 << js_grammarParser.ModulusAssign) | (1 << js_grammarParser.PlusAssign) | (1 << js_grammarParser.MinusAssign) | (1 << js_grammarParser.LeftShiftArithmeticAssign) | (1 << js_grammarParser.RightShiftArithmeticAssign) | (1 << js_grammarParser.RightShiftLogicalAssign) | (1 << js_grammarParser.BitAndAssign) | (1 << js_grammarParser.BitXorAssign) | (1 << js_grammarParser.BitOrAssign))) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LiteralContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NullLiteral(self):
            return self.getToken(js_grammarParser.NullLiteral, 0)

        def BooleanLiteral(self):
            return self.getToken(js_grammarParser.BooleanLiteral, 0)

        def StringLiteral(self):
            return self.getToken(js_grammarParser.StringLiteral, 0)

        def TemplateStringLiteral(self):
            return self.getToken(js_grammarParser.TemplateStringLiteral, 0)

        def RegularExpressionLiteral(self):
            return self.getToken(js_grammarParser.RegularExpressionLiteral, 0)

        def numericLiteral(self):
            return self.getTypedRuleContext(js_grammarParser.NumericLiteralContext,0)


        def bigintLiteral(self):
            return self.getTypedRuleContext(js_grammarParser.BigintLiteralContext,0)


        def getRuleIndex(self):
            return js_grammarParser.RULE_literal

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLiteral" ):
                listener.enterLiteral(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLiteral" ):
                listener.exitLiteral(self)




    def literal(self):

        localctx = js_grammarParser.LiteralContext(self, self._ctx, self.state)
        self.enterRule(localctx, 128, self.RULE_literal)
        try:
            self.state = 913
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [js_grammarParser.NullLiteral]:
                self.enterOuterAlt(localctx, 1)
                self.state = 906
                self.match(js_grammarParser.NullLiteral)
                pass
            elif token in [js_grammarParser.BooleanLiteral]:
                self.enterOuterAlt(localctx, 2)
                self.state = 907
                self.match(js_grammarParser.BooleanLiteral)
                pass
            elif token in [js_grammarParser.StringLiteral]:
                self.enterOuterAlt(localctx, 3)
                self.state = 908
                self.match(js_grammarParser.StringLiteral)
                pass
            elif token in [js_grammarParser.TemplateStringLiteral]:
                self.enterOuterAlt(localctx, 4)
                self.state = 909
                self.match(js_grammarParser.TemplateStringLiteral)
                pass
            elif token in [js_grammarParser.RegularExpressionLiteral]:
                self.enterOuterAlt(localctx, 5)
                self.state = 910
                self.match(js_grammarParser.RegularExpressionLiteral)
                pass
            elif token in [js_grammarParser.DecimalLiteral, js_grammarParser.HexIntegerLiteral, js_grammarParser.OctalIntegerLiteral2, js_grammarParser.BinaryIntegerLiteral]:
                self.enterOuterAlt(localctx, 6)
                self.state = 911
                self.numericLiteral()
                pass
            elif token in [js_grammarParser.BigHexIntegerLiteral, js_grammarParser.BigOctalIntegerLiteral, js_grammarParser.BigBinaryIntegerLiteral, js_grammarParser.BigDecimalIntegerLiteral]:
                self.enterOuterAlt(localctx, 7)
                self.state = 912
                self.bigintLiteral()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class NumericLiteralContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DecimalLiteral(self):
            return self.getToken(js_grammarParser.DecimalLiteral, 0)

        def HexIntegerLiteral(self):
            return self.getToken(js_grammarParser.HexIntegerLiteral, 0)

        def OctalIntegerLiteral2(self):
            return self.getToken(js_grammarParser.OctalIntegerLiteral2, 0)

        def BinaryIntegerLiteral(self):
            return self.getToken(js_grammarParser.BinaryIntegerLiteral, 0)

        def getRuleIndex(self):
            return js_grammarParser.RULE_numericLiteral

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNumericLiteral" ):
                listener.enterNumericLiteral(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNumericLiteral" ):
                listener.exitNumericLiteral(self)




    def numericLiteral(self):

        localctx = js_grammarParser.NumericLiteralContext(self, self._ctx, self.state)
        self.enterRule(localctx, 130, self.RULE_numericLiteral)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 915
            _la = self._input.LA(1)
            if not((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << js_grammarParser.DecimalLiteral) | (1 << js_grammarParser.HexIntegerLiteral) | (1 << js_grammarParser.OctalIntegerLiteral2) | (1 << js_grammarParser.BinaryIntegerLiteral))) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class BigintLiteralContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def BigDecimalIntegerLiteral(self):
            return self.getToken(js_grammarParser.BigDecimalIntegerLiteral, 0)

        def BigHexIntegerLiteral(self):
            return self.getToken(js_grammarParser.BigHexIntegerLiteral, 0)

        def BigOctalIntegerLiteral(self):
            return self.getToken(js_grammarParser.BigOctalIntegerLiteral, 0)

        def BigBinaryIntegerLiteral(self):
            return self.getToken(js_grammarParser.BigBinaryIntegerLiteral, 0)

        def getRuleIndex(self):
            return js_grammarParser.RULE_bigintLiteral

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBigintLiteral" ):
                listener.enterBigintLiteral(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBigintLiteral" ):
                listener.exitBigintLiteral(self)




    def bigintLiteral(self):

        localctx = js_grammarParser.BigintLiteralContext(self, self._ctx, self.state)
        self.enterRule(localctx, 132, self.RULE_bigintLiteral)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 917
            _la = self._input.LA(1)
            if not(((((_la - 63)) & ~0x3f) == 0 and ((1 << (_la - 63)) & ((1 << (js_grammarParser.BigHexIntegerLiteral - 63)) | (1 << (js_grammarParser.BigOctalIntegerLiteral - 63)) | (1 << (js_grammarParser.BigBinaryIntegerLiteral - 63)) | (1 << (js_grammarParser.BigDecimalIntegerLiteral - 63)))) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class IdentifierNameContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Identifier(self):
            return self.getToken(js_grammarParser.Identifier, 0)

        def reservedWord(self):
            return self.getTypedRuleContext(js_grammarParser.ReservedWordContext,0)


        def getRuleIndex(self):
            return js_grammarParser.RULE_identifierName

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIdentifierName" ):
                listener.enterIdentifierName(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIdentifierName" ):
                listener.exitIdentifierName(self)




    def identifierName(self):

        localctx = js_grammarParser.IdentifierNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 134, self.RULE_identifierName)
        try:
            self.state = 921
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [js_grammarParser.Identifier]:
                self.enterOuterAlt(localctx, 1)
                self.state = 919
                self.match(js_grammarParser.Identifier)
                pass
            elif token in [js_grammarParser.NullLiteral, js_grammarParser.BooleanLiteral, js_grammarParser.Break, js_grammarParser.Do, js_grammarParser.Instanceof, js_grammarParser.Typeof, js_grammarParser.Case, js_grammarParser.Else, js_grammarParser.New, js_grammarParser.Var, js_grammarParser.Let, js_grammarParser.Catch, js_grammarParser.Finally, js_grammarParser.Return, js_grammarParser.Void, js_grammarParser.Continue, js_grammarParser.For, js_grammarParser.Switch, js_grammarParser.While, js_grammarParser.Debugger, js_grammarParser.Function, js_grammarParser.This, js_grammarParser.With, js_grammarParser.Default, js_grammarParser.If, js_grammarParser.Throw, js_grammarParser.Delete, js_grammarParser.In, js_grammarParser.Try, js_grammarParser.Class, js_grammarParser.Extends, js_grammarParser.Super, js_grammarParser.Const, js_grammarParser.Static, js_grammarParser.Get, js_grammarParser.Set, js_grammarParser.Async, js_grammarParser.Await, js_grammarParser.As, js_grammarParser.From, js_grammarParser.Enum, js_grammarParser.Export, js_grammarParser.Import, js_grammarParser.Implements, js_grammarParser.Private, js_grammarParser.Public, js_grammarParser.Interface, js_grammarParser.Package, js_grammarParser.Protected, js_grammarParser.Yield]:
                self.enterOuterAlt(localctx, 2)
                self.state = 920
                self.reservedWord()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ReservedWordContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def keyword(self):
            return self.getTypedRuleContext(js_grammarParser.KeywordContext,0)


        def NullLiteral(self):
            return self.getToken(js_grammarParser.NullLiteral, 0)

        def BooleanLiteral(self):
            return self.getToken(js_grammarParser.BooleanLiteral, 0)

        def getRuleIndex(self):
            return js_grammarParser.RULE_reservedWord

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterReservedWord" ):
                listener.enterReservedWord(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitReservedWord" ):
                listener.exitReservedWord(self)




    def reservedWord(self):

        localctx = js_grammarParser.ReservedWordContext(self, self._ctx, self.state)
        self.enterRule(localctx, 136, self.RULE_reservedWord)
        try:
            self.state = 926
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [js_grammarParser.Break, js_grammarParser.Do, js_grammarParser.Instanceof, js_grammarParser.Typeof, js_grammarParser.Case, js_grammarParser.Else, js_grammarParser.New, js_grammarParser.Var, js_grammarParser.Let, js_grammarParser.Catch, js_grammarParser.Finally, js_grammarParser.Return, js_grammarParser.Void, js_grammarParser.Continue, js_grammarParser.For, js_grammarParser.Switch, js_grammarParser.While, js_grammarParser.Debugger, js_grammarParser.Function, js_grammarParser.This, js_grammarParser.With, js_grammarParser.Default, js_grammarParser.If, js_grammarParser.Throw, js_grammarParser.Delete, js_grammarParser.In, js_grammarParser.Try, js_grammarParser.Class, js_grammarParser.Extends, js_grammarParser.Super, js_grammarParser.Const, js_grammarParser.Static, js_grammarParser.Get, js_grammarParser.Set, js_grammarParser.Async, js_grammarParser.Await, js_grammarParser.As, js_grammarParser.From, js_grammarParser.Enum, js_grammarParser.Export, js_grammarParser.Import, js_grammarParser.Implements, js_grammarParser.Private, js_grammarParser.Public, js_grammarParser.Interface, js_grammarParser.Package, js_grammarParser.Protected, js_grammarParser.Yield]:
                self.enterOuterAlt(localctx, 1)
                self.state = 923
                self.keyword()
                pass
            elif token in [js_grammarParser.NullLiteral]:
                self.enterOuterAlt(localctx, 2)
                self.state = 924
                self.match(js_grammarParser.NullLiteral)
                pass
            elif token in [js_grammarParser.BooleanLiteral]:
                self.enterOuterAlt(localctx, 3)
                self.state = 925
                self.match(js_grammarParser.BooleanLiteral)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class KeywordContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Break(self):
            return self.getToken(js_grammarParser.Break, 0)

        def Do(self):
            return self.getToken(js_grammarParser.Do, 0)

        def Instanceof(self):
            return self.getToken(js_grammarParser.Instanceof, 0)

        def Typeof(self):
            return self.getToken(js_grammarParser.Typeof, 0)

        def Case(self):
            return self.getToken(js_grammarParser.Case, 0)

        def Else(self):
            return self.getToken(js_grammarParser.Else, 0)

        def New(self):
            return self.getToken(js_grammarParser.New, 0)

        def Var(self):
            return self.getToken(js_grammarParser.Var, 0)

        def Catch(self):
            return self.getToken(js_grammarParser.Catch, 0)

        def Finally(self):
            return self.getToken(js_grammarParser.Finally, 0)

        def Return(self):
            return self.getToken(js_grammarParser.Return, 0)

        def Void(self):
            return self.getToken(js_grammarParser.Void, 0)

        def Continue(self):
            return self.getToken(js_grammarParser.Continue, 0)

        def For(self):
            return self.getToken(js_grammarParser.For, 0)

        def Switch(self):
            return self.getToken(js_grammarParser.Switch, 0)

        def While(self):
            return self.getToken(js_grammarParser.While, 0)

        def Debugger(self):
            return self.getToken(js_grammarParser.Debugger, 0)

        def Function(self):
            return self.getToken(js_grammarParser.Function, 0)

        def This(self):
            return self.getToken(js_grammarParser.This, 0)

        def With(self):
            return self.getToken(js_grammarParser.With, 0)

        def Default(self):
            return self.getToken(js_grammarParser.Default, 0)

        def If(self):
            return self.getToken(js_grammarParser.If, 0)

        def Throw(self):
            return self.getToken(js_grammarParser.Throw, 0)

        def Delete(self):
            return self.getToken(js_grammarParser.Delete, 0)

        def In(self):
            return self.getToken(js_grammarParser.In, 0)

        def Try(self):
            return self.getToken(js_grammarParser.Try, 0)

        def Class(self):
            return self.getToken(js_grammarParser.Class, 0)

        def Enum(self):
            return self.getToken(js_grammarParser.Enum, 0)

        def Extends(self):
            return self.getToken(js_grammarParser.Extends, 0)

        def Super(self):
            return self.getToken(js_grammarParser.Super, 0)

        def Const(self):
            return self.getToken(js_grammarParser.Const, 0)

        def Export(self):
            return self.getToken(js_grammarParser.Export, 0)

        def Import(self):
            return self.getToken(js_grammarParser.Import, 0)

        def Implements(self):
            return self.getToken(js_grammarParser.Implements, 0)

        def Let(self):
            return self.getToken(js_grammarParser.Let, 0)

        def Private(self):
            return self.getToken(js_grammarParser.Private, 0)

        def Public(self):
            return self.getToken(js_grammarParser.Public, 0)

        def Interface(self):
            return self.getToken(js_grammarParser.Interface, 0)

        def Package(self):
            return self.getToken(js_grammarParser.Package, 0)

        def Protected(self):
            return self.getToken(js_grammarParser.Protected, 0)

        def Static(self):
            return self.getToken(js_grammarParser.Static, 0)

        def Yield(self):
            return self.getToken(js_grammarParser.Yield, 0)

        def Async(self):
            return self.getToken(js_grammarParser.Async, 0)

        def Await(self):
            return self.getToken(js_grammarParser.Await, 0)

        def From(self):
            return self.getToken(js_grammarParser.From, 0)

        def As(self):
            return self.getToken(js_grammarParser.As, 0)

        def Get(self):
            return self.getToken(js_grammarParser.Get, 0)

        def Set(self):
            return self.getToken(js_grammarParser.Set, 0)

        def getRuleIndex(self):
            return js_grammarParser.RULE_keyword

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterKeyword" ):
                listener.enterKeyword(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitKeyword" ):
                listener.exitKeyword(self)




    def keyword(self):

        localctx = js_grammarParser.KeywordContext(self, self._ctx, self.state)
        self.enterRule(localctx, 138, self.RULE_keyword)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 928
            _la = self._input.LA(1)
            if not(((((_la - 67)) & ~0x3f) == 0 and ((1 << (_la - 67)) & ((1 << (js_grammarParser.Break - 67)) | (1 << (js_grammarParser.Do - 67)) | (1 << (js_grammarParser.Instanceof - 67)) | (1 << (js_grammarParser.Typeof - 67)) | (1 << (js_grammarParser.Case - 67)) | (1 << (js_grammarParser.Else - 67)) | (1 << (js_grammarParser.New - 67)) | (1 << (js_grammarParser.Var - 67)) | (1 << (js_grammarParser.Let - 67)) | (1 << (js_grammarParser.Catch - 67)) | (1 << (js_grammarParser.Finally - 67)) | (1 << (js_grammarParser.Return - 67)) | (1 << (js_grammarParser.Void - 67)) | (1 << (js_grammarParser.Continue - 67)) | (1 << (js_grammarParser.For - 67)) | (1 << (js_grammarParser.Switch - 67)) | (1 << (js_grammarParser.While - 67)) | (1 << (js_grammarParser.Debugger - 67)) | (1 << (js_grammarParser.Function - 67)) | (1 << (js_grammarParser.This - 67)) | (1 << (js_grammarParser.With - 67)) | (1 << (js_grammarParser.Default - 67)) | (1 << (js_grammarParser.If - 67)) | (1 << (js_grammarParser.Throw - 67)) | (1 << (js_grammarParser.Delete - 67)) | (1 << (js_grammarParser.In - 67)) | (1 << (js_grammarParser.Try - 67)) | (1 << (js_grammarParser.Class - 67)) | (1 << (js_grammarParser.Extends - 67)) | (1 << (js_grammarParser.Super - 67)) | (1 << (js_grammarParser.Const - 67)) | (1 << (js_grammarParser.Static - 67)) | (1 << (js_grammarParser.Get - 67)) | (1 << (js_grammarParser.Set - 67)) | (1 << (js_grammarParser.Async - 67)) | (1 << (js_grammarParser.Await - 67)) | (1 << (js_grammarParser.As - 67)) | (1 << (js_grammarParser.From - 67)) | (1 << (js_grammarParser.Enum - 67)) | (1 << (js_grammarParser.Export - 67)) | (1 << (js_grammarParser.Import - 67)) | (1 << (js_grammarParser.Implements - 67)) | (1 << (js_grammarParser.Private - 67)) | (1 << (js_grammarParser.Public - 67)) | (1 << (js_grammarParser.Interface - 67)) | (1 << (js_grammarParser.Package - 67)) | (1 << (js_grammarParser.Protected - 67)) | (1 << (js_grammarParser.Yield - 67)))) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class EosContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SemiColon(self):
            return self.getToken(js_grammarParser.SemiColon, 0)

        def EOF(self):
            return self.getToken(js_grammarParser.EOF, 0)

        def CloseBrace(self):
            return self.getToken(js_grammarParser.CloseBrace, 0)

        def getRuleIndex(self):
            return js_grammarParser.RULE_eos

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEos" ):
                listener.enterEos(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEos" ):
                listener.exitEos(self)




    def eos(self):

        localctx = js_grammarParser.EosContext(self, self._ctx, self.state)
        self.enterRule(localctx, 140, self.RULE_eos)
        try:
            self.state = 934
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,97,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 930
                self.match(js_grammarParser.SemiColon)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 931
                self.match(js_grammarParser.EOF)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 932
                if not here(LineTerminator):
                    from antlr4.error.Errors import FailedPredicateException
                    raise FailedPredicateException(self, "here(LineTerminator)")
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 933
                self.match(js_grammarParser.CloseBrace)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx



    def sempred(self, localctx:RuleContext, ruleIndex:int, predIndex:int):
        if self._predicates == None:
            self._predicates = dict()
        self._predicates[19] = self.expressionStatement_sempred
        self._predicates[23] = self.continueStatement_sempred
        self._predicates[24] = self.breakStatement_sempred
        self._predicates[25] = self.returnStatement_sempred
        self._predicates[26] = self.yieldStatement_sempred
        self._predicates[34] = self.throwStatement_sempred
        self._predicates[58] = self.singleExpression_sempred
        self._predicates[70] = self.eos_sempred
        pred = self._predicates.get(ruleIndex, None)
        if pred is None:
            raise Exception("No predicate with index:" + str(ruleIndex))
        else:
            return pred(localctx, predIndex)

    def expressionStatement_sempred(self, localctx:ExpressionStatementContext, predIndex:int):
            if predIndex == 0:
                return !here(Function) & !here(OpenBrace)
         

    def continueStatement_sempred(self, localctx:ContinueStatementContext, predIndex:int):
            if predIndex == 1:
                return !here(LineTerminator)
         

    def breakStatement_sempred(self, localctx:BreakStatementContext, predIndex:int):
            if predIndex == 2:
                return !here(LineTerminator)
         

    def returnStatement_sempred(self, localctx:ReturnStatementContext, predIndex:int):
            if predIndex == 3:
                return !here(LineTerminator)
         

    def yieldStatement_sempred(self, localctx:YieldStatementContext, predIndex:int):
            if predIndex == 4:
                return !here(LineTerminator)
         

    def throwStatement_sempred(self, localctx:ThrowStatementContext, predIndex:int):
            if predIndex == 5:
                return !here(LineTerminator)
         

    def singleExpression_sempred(self, localctx:SingleExpressionContext, predIndex:int):
            if predIndex == 6:
                return self.precpred(self._ctx, 27)
         

            if predIndex == 7:
                return self.precpred(self._ctx, 26)
         

            if predIndex == 8:
                return self.precpred(self._ctx, 25)
         

            if predIndex == 9:
                return self.precpred(self._ctx, 24)
         

            if predIndex == 10:
                return self.precpred(self._ctx, 23)
         

            if predIndex == 11:
                return self.precpred(self._ctx, 22)
         

            if predIndex == 12:
                return self.precpred(self._ctx, 21)
         

            if predIndex == 13:
                return self.precpred(self._ctx, 20)
         

            if predIndex == 14:
                return self.precpred(self._ctx, 19)
         

            if predIndex == 15:
                return self.precpred(self._ctx, 18)
         

            if predIndex == 16:
                return self.precpred(self._ctx, 17)
         

            if predIndex == 17:
                return self.precpred(self._ctx, 16)
         

            if predIndex == 18:
                return self.precpred(self._ctx, 15)
         

            if predIndex == 19:
                return self.precpred(self._ctx, 14)
         

            if predIndex == 20:
                return self.precpred(self._ctx, 13)
         

            if predIndex == 21:
                return self.precpred(self._ctx, 12)
         

            if predIndex == 22:
                return self.precpred(self._ctx, 11)
         

            if predIndex == 23:
                return self.precpred(self._ctx, 44)
         

            if predIndex == 24:
                return self.precpred(self._ctx, 43)
         

            if predIndex == 25:
                return self.precpred(self._ctx, 42)
         

            if predIndex == 26:
                return self.precpred(self._ctx, 39)
         

            if predIndex == 27:
                return !here(LineTerminator)
         

            if predIndex == 28:
                return self.precpred(self._ctx, 38)
         

            if predIndex == 29:
                return !here(LineTerminator)
         

            if predIndex == 30:
                return self.precpred(self._ctx, 9)
         

    def eos_sempred(self, localctx:EosContext, predIndex:int):
            if predIndex == 31:
                return here(LineTerminator)
         




