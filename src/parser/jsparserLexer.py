# Generated from js_grammar.g4 by ANTLR 4.8
from antlr4 import *
from io import StringIO
from typing.io import TextIO
import sys



def serializedATN():
    with StringIO() as buf:
        buf.write("\3\u608b\ua72a\u8133\ub9ed\u417c\u3be7\u7786\u5964\2}")
        buf.write("\u0459\b\1\4\2\t\2\4\3\t\3\4\4\t\4\4\5\t\5\4\6\t\6\4\7")
        buf.write("\t\7\4\b\t\b\4\t\t\t\4\n\t\n\4\13\t\13\4\f\t\f\4\r\t\r")
        buf.write("\4\16\t\16\4\17\t\17\4\20\t\20\4\21\t\21\4\22\t\22\4\23")
        buf.write("\t\23\4\24\t\24\4\25\t\25\4\26\t\26\4\27\t\27\4\30\t\30")
        buf.write("\4\31\t\31\4\32\t\32\4\33\t\33\4\34\t\34\4\35\t\35\4\36")
        buf.write("\t\36\4\37\t\37\4 \t \4!\t!\4\"\t\"\4#\t#\4$\t$\4%\t%")
        buf.write("\4&\t&\4\'\t\'\4(\t(\4)\t)\4*\t*\4+\t+\4,\t,\4-\t-\4.")
        buf.write("\t.\4/\t/\4\60\t\60\4\61\t\61\4\62\t\62\4\63\t\63\4\64")
        buf.write("\t\64\4\65\t\65\4\66\t\66\4\67\t\67\48\t8\49\t9\4:\t:")
        buf.write("\4;\t;\4<\t<\4=\t=\4>\t>\4?\t?\4@\t@\4A\tA\4B\tB\4C\t")
        buf.write("C\4D\tD\4E\tE\4F\tF\4G\tG\4H\tH\4I\tI\4J\tJ\4K\tK\4L\t")
        buf.write("L\4M\tM\4N\tN\4O\tO\4P\tP\4Q\tQ\4R\tR\4S\tS\4T\tT\4U\t")
        buf.write("U\4V\tV\4W\tW\4X\tX\4Y\tY\4Z\tZ\4[\t[\4\\\t\\\4]\t]\4")
        buf.write("^\t^\4_\t_\4`\t`\4a\ta\4b\tb\4c\tc\4d\td\4e\te\4f\tf\4")
        buf.write("g\tg\4h\th\4i\ti\4j\tj\4k\tk\4l\tl\4m\tm\4n\tn\4o\to\4")
        buf.write("p\tp\4q\tq\4r\tr\4s\ts\4t\tt\4u\tu\4v\tv\4w\tw\4x\tx\4")
        buf.write("y\ty\4z\tz\4{\t{\4|\t|\4}\t}\4~\t~\4\177\t\177\4\u0080")
        buf.write("\t\u0080\4\u0081\t\u0081\4\u0082\t\u0082\4\u0083\t\u0083")
        buf.write("\4\u0084\t\u0084\4\u0085\t\u0085\4\u0086\t\u0086\4\u0087")
        buf.write("\t\u0087\4\u0088\t\u0088\4\u0089\t\u0089\4\u008a\t\u008a")
        buf.write("\4\u008b\t\u008b\4\u008c\t\u008c\4\u008d\t\u008d\4\u008e")
        buf.write("\t\u008e\4\u008f\t\u008f\4\u0090\t\u0090\4\u0091\t\u0091")
        buf.write("\4\u0092\t\u0092\4\u0093\t\u0093\4\u0094\t\u0094\4\u0095")
        buf.write("\t\u0095\4\u0096\t\u0096\3\2\3\2\3\3\3\3\3\3\3\4\3\4\3")
        buf.write("\4\3\5\3\5\3\5\3\6\3\6\3\6\3\6\3\7\3\7\3\7\3\7\3\7\3\7")
        buf.write("\3\b\3\b\3\b\3\b\3\t\3\t\3\n\3\n\3\13\3\13\3\f\3\f\3\r")
        buf.write("\3\r\3\16\3\16\3\17\3\17\3\20\3\20\3\21\3\21\3\22\3\22")
        buf.write("\3\23\3\23\3\24\3\24\3\25\3\25\3\25\3\26\3\26\3\26\3\27")
        buf.write("\3\27\3\30\3\30\3\31\3\31\3\32\3\32\3\33\3\33\3\34\3\34")
        buf.write("\3\35\3\35\3\36\3\36\3\36\3\37\3\37\3\37\3 \3 \3 \3 \3")
        buf.write("!\3!\3\"\3\"\3#\3#\3#\3$\3$\3$\3%\3%\3%\3&\3&\3&\3\'\3")
        buf.write("\'\3\'\3\'\3(\3(\3(\3(\3)\3)\3*\3*\3+\3+\3,\3,\3,\3-\3")
        buf.write("-\3-\3.\3.\3.\3/\3/\3/\3\60\3\60\3\60\3\61\3\61\3\61\3")
        buf.write("\62\3\62\3\62\3\63\3\63\3\63\3\63\3\64\3\64\3\64\3\64")
        buf.write("\3\65\3\65\3\65\3\65\3\65\3\66\3\66\3\66\3\67\3\67\3\67")
        buf.write("\38\38\38\39\39\39\39\39\39\3:\3:\3:\3:\3:\3;\3;\3;\3")
        buf.write(";\3;\3;\3;\3;\3;\5;\u01da\n;\3<\3<\3<\7<\u01df\n<\f<\16")
        buf.write("<\u01e2\13<\3<\5<\u01e5\n<\3<\3<\6<\u01e9\n<\r<\16<\u01ea")
        buf.write("\3<\5<\u01ee\n<\3<\3<\5<\u01f2\n<\5<\u01f4\n<\3=\3=\3")
        buf.write("=\3=\7=\u01fa\n=\f=\16=\u01fd\13=\3>\3>\3>\3>\7>\u0203")
        buf.write("\n>\f>\16>\u0206\13>\3?\3?\3?\3?\7?\u020c\n?\f?\16?\u020f")
        buf.write("\13?\3@\3@\3@\3@\7@\u0215\n@\f@\16@\u0218\13@\3@\3@\3")
        buf.write("A\3A\3A\3A\7A\u0220\nA\fA\16A\u0223\13A\3A\3A\3B\3B\3")
        buf.write("B\3B\7B\u022b\nB\fB\16B\u022e\13B\3B\3B\3C\3C\3C\3D\3")
        buf.write("D\3D\3D\3D\3D\3E\3E\3E\3F\3F\3F\3F\3F\3F\3F\3F\3F\3F\3")
        buf.write("F\3G\3G\3G\3G\3G\3G\3G\3H\3H\3H\3H\3H\3I\3I\3I\3I\3I\3")
        buf.write("J\3J\3J\3J\3K\3K\3K\3K\3L\3L\3L\3L\3M\3M\3M\3M\3M\3M\3")
        buf.write("M\3M\3N\3N\3N\3N\3N\3N\3N\3N\3N\3N\3O\3O\3O\3O\3O\3O\3")
        buf.write("O\3P\3P\3P\3P\3P\3Q\3Q\3Q\3Q\3Q\3Q\3Q\3Q\3Q\3R\3R\3R\3")
        buf.write("R\3S\3S\3S\3S\3S\3S\3S\3S\3S\3T\3T\3T\3T\3T\3T\3U\3U\3")
        buf.write("U\3U\3U\3U\3U\3U\3U\3V\3V\3V\3V\3V\3V\3V\3V\3V\3W\3W\3")
        buf.write("W\3W\3W\3X\3X\3X\3X\3X\3X\3X\3Y\3Y\3Y\3Y\3Y\3Y\3Y\3Y\3")
        buf.write("Z\3Z\3Z\3[\3[\3[\3[\3[\3[\3[\3[\3\\\3\\\3\\\3\\\3\\\3")
        buf.write("\\\3\\\3]\3]\3]\3^\3^\3^\3^\3^\3^\3_\3_\3_\3_\3_\3_\3")
        buf.write("`\3`\3`\3`\3`\3`\3`\3`\3a\3a\3a\3a\3a\3a\3b\3b\3b\3b\3")
        buf.write("b\3b\3b\3b\3b\3b\3b\3b\3c\3c\3c\3c\3c\3c\3d\3d\3d\3d\3")
        buf.write("d\3d\3d\3e\3e\3e\3e\3f\3f\3f\3f\3g\3g\3g\3g\3g\3g\3g\3")
        buf.write("g\3h\3h\3h\3h\3h\3h\3h\3h\3i\3i\3i\3j\3j\3j\3j\3j\3k\3")
        buf.write("k\3k\3k\3k\3k\3k\3l\3l\3l\3l\3l\3l\3l\3l\3l\3m\3m\3m\3")
        buf.write("m\3m\3m\3m\3m\3m\3n\3n\3n\3n\3n\3n\3n\3n\3n\3n\3n\3n\3")
        buf.write("n\3o\3o\3o\3o\3o\3o\3o\3o\3o\3o\3p\3p\3p\3p\3p\3p\3p\3")
        buf.write("p\3p\3q\3q\3q\3q\3q\3q\3q\3q\3q\3q\3q\3q\3r\3r\3r\3r\3")
        buf.write("r\3r\3r\3r\3r\3r\3s\3s\3s\3s\3s\3s\3s\3s\3s\3s\3s\3s\3")
        buf.write("t\3t\3t\3t\3t\3t\3t\3t\3u\3u\7u\u0393\nu\fu\16u\u0396")
        buf.write("\13u\3v\3v\7v\u039a\nv\fv\16v\u039d\13v\3v\3v\3v\7v\u03a2")
        buf.write("\nv\fv\16v\u03a5\13v\3v\5v\u03a8\nv\3w\3w\3w\3w\7w\u03ae")
        buf.write("\nw\fw\16w\u03b1\13w\3w\3w\3x\6x\u03b6\nx\rx\16x\u03b7")
        buf.write("\3x\3x\3y\3y\3y\3y\7y\u03c0\ny\fy\16y\u03c3\13y\3y\3y")
        buf.write("\3y\3y\3y\3z\3z\3z\3z\7z\u03ce\nz\fz\16z\u03d1\13z\3z")
        buf.write("\3z\3{\3{\3|\3|\3|\3|\5|\u03db\n|\3}\3}\3}\3}\5}\u03e1")
        buf.write("\n}\3~\3~\3~\3~\5~\u03e7\n~\3\177\3\177\5\177\u03eb\n")
        buf.write("\177\3\u0080\3\u0080\3\u0080\3\u0080\3\u0081\3\u0081\3")
        buf.write("\u0081\3\u0081\3\u0081\3\u0081\3\u0082\3\u0082\3\u0083")
        buf.write("\3\u0083\3\u0084\3\u0084\3\u0084\5\u0084\u03fe\n\u0084")
        buf.write("\3\u0085\3\u0085\3\u0085\3\u0086\3\u0086\3\u0086\5\u0086")
        buf.write("\u0406\n\u0086\3\u0087\3\u0087\3\u0088\3\u0088\3\u0089")
        buf.write("\3\u0089\3\u008a\3\u008a\3\u008a\7\u008a\u0411\n\u008a")
        buf.write("\f\u008a\16\u008a\u0414\13\u008a\5\u008a\u0416\n\u008a")
        buf.write("\3\u008b\3\u008b\5\u008b\u041a\n\u008b\3\u008b\6\u008b")
        buf.write("\u041d\n\u008b\r\u008b\16\u008b\u041e\3\u008c\3\u008c")
        buf.write("\3\u008c\5\u008c\u0424\n\u008c\3\u008d\3\u008d\5\u008d")
        buf.write("\u0428\n\u008d\3\u008e\3\u008e\7\u008e\u042c\n\u008e\f")
        buf.write("\u008e\16\u008e\u042f\13\u008e\3\u008f\3\u008f\7\u008f")
        buf.write("\u0433\n\u008f\f\u008f\16\u008f\u0436\13\u008f\3\u0090")
        buf.write("\7\u0090\u0439\n\u0090\f\u0090\16\u0090\u043c\13\u0090")
        buf.write("\3\u0091\3\u0091\3\u0091\5\u0091\u0441\n\u0091\3\u0092")
        buf.write("\3\u0092\3\u0092\5\u0092\u0446\n\u0092\3\u0093\3\u0093")
        buf.write("\3\u0094\3\u0094\3\u0094\3\u0095\3\u0095\7\u0095\u044f")
        buf.write("\n\u0095\f\u0095\16\u0095\u0452\13\u0095\3\u0095\3\u0095")
        buf.write("\3\u0096\3\u0096\5\u0096\u0458\n\u0096\3\u03c1\2\u0097")
        buf.write("\3\3\5\4\7\5\t\6\13\7\r\b\17\t\21\n\23\13\25\f\27\r\31")
        buf.write("\16\33\17\35\20\37\21!\22#\23%\24\'\25)\26+\27-\30/\31")
        buf.write("\61\32\63\33\65\34\67\359\36;\37= ?!A\"C#E$G%I&K\'M(O")
        buf.write(")Q*S+U,W-Y.[/]\60_\61a\62c\63e\64g\65i\66k\67m8o9q:s;")
        buf.write("u<w=y>{?}@\177A\u0081B\u0083C\u0085D\u0087E\u0089F\u008b")
        buf.write("G\u008dH\u008fI\u0091J\u0093K\u0095L\u0097M\u0099N\u009b")
        buf.write("O\u009dP\u009fQ\u00a1R\u00a3S\u00a5T\u00a7U\u00a9V\u00ab")
        buf.write("W\u00adX\u00afY\u00b1Z\u00b3[\u00b5\\\u00b7]\u00b9^\u00bb")
        buf.write("_\u00bd`\u00bfa\u00c1b\u00c3c\u00c5d\u00c7e\u00c9f\u00cb")
        buf.write("g\u00cdh\u00cfi\u00d1j\u00d3k\u00d5l\u00d7m\u00d9n\u00db")
        buf.write("o\u00ddp\u00dfq\u00e1r\u00e3s\u00e5t\u00e7u\u00e9v\u00eb")
        buf.write("w\u00edx\u00efy\u00f1z\u00f3{\u00f5|\u00f7\2\u00f9\2\u00fb")
        buf.write("\2\u00fd\2\u00ff\2\u0101\2\u0103\2\u0105\2\u0107\2\u0109")
        buf.write("\2\u010b\2\u010d\2\u010f\2\u0111\2\u0113\2\u0115\2\u0117")
        buf.write("\2\u0119\2\u011b}\u011d\2\u011f\2\u0121\2\u0123\2\u0125")
        buf.write("\2\u0127\2\u0129\2\u012b\2\3\2\32\4\2\f\f\17\17\4\2ZZ")
        buf.write("zz\5\2\62;CHch\4\2QQqq\3\2\629\4\2\629aa\4\2DDdd\3\2\62")
        buf.write("\63\4\2\62\63aa\3\2bb\4\2\13\13\"\"\6\2\f\f\17\17$$^^")
        buf.write("\6\2\f\f\17\17))^^\13\2$$))^^ddhhppttvvxx\16\2\f\f\17")
        buf.write("\17$$))\62;^^ddhhppttvxzz\4\2wwzz\3\2\62;\3\2\63;\4\2")
        buf.write("GGgg\4\2--//\6\2&&C\\aac|\7\2\f\f\17\17,,\61\61]^\6\2")
        buf.write("\f\f\17\17\61\61]^\5\2\f\f\17\17^_\2\u046f\2\3\3\2\2\2")
        buf.write("\2\5\3\2\2\2\2\7\3\2\2\2\2\t\3\2\2\2\2\13\3\2\2\2\2\r")
        buf.write("\3\2\2\2\2\17\3\2\2\2\2\21\3\2\2\2\2\23\3\2\2\2\2\25\3")
        buf.write("\2\2\2\2\27\3\2\2\2\2\31\3\2\2\2\2\33\3\2\2\2\2\35\3\2")
        buf.write("\2\2\2\37\3\2\2\2\2!\3\2\2\2\2#\3\2\2\2\2%\3\2\2\2\2\'")
        buf.write("\3\2\2\2\2)\3\2\2\2\2+\3\2\2\2\2-\3\2\2\2\2/\3\2\2\2\2")
        buf.write("\61\3\2\2\2\2\63\3\2\2\2\2\65\3\2\2\2\2\67\3\2\2\2\29")
        buf.write("\3\2\2\2\2;\3\2\2\2\2=\3\2\2\2\2?\3\2\2\2\2A\3\2\2\2\2")
        buf.write("C\3\2\2\2\2E\3\2\2\2\2G\3\2\2\2\2I\3\2\2\2\2K\3\2\2\2")
        buf.write("\2M\3\2\2\2\2O\3\2\2\2\2Q\3\2\2\2\2S\3\2\2\2\2U\3\2\2")
        buf.write("\2\2W\3\2\2\2\2Y\3\2\2\2\2[\3\2\2\2\2]\3\2\2\2\2_\3\2")
        buf.write("\2\2\2a\3\2\2\2\2c\3\2\2\2\2e\3\2\2\2\2g\3\2\2\2\2i\3")
        buf.write("\2\2\2\2k\3\2\2\2\2m\3\2\2\2\2o\3\2\2\2\2q\3\2\2\2\2s")
        buf.write("\3\2\2\2\2u\3\2\2\2\2w\3\2\2\2\2y\3\2\2\2\2{\3\2\2\2\2")
        buf.write("}\3\2\2\2\2\177\3\2\2\2\2\u0081\3\2\2\2\2\u0083\3\2\2")
        buf.write("\2\2\u0085\3\2\2\2\2\u0087\3\2\2\2\2\u0089\3\2\2\2\2\u008b")
        buf.write("\3\2\2\2\2\u008d\3\2\2\2\2\u008f\3\2\2\2\2\u0091\3\2\2")
        buf.write("\2\2\u0093\3\2\2\2\2\u0095\3\2\2\2\2\u0097\3\2\2\2\2\u0099")
        buf.write("\3\2\2\2\2\u009b\3\2\2\2\2\u009d\3\2\2\2\2\u009f\3\2\2")
        buf.write("\2\2\u00a1\3\2\2\2\2\u00a3\3\2\2\2\2\u00a5\3\2\2\2\2\u00a7")
        buf.write("\3\2\2\2\2\u00a9\3\2\2\2\2\u00ab\3\2\2\2\2\u00ad\3\2\2")
        buf.write("\2\2\u00af\3\2\2\2\2\u00b1\3\2\2\2\2\u00b3\3\2\2\2\2\u00b5")
        buf.write("\3\2\2\2\2\u00b7\3\2\2\2\2\u00b9\3\2\2\2\2\u00bb\3\2\2")
        buf.write("\2\2\u00bd\3\2\2\2\2\u00bf\3\2\2\2\2\u00c1\3\2\2\2\2\u00c3")
        buf.write("\3\2\2\2\2\u00c5\3\2\2\2\2\u00c7\3\2\2\2\2\u00c9\3\2\2")
        buf.write("\2\2\u00cb\3\2\2\2\2\u00cd\3\2\2\2\2\u00cf\3\2\2\2\2\u00d1")
        buf.write("\3\2\2\2\2\u00d3\3\2\2\2\2\u00d5\3\2\2\2\2\u00d7\3\2\2")
        buf.write("\2\2\u00d9\3\2\2\2\2\u00db\3\2\2\2\2\u00dd\3\2\2\2\2\u00df")
        buf.write("\3\2\2\2\2\u00e1\3\2\2\2\2\u00e3\3\2\2\2\2\u00e5\3\2\2")
        buf.write("\2\2\u00e7\3\2\2\2\2\u00e9\3\2\2\2\2\u00eb\3\2\2\2\2\u00ed")
        buf.write("\3\2\2\2\2\u00ef\3\2\2\2\2\u00f1\3\2\2\2\2\u00f3\3\2\2")
        buf.write("\2\2\u00f5\3\2\2\2\2\u011b\3\2\2\2\3\u012d\3\2\2\2\5\u012f")
        buf.write("\3\2\2\2\7\u0132\3\2\2\2\t\u0135\3\2\2\2\13\u0138\3\2")
        buf.write("\2\2\r\u013c\3\2\2\2\17\u0142\3\2\2\2\21\u0146\3\2\2\2")
        buf.write("\23\u0148\3\2\2\2\25\u014a\3\2\2\2\27\u014c\3\2\2\2\31")
        buf.write("\u014e\3\2\2\2\33\u0150\3\2\2\2\35\u0152\3\2\2\2\37\u0154")
        buf.write("\3\2\2\2!\u0156\3\2\2\2#\u0158\3\2\2\2%\u015a\3\2\2\2")
        buf.write("\'\u015c\3\2\2\2)\u015e\3\2\2\2+\u0161\3\2\2\2-\u0164")
        buf.write("\3\2\2\2/\u0166\3\2\2\2\61\u0168\3\2\2\2\63\u016a\3\2")
        buf.write("\2\2\65\u016c\3\2\2\2\67\u016e\3\2\2\29\u0170\3\2\2\2")
        buf.write(";\u0172\3\2\2\2=\u0175\3\2\2\2?\u0178\3\2\2\2A\u017c\3")
        buf.write("\2\2\2C\u017e\3\2\2\2E\u0180\3\2\2\2G\u0183\3\2\2\2I\u0186")
        buf.write("\3\2\2\2K\u0189\3\2\2\2M\u018c\3\2\2\2O\u0190\3\2\2\2")
        buf.write("Q\u0194\3\2\2\2S\u0196\3\2\2\2U\u0198\3\2\2\2W\u019a\3")
        buf.write("\2\2\2Y\u019d\3\2\2\2[\u01a0\3\2\2\2]\u01a3\3\2\2\2_\u01a6")
        buf.write("\3\2\2\2a\u01a9\3\2\2\2c\u01ac\3\2\2\2e\u01af\3\2\2\2")
        buf.write("g\u01b3\3\2\2\2i\u01b7\3\2\2\2k\u01bc\3\2\2\2m\u01bf\3")
        buf.write("\2\2\2o\u01c2\3\2\2\2q\u01c5\3\2\2\2s\u01cb\3\2\2\2u\u01d9")
        buf.write("\3\2\2\2w\u01f3\3\2\2\2y\u01f5\3\2\2\2{\u01fe\3\2\2\2")
        buf.write("}\u0207\3\2\2\2\177\u0210\3\2\2\2\u0081\u021b\3\2\2\2")
        buf.write("\u0083\u0226\3\2\2\2\u0085\u0231\3\2\2\2\u0087\u0234\3")
        buf.write("\2\2\2\u0089\u023a\3\2\2\2\u008b\u023d\3\2\2\2\u008d\u0248")
        buf.write("\3\2\2\2\u008f\u024f\3\2\2\2\u0091\u0254\3\2\2\2\u0093")
        buf.write("\u0259\3\2\2\2\u0095\u025d\3\2\2\2\u0097\u0261\3\2\2\2")
        buf.write("\u0099\u0265\3\2\2\2\u009b\u026d\3\2\2\2\u009d\u0277\3")
        buf.write("\2\2\2\u009f\u027e\3\2\2\2\u00a1\u0283\3\2\2\2\u00a3\u028c")
        buf.write("\3\2\2\2\u00a5\u0290\3\2\2\2\u00a7\u0299\3\2\2\2\u00a9")
        buf.write("\u029f\3\2\2\2\u00ab\u02a8\3\2\2\2\u00ad\u02b1\3\2\2\2")
        buf.write("\u00af\u02b6\3\2\2\2\u00b1\u02bd\3\2\2\2\u00b3\u02c5\3")
        buf.write("\2\2\2\u00b5\u02c8\3\2\2\2\u00b7\u02d0\3\2\2\2\u00b9\u02d7")
        buf.write("\3\2\2\2\u00bb\u02da\3\2\2\2\u00bd\u02e0\3\2\2\2\u00bf")
        buf.write("\u02e6\3\2\2\2\u00c1\u02ee\3\2\2\2\u00c3\u02f4\3\2\2\2")
        buf.write("\u00c5\u0300\3\2\2\2\u00c7\u0306\3\2\2\2\u00c9\u030d\3")
        buf.write("\2\2\2\u00cb\u0311\3\2\2\2\u00cd\u0315\3\2\2\2\u00cf\u031d")
        buf.write("\3\2\2\2\u00d1\u0325\3\2\2\2\u00d3\u0328\3\2\2\2\u00d5")
        buf.write("\u032d\3\2\2\2\u00d7\u0334\3\2\2\2\u00d9\u033d\3\2\2\2")
        buf.write("\u00db\u0346\3\2\2\2\u00dd\u0353\3\2\2\2\u00df\u035d\3")
        buf.write("\2\2\2\u00e1\u0366\3\2\2\2\u00e3\u0372\3\2\2\2\u00e5\u037c")
        buf.write("\3\2\2\2\u00e7\u0388\3\2\2\2\u00e9\u0390\3\2\2\2\u00eb")
        buf.write("\u03a7\3\2\2\2\u00ed\u03a9\3\2\2\2\u00ef\u03b5\3\2\2\2")
        buf.write("\u00f1\u03bb\3\2\2\2\u00f3\u03c9\3\2\2\2\u00f5\u03d4\3")
        buf.write("\2\2\2\u00f7\u03da\3\2\2\2\u00f9\u03e0\3\2\2\2\u00fb\u03e6")
        buf.write("\3\2\2\2\u00fd\u03ea\3\2\2\2\u00ff\u03ec\3\2\2\2\u0101")
        buf.write("\u03f0\3\2\2\2\u0103\u03f6\3\2\2\2\u0105\u03f8\3\2\2\2")
        buf.write("\u0107\u03fd\3\2\2\2\u0109\u03ff\3\2\2\2\u010b\u0405\3")
        buf.write("\2\2\2\u010d\u0407\3\2\2\2\u010f\u0409\3\2\2\2\u0111\u040b")
        buf.write("\3\2\2\2\u0113\u0415\3\2\2\2\u0115\u0417\3\2\2\2\u0117")
        buf.write("\u0423\3\2\2\2\u0119\u0427\3\2\2\2\u011b\u0429\3\2\2\2")
        buf.write("\u011d\u0430\3\2\2\2\u011f\u043a\3\2\2\2\u0121\u0440\3")
        buf.write("\2\2\2\u0123\u0445\3\2\2\2\u0125\u0447\3\2\2\2\u0127\u0449")
        buf.write("\3\2\2\2\u0129\u044c\3\2\2\2\u012b\u0457\3\2\2\2\u012d")
        buf.write("\u012e\7%\2\2\u012e\4\3\2\2\2\u012f\u0130\7,\2\2\u0130")
        buf.write("\u0131\7,\2\2\u0131\6\3\2\2\2\u0132\u0133\7A\2\2\u0133")
        buf.write("\u0134\7A\2\2\u0134\b\3\2\2\2\u0135\u0136\7?\2\2\u0136")
        buf.write("\u0137\7@\2\2\u0137\n\3\2\2\2\u0138\u0139\7,\2\2\u0139")
        buf.write("\u013a\7,\2\2\u013a\u013b\7?\2\2\u013b\f\3\2\2\2\u013c")
        buf.write("\u013d\6\7\2\2\u013d\u013e\7\61\2\2\u013e\u013f\5\u011d")
        buf.write("\u008f\2\u013f\u0140\7\61\2\2\u0140\u0141\5\u011f\u0090")
        buf.write("\2\u0141\16\3\2\2\2\u0142\u0143\t\2\2\2\u0143\u0144\3")
        buf.write("\2\2\2\u0144\u0145\b\b\2\2\u0145\20\3\2\2\2\u0146\u0147")
        buf.write("\7]\2\2\u0147\22\3\2\2\2\u0148\u0149\7_\2\2\u0149\24\3")
        buf.write("\2\2\2\u014a\u014b\7*\2\2\u014b\26\3\2\2\2\u014c\u014d")
        buf.write("\7+\2\2\u014d\30\3\2\2\2\u014e\u014f\7}\2\2\u014f\32\3")
        buf.write("\2\2\2\u0150\u0151\7\177\2\2\u0151\34\3\2\2\2\u0152\u0153")
        buf.write("\7=\2\2\u0153\36\3\2\2\2\u0154\u0155\7.\2\2\u0155 \3\2")
        buf.write("\2\2\u0156\u0157\7?\2\2\u0157\"\3\2\2\2\u0158\u0159\7")
        buf.write("A\2\2\u0159$\3\2\2\2\u015a\u015b\7<\2\2\u015b&\3\2\2\2")
        buf.write("\u015c\u015d\7\60\2\2\u015d(\3\2\2\2\u015e\u015f\7-\2")
        buf.write("\2\u015f\u0160\7-\2\2\u0160*\3\2\2\2\u0161\u0162\7/\2")
        buf.write("\2\u0162\u0163\7/\2\2\u0163,\3\2\2\2\u0164\u0165\7-\2")
        buf.write("\2\u0165.\3\2\2\2\u0166\u0167\7/\2\2\u0167\60\3\2\2\2")
        buf.write("\u0168\u0169\7\u0080\2\2\u0169\62\3\2\2\2\u016a\u016b")
        buf.write("\7#\2\2\u016b\64\3\2\2\2\u016c\u016d\7,\2\2\u016d\66\3")
        buf.write("\2\2\2\u016e\u016f\7\61\2\2\u016f8\3\2\2\2\u0170\u0171")
        buf.write("\7\'\2\2\u0171:\3\2\2\2\u0172\u0173\7@\2\2\u0173\u0174")
        buf.write("\7@\2\2\u0174<\3\2\2\2\u0175\u0176\7>\2\2\u0176\u0177")
        buf.write("\7>\2\2\u0177>\3\2\2\2\u0178\u0179\7@\2\2\u0179\u017a")
        buf.write("\7@\2\2\u017a\u017b\7@\2\2\u017b@\3\2\2\2\u017c\u017d")
        buf.write("\7>\2\2\u017dB\3\2\2\2\u017e\u017f\7@\2\2\u017fD\3\2\2")
        buf.write("\2\u0180\u0181\7>\2\2\u0181\u0182\7?\2\2\u0182F\3\2\2")
        buf.write("\2\u0183\u0184\7@\2\2\u0184\u0185\7?\2\2\u0185H\3\2\2")
        buf.write("\2\u0186\u0187\7?\2\2\u0187\u0188\7?\2\2\u0188J\3\2\2")
        buf.write("\2\u0189\u018a\7#\2\2\u018a\u018b\7?\2\2\u018bL\3\2\2")
        buf.write("\2\u018c\u018d\7?\2\2\u018d\u018e\7?\2\2\u018e\u018f\7")
        buf.write("?\2\2\u018fN\3\2\2\2\u0190\u0191\7#\2\2\u0191\u0192\7")
        buf.write("?\2\2\u0192\u0193\7?\2\2\u0193P\3\2\2\2\u0194\u0195\7")
        buf.write("(\2\2\u0195R\3\2\2\2\u0196\u0197\7`\2\2\u0197T\3\2\2\2")
        buf.write("\u0198\u0199\7~\2\2\u0199V\3\2\2\2\u019a\u019b\7(\2\2")
        buf.write("\u019b\u019c\7(\2\2\u019cX\3\2\2\2\u019d\u019e\7~\2\2")
        buf.write("\u019e\u019f\7~\2\2\u019fZ\3\2\2\2\u01a0\u01a1\7,\2\2")
        buf.write("\u01a1\u01a2\7?\2\2\u01a2\\\3\2\2\2\u01a3\u01a4\7\61\2")
        buf.write("\2\u01a4\u01a5\7?\2\2\u01a5^\3\2\2\2\u01a6\u01a7\7\'\2")
        buf.write("\2\u01a7\u01a8\7?\2\2\u01a8`\3\2\2\2\u01a9\u01aa\7-\2")
        buf.write("\2\u01aa\u01ab\7?\2\2\u01abb\3\2\2\2\u01ac\u01ad\7/\2")
        buf.write("\2\u01ad\u01ae\7?\2\2\u01aed\3\2\2\2\u01af\u01b0\7>\2")
        buf.write("\2\u01b0\u01b1\7>\2\2\u01b1\u01b2\7?\2\2\u01b2f\3\2\2")
        buf.write("\2\u01b3\u01b4\7@\2\2\u01b4\u01b5\7@\2\2\u01b5\u01b6\7")
        buf.write("?\2\2\u01b6h\3\2\2\2\u01b7\u01b8\7@\2\2\u01b8\u01b9\7")
        buf.write("@\2\2\u01b9\u01ba\7@\2\2\u01ba\u01bb\7?\2\2\u01bbj\3\2")
        buf.write("\2\2\u01bc\u01bd\7(\2\2\u01bd\u01be\7?\2\2\u01bel\3\2")
        buf.write("\2\2\u01bf\u01c0\7`\2\2\u01c0\u01c1\7?\2\2\u01c1n\3\2")
        buf.write("\2\2\u01c2\u01c3\7~\2\2\u01c3\u01c4\7?\2\2\u01c4p\3\2")
        buf.write("\2\2\u01c5\u01c6\7\60\2\2\u01c6\u01c7\7\60\2\2\u01c7\u01c8")
        buf.write("\7\60\2\2\u01c8\u01c9\3\2\2\2\u01c9\u01ca\b9\3\2\u01ca")
        buf.write("r\3\2\2\2\u01cb\u01cc\7p\2\2\u01cc\u01cd\7w\2\2\u01cd")
        buf.write("\u01ce\7n\2\2\u01ce\u01cf\7n\2\2\u01cft\3\2\2\2\u01d0")
        buf.write("\u01d1\7v\2\2\u01d1\u01d2\7t\2\2\u01d2\u01d3\7w\2\2\u01d3")
        buf.write("\u01da\7g\2\2\u01d4\u01d5\7h\2\2\u01d5\u01d6\7c\2\2\u01d6")
        buf.write("\u01d7\7n\2\2\u01d7\u01d8\7u\2\2\u01d8\u01da\7g\2\2\u01d9")
        buf.write("\u01d0\3\2\2\2\u01d9\u01d4\3\2\2\2\u01dav\3\2\2\2\u01db")
        buf.write("\u01dc\5\u0113\u008a\2\u01dc\u01e0\7\60\2\2\u01dd\u01df")
        buf.write("\5\u010d\u0087\2\u01de\u01dd\3\2\2\2\u01df\u01e2\3\2\2")
        buf.write("\2\u01e0\u01de\3\2\2\2\u01e0\u01e1\3\2\2\2\u01e1\u01e4")
        buf.write("\3\2\2\2\u01e2\u01e0\3\2\2\2\u01e3\u01e5\5\u0115\u008b")
        buf.write("\2\u01e4\u01e3\3\2\2\2\u01e4\u01e5\3\2\2\2\u01e5\u01f4")
        buf.write("\3\2\2\2\u01e6\u01e8\7\60\2\2\u01e7\u01e9\5\u010d\u0087")
        buf.write("\2\u01e8\u01e7\3\2\2\2\u01e9\u01ea\3\2\2\2\u01ea\u01e8")
        buf.write("\3\2\2\2\u01ea\u01eb\3\2\2\2\u01eb\u01ed\3\2\2\2\u01ec")
        buf.write("\u01ee\5\u0115\u008b\2\u01ed\u01ec\3\2\2\2\u01ed\u01ee")
        buf.write("\3\2\2\2\u01ee\u01f4\3\2\2\2\u01ef\u01f1\5\u0113\u008a")
        buf.write("\2\u01f0\u01f2\5\u0115\u008b\2\u01f1\u01f0\3\2\2\2\u01f1")
        buf.write("\u01f2\3\2\2\2\u01f2\u01f4\3\2\2\2\u01f3\u01db\3\2\2\2")
        buf.write("\u01f3\u01e6\3\2\2\2\u01f3\u01ef\3\2\2\2\u01f4x\3\2\2")
        buf.write("\2\u01f5\u01f6\7\62\2\2\u01f6\u01f7\t\3\2\2\u01f7\u01fb")
        buf.write("\t\4\2\2\u01f8\u01fa\5\u010f\u0088\2\u01f9\u01f8\3\2\2")
        buf.write("\2\u01fa\u01fd\3\2\2\2\u01fb\u01f9\3\2\2\2\u01fb\u01fc")
        buf.write("\3\2\2\2\u01fcz\3\2\2\2\u01fd\u01fb\3\2\2\2\u01fe\u01ff")
        buf.write("\7\62\2\2\u01ff\u0200\t\5\2\2\u0200\u0204\t\6\2\2\u0201")
        buf.write("\u0203\t\7\2\2\u0202\u0201\3\2\2\2\u0203\u0206\3\2\2\2")
        buf.write("\u0204\u0202\3\2\2\2\u0204\u0205\3\2\2\2\u0205|\3\2\2")
        buf.write("\2\u0206\u0204\3\2\2\2\u0207\u0208\7\62\2\2\u0208\u0209")
        buf.write("\t\b\2\2\u0209\u020d\t\t\2\2\u020a\u020c\t\n\2\2\u020b")
        buf.write("\u020a\3\2\2\2\u020c\u020f\3\2\2\2\u020d\u020b\3\2\2\2")
        buf.write("\u020d\u020e\3\2\2\2\u020e~\3\2\2\2\u020f\u020d\3\2\2")
        buf.write("\2\u0210\u0211\7\62\2\2\u0211\u0212\t\3\2\2\u0212\u0216")
        buf.write("\t\4\2\2\u0213\u0215\5\u010f\u0088\2\u0214\u0213\3\2\2")
        buf.write("\2\u0215\u0218\3\2\2\2\u0216\u0214\3\2\2\2\u0216\u0217")
        buf.write("\3\2\2\2\u0217\u0219\3\2\2\2\u0218\u0216\3\2\2\2\u0219")
        buf.write("\u021a\7p\2\2\u021a\u0080\3\2\2\2\u021b\u021c\7\62\2\2")
        buf.write("\u021c\u021d\t\5\2\2\u021d\u0221\t\6\2\2\u021e\u0220\t")
        buf.write("\7\2\2\u021f\u021e\3\2\2\2\u0220\u0223\3\2\2\2\u0221\u021f")
        buf.write("\3\2\2\2\u0221\u0222\3\2\2\2\u0222\u0224\3\2\2\2\u0223")
        buf.write("\u0221\3\2\2\2\u0224\u0225\7p\2\2\u0225\u0082\3\2\2\2")
        buf.write("\u0226\u0227\7\62\2\2\u0227\u0228\t\b\2\2\u0228\u022c")
        buf.write("\t\t\2\2\u0229\u022b\t\n\2\2\u022a\u0229\3\2\2\2\u022b")
        buf.write("\u022e\3\2\2\2\u022c\u022a\3\2\2\2\u022c\u022d\3\2\2\2")
        buf.write("\u022d\u022f\3\2\2\2\u022e\u022c\3\2\2\2\u022f\u0230\7")
        buf.write("p\2\2\u0230\u0084\3\2\2\2\u0231\u0232\5\u0113\u008a\2")
        buf.write("\u0232\u0233\7p\2\2\u0233\u0086\3\2\2\2\u0234\u0235\7")
        buf.write("d\2\2\u0235\u0236\7t\2\2\u0236\u0237\7g\2\2\u0237\u0238")
        buf.write("\7c\2\2\u0238\u0239\7m\2\2\u0239\u0088\3\2\2\2\u023a\u023b")
        buf.write("\7f\2\2\u023b\u023c\7q\2\2\u023c\u008a\3\2\2\2\u023d\u023e")
        buf.write("\7k\2\2\u023e\u023f\7p\2\2\u023f\u0240\7u\2\2\u0240\u0241")
        buf.write("\7v\2\2\u0241\u0242\7c\2\2\u0242\u0243\7p\2\2\u0243\u0244")
        buf.write("\7e\2\2\u0244\u0245\7g\2\2\u0245\u0246\7q\2\2\u0246\u0247")
        buf.write("\7h\2\2\u0247\u008c\3\2\2\2\u0248\u0249\7v\2\2\u0249\u024a")
        buf.write("\7{\2\2\u024a\u024b\7r\2\2\u024b\u024c\7g\2\2\u024c\u024d")
        buf.write("\7q\2\2\u024d\u024e\7h\2\2\u024e\u008e\3\2\2\2\u024f\u0250")
        buf.write("\7e\2\2\u0250\u0251\7c\2\2\u0251\u0252\7u\2\2\u0252\u0253")
        buf.write("\7g\2\2\u0253\u0090\3\2\2\2\u0254\u0255\7g\2\2\u0255\u0256")
        buf.write("\7n\2\2\u0256\u0257\7u\2\2\u0257\u0258\7g\2\2\u0258\u0092")
        buf.write("\3\2\2\2\u0259\u025a\7p\2\2\u025a\u025b\7g\2\2\u025b\u025c")
        buf.write("\7y\2\2\u025c\u0094\3\2\2\2\u025d\u025e\7x\2\2\u025e\u025f")
        buf.write("\7c\2\2\u025f\u0260\7t\2\2\u0260\u0096\3\2\2\2\u0261\u0262")
        buf.write("\7n\2\2\u0262\u0263\7g\2\2\u0263\u0264\7v\2\2\u0264\u0098")
        buf.write("\3\2\2\2\u0265\u0266\7e\2\2\u0266\u0267\7c\2\2\u0267\u0268")
        buf.write("\7v\2\2\u0268\u0269\7e\2\2\u0269\u026a\7j\2\2\u026a\u026b")
        buf.write("\3\2\2\2\u026b\u026c\bM\4\2\u026c\u009a\3\2\2\2\u026d")
        buf.write("\u026e\7h\2\2\u026e\u026f\7k\2\2\u026f\u0270\7p\2\2\u0270")
        buf.write("\u0271\7c\2\2\u0271\u0272\7n\2\2\u0272\u0273\7n\2\2\u0273")
        buf.write("\u0274\7{\2\2\u0274\u0275\3\2\2\2\u0275\u0276\bN\5\2\u0276")
        buf.write("\u009c\3\2\2\2\u0277\u0278\7t\2\2\u0278\u0279\7g\2\2\u0279")
        buf.write("\u027a\7v\2\2\u027a\u027b\7w\2\2\u027b\u027c\7t\2\2\u027c")
        buf.write("\u027d\7p\2\2\u027d\u009e\3\2\2\2\u027e\u027f\7x\2\2\u027f")
        buf.write("\u0280\7q\2\2\u0280\u0281\7k\2\2\u0281\u0282\7f\2\2\u0282")
        buf.write("\u00a0\3\2\2\2\u0283\u0284\7e\2\2\u0284\u0285\7q\2\2\u0285")
        buf.write("\u0286\7p\2\2\u0286\u0287\7v\2\2\u0287\u0288\7k\2\2\u0288")
        buf.write("\u0289\7p\2\2\u0289\u028a\7w\2\2\u028a\u028b\7g\2\2\u028b")
        buf.write("\u00a2\3\2\2\2\u028c\u028d\7h\2\2\u028d\u028e\7q\2\2\u028e")
        buf.write("\u028f\7t\2\2\u028f\u00a4\3\2\2\2\u0290\u0291\7u\2\2\u0291")
        buf.write("\u0292\7y\2\2\u0292\u0293\7k\2\2\u0293\u0294\7v\2\2\u0294")
        buf.write("\u0295\7e\2\2\u0295\u0296\7j\2\2\u0296\u0297\3\2\2\2\u0297")
        buf.write("\u0298\bS\6\2\u0298\u00a6\3\2\2\2\u0299\u029a\7y\2\2\u029a")
        buf.write("\u029b\7j\2\2\u029b\u029c\7k\2\2\u029c\u029d\7n\2\2\u029d")
        buf.write("\u029e\7g\2\2\u029e\u00a8\3\2\2\2\u029f\u02a0\7f\2\2\u02a0")
        buf.write("\u02a1\7g\2\2\u02a1\u02a2\7d\2\2\u02a2\u02a3\7w\2\2\u02a3")
        buf.write("\u02a4\7i\2\2\u02a4\u02a5\7i\2\2\u02a5\u02a6\7g\2\2\u02a6")
        buf.write("\u02a7\7t\2\2\u02a7\u00aa\3\2\2\2\u02a8\u02a9\7h\2\2\u02a9")
        buf.write("\u02aa\7w\2\2\u02aa\u02ab\7p\2\2\u02ab\u02ac\7e\2\2\u02ac")
        buf.write("\u02ad\7v\2\2\u02ad\u02ae\7k\2\2\u02ae\u02af\7q\2\2\u02af")
        buf.write("\u02b0\7p\2\2\u02b0\u00ac\3\2\2\2\u02b1\u02b2\7v\2\2\u02b2")
        buf.write("\u02b3\7j\2\2\u02b3\u02b4\7k\2\2\u02b4\u02b5\7u\2\2\u02b5")
        buf.write("\u00ae\3\2\2\2\u02b6\u02b7\7y\2\2\u02b7\u02b8\7k\2\2\u02b8")
        buf.write("\u02b9\7v\2\2\u02b9\u02ba\7j\2\2\u02ba\u02bb\3\2\2\2\u02bb")
        buf.write("\u02bc\bX\7\2\u02bc\u00b0\3\2\2\2\u02bd\u02be\7f\2\2\u02be")
        buf.write("\u02bf\7g\2\2\u02bf\u02c0\7h\2\2\u02c0\u02c1\7c\2\2\u02c1")
        buf.write("\u02c2\7w\2\2\u02c2\u02c3\7n\2\2\u02c3\u02c4\7v\2\2\u02c4")
        buf.write("\u00b2\3\2\2\2\u02c5\u02c6\7k\2\2\u02c6\u02c7\7h\2\2\u02c7")
        buf.write("\u00b4\3\2\2\2\u02c8\u02c9\7v\2\2\u02c9\u02ca\7j\2\2\u02ca")
        buf.write("\u02cb\7t\2\2\u02cb\u02cc\7q\2\2\u02cc\u02cd\7y\2\2\u02cd")
        buf.write("\u02ce\3\2\2\2\u02ce\u02cf\b[\b\2\u02cf\u00b6\3\2\2\2")
        buf.write("\u02d0\u02d1\7f\2\2\u02d1\u02d2\7g\2\2\u02d2\u02d3\7n")
        buf.write("\2\2\u02d3\u02d4\7g\2\2\u02d4\u02d5\7v\2\2\u02d5\u02d6")
        buf.write("\7g\2\2\u02d6\u00b8\3\2\2\2\u02d7\u02d8\7k\2\2\u02d8\u02d9")
        buf.write("\7p\2\2\u02d9\u00ba\3\2\2\2\u02da\u02db\7v\2\2\u02db\u02dc")
        buf.write("\7t\2\2\u02dc\u02dd\7{\2\2\u02dd\u02de\3\2\2\2\u02de\u02df")
        buf.write("\b^\t\2\u02df\u00bc\3\2\2\2\u02e0\u02e1\7e\2\2\u02e1\u02e2")
        buf.write("\7n\2\2\u02e2\u02e3\7c\2\2\u02e3\u02e4\7u\2\2\u02e4\u02e5")
        buf.write("\7u\2\2\u02e5\u00be\3\2\2\2\u02e6\u02e7\7g\2\2\u02e7\u02e8")
        buf.write("\7z\2\2\u02e8\u02e9\7v\2\2\u02e9\u02ea\7g\2\2\u02ea\u02eb")
        buf.write("\7p\2\2\u02eb\u02ec\7f\2\2\u02ec\u02ed\7u\2\2\u02ed\u00c0")
        buf.write("\3\2\2\2\u02ee\u02ef\7u\2\2\u02ef\u02f0\7w\2\2\u02f0\u02f1")
        buf.write("\7r\2\2\u02f1\u02f2\7g\2\2\u02f2\u02f3\7t\2\2\u02f3\u00c2")
        buf.write("\3\2\2\2\u02f4\u02f5\7e\2\2\u02f5\u02f6\7q\2\2\u02f6\u02f7")
        buf.write("\7p\2\2\u02f7\u02f8\7u\2\2\u02f8\u02f9\7v\2\2\u02f9\u02fa")
        buf.write("\7t\2\2\u02fa\u02fb\7w\2\2\u02fb\u02fc\7e\2\2\u02fc\u02fd")
        buf.write("\7v\2\2\u02fd\u02fe\7q\2\2\u02fe\u02ff\7t\2\2\u02ff\u00c4")
        buf.write("\3\2\2\2\u0300\u0301\7e\2\2\u0301\u0302\7q\2\2\u0302\u0303")
        buf.write("\7p\2\2\u0303\u0304\7u\2\2\u0304\u0305\7v\2\2\u0305\u00c6")
        buf.write("\3\2\2\2\u0306\u0307\7u\2\2\u0307\u0308\7v\2\2\u0308\u0309")
        buf.write("\7c\2\2\u0309\u030a\7v\2\2\u030a\u030b\7k\2\2\u030b\u030c")
        buf.write("\7e\2\2\u030c\u00c8\3\2\2\2\u030d\u030e\7i\2\2\u030e\u030f")
        buf.write("\7g\2\2\u030f\u0310\7v\2\2\u0310\u00ca\3\2\2\2\u0311\u0312")
        buf.write("\7u\2\2\u0312\u0313\7g\2\2\u0313\u0314\7v\2\2\u0314\u00cc")
        buf.write("\3\2\2\2\u0315\u0316\7c\2\2\u0316\u0317\7u\2\2\u0317\u0318")
        buf.write("\7{\2\2\u0318\u0319\7p\2\2\u0319\u031a\7e\2\2\u031a\u031b")
        buf.write("\3\2\2\2\u031b\u031c\bg\n\2\u031c\u00ce\3\2\2\2\u031d")
        buf.write("\u031e\7c\2\2\u031e\u031f\7y\2\2\u031f\u0320\7c\2\2\u0320")
        buf.write("\u0321\7k\2\2\u0321\u0322\7v\2\2\u0322\u0323\3\2\2\2\u0323")
        buf.write("\u0324\bh\13\2\u0324\u00d0\3\2\2\2\u0325\u0326\7c\2\2")
        buf.write("\u0326\u0327\7u\2\2\u0327\u00d2\3\2\2\2\u0328\u0329\7")
        buf.write("h\2\2\u0329\u032a\7t\2\2\u032a\u032b\7q\2\2\u032b\u032c")
        buf.write("\7o\2\2\u032c\u00d4\3\2\2\2\u032d\u032e\7g\2\2\u032e\u032f")
        buf.write("\7p\2\2\u032f\u0330\7w\2\2\u0330\u0331\7o\2\2\u0331\u0332")
        buf.write("\3\2\2\2\u0332\u0333\bk\f\2\u0333\u00d6\3\2\2\2\u0334")
        buf.write("\u0335\7g\2\2\u0335\u0336\7z\2\2\u0336\u0337\7r\2\2\u0337")
        buf.write("\u0338\7q\2\2\u0338\u0339\7t\2\2\u0339\u033a\7v\2\2\u033a")
        buf.write("\u033b\3\2\2\2\u033b\u033c\bl\r\2\u033c\u00d8\3\2\2\2")
        buf.write("\u033d\u033e\7k\2\2\u033e\u033f\7o\2\2\u033f\u0340\7r")
        buf.write("\2\2\u0340\u0341\7q\2\2\u0341\u0342\7t\2\2\u0342\u0343")
        buf.write("\7v\2\2\u0343\u0344\3\2\2\2\u0344\u0345\bm\16\2\u0345")
        buf.write("\u00da\3\2\2\2\u0346\u0347\7k\2\2\u0347\u0348\7o\2\2\u0348")
        buf.write("\u0349\7r\2\2\u0349\u034a\7n\2\2\u034a\u034b\7g\2\2\u034b")
        buf.write("\u034c\7o\2\2\u034c\u034d\7g\2\2\u034d\u034e\7p\2\2\u034e")
        buf.write("\u034f\7v\2\2\u034f\u0350\7u\2\2\u0350\u0351\3\2\2\2\u0351")
        buf.write("\u0352\bn\17\2\u0352\u00dc\3\2\2\2\u0353\u0354\7r\2\2")
        buf.write("\u0354\u0355\7t\2\2\u0355\u0356\7k\2\2\u0356\u0357\7x")
        buf.write("\2\2\u0357\u0358\7c\2\2\u0358\u0359\7v\2\2\u0359\u035a")
        buf.write("\7g\2\2\u035a\u035b\3\2\2\2\u035b\u035c\bo\20\2\u035c")
        buf.write("\u00de\3\2\2\2\u035d\u035e\7r\2\2\u035e\u035f\7w\2\2\u035f")
        buf.write("\u0360\7d\2\2\u0360\u0361\7n\2\2\u0361\u0362\7k\2\2\u0362")
        buf.write("\u0363\7e\2\2\u0363\u0364\3\2\2\2\u0364\u0365\bp\21\2")
        buf.write("\u0365\u00e0\3\2\2\2\u0366\u0367\7k\2\2\u0367\u0368\7")
        buf.write("p\2\2\u0368\u0369\7v\2\2\u0369\u036a\7g\2\2\u036a\u036b")
        buf.write("\7t\2\2\u036b\u036c\7h\2\2\u036c\u036d\7c\2\2\u036d\u036e")
        buf.write("\7e\2\2\u036e\u036f\7g\2\2\u036f\u0370\3\2\2\2\u0370\u0371")
        buf.write("\bq\22\2\u0371\u00e2\3\2\2\2\u0372\u0373\7r\2\2\u0373")
        buf.write("\u0374\7c\2\2\u0374\u0375\7e\2\2\u0375\u0376\7m\2\2\u0376")
        buf.write("\u0377\7c\2\2\u0377\u0378\7i\2\2\u0378\u0379\7g\2\2\u0379")
        buf.write("\u037a\3\2\2\2\u037a\u037b\br\23\2\u037b\u00e4\3\2\2\2")
        buf.write("\u037c\u037d\7r\2\2\u037d\u037e\7t\2\2\u037e\u037f\7q")
        buf.write("\2\2\u037f\u0380\7v\2\2\u0380\u0381\7g\2\2\u0381\u0382")
        buf.write("\7e\2\2\u0382\u0383\7v\2\2\u0383\u0384\7g\2\2\u0384\u0385")
        buf.write("\7f\2\2\u0385\u0386\3\2\2\2\u0386\u0387\bs\24\2\u0387")
        buf.write("\u00e6\3\2\2\2\u0388\u0389\7{\2\2\u0389\u038a\7k\2\2\u038a")
        buf.write("\u038b\7g\2\2\u038b\u038c\7n\2\2\u038c\u038d\7f\2\2\u038d")
        buf.write("\u038e\3\2\2\2\u038e\u038f\bt\25\2\u038f\u00e8\3\2\2\2")
        buf.write("\u0390\u0394\5\u0117\u008c\2\u0391\u0393\5\u0119\u008d")
        buf.write("\2\u0392\u0391\3\2\2\2\u0393\u0396\3\2\2\2\u0394\u0392")
        buf.write("\3\2\2\2\u0394\u0395\3\2\2\2\u0395\u00ea\3\2\2\2\u0396")
        buf.write("\u0394\3\2\2\2\u0397\u039b\7$\2\2\u0398\u039a\5\u00f7")
        buf.write("|\2\u0399\u0398\3\2\2\2\u039a\u039d\3\2\2\2\u039b\u0399")
        buf.write("\3\2\2\2\u039b\u039c\3\2\2\2\u039c\u039e\3\2\2\2\u039d")
        buf.write("\u039b\3\2\2\2\u039e\u03a8\7$\2\2\u039f\u03a3\7)\2\2\u03a0")
        buf.write("\u03a2\5\u00f9}\2\u03a1\u03a0\3\2\2\2\u03a2\u03a5\3\2")
        buf.write("\2\2\u03a3\u03a1\3\2\2\2\u03a3\u03a4\3\2\2\2\u03a4\u03a6")
        buf.write("\3\2\2\2\u03a5\u03a3\3\2\2\2\u03a6\u03a8\7)\2\2\u03a7")
        buf.write("\u0397\3\2\2\2\u03a7\u039f\3\2\2\2\u03a8\u00ec\3\2\2\2")
        buf.write("\u03a9\u03af\7b\2\2\u03aa\u03ab\7^\2\2\u03ab\u03ae\7b")
        buf.write("\2\2\u03ac\u03ae\n\13\2\2\u03ad\u03aa\3\2\2\2\u03ad\u03ac")
        buf.write("\3\2\2\2\u03ae\u03b1\3\2\2\2\u03af\u03ad\3\2\2\2\u03af")
        buf.write("\u03b0\3\2\2\2\u03b0\u03b2\3\2\2\2\u03b1\u03af\3\2\2\2")
        buf.write("\u03b2\u03b3\7b\2\2\u03b3\u00ee\3\2\2\2\u03b4\u03b6\t")
        buf.write("\f\2\2\u03b5\u03b4\3\2\2\2\u03b6\u03b7\3\2\2\2\u03b7\u03b5")
        buf.write("\3\2\2\2\u03b7\u03b8\3\2\2\2\u03b8\u03b9\3\2\2\2\u03b9")
        buf.write("\u03ba\bx\2\2\u03ba\u00f0\3\2\2\2\u03bb\u03bc\7\61\2\2")
        buf.write("\u03bc\u03bd\7,\2\2\u03bd\u03c1\3\2\2\2\u03be\u03c0\13")
        buf.write("\2\2\2\u03bf\u03be\3\2\2\2\u03c0\u03c3\3\2\2\2\u03c1\u03c2")
        buf.write("\3\2\2\2\u03c1\u03bf\3\2\2\2\u03c2\u03c4\3\2\2\2\u03c3")
        buf.write("\u03c1\3\2\2\2\u03c4\u03c5\7,\2\2\u03c5\u03c6\7\61\2\2")
        buf.write("\u03c6\u03c7\3\2\2\2\u03c7\u03c8\by\2\2\u03c8\u00f2\3")
        buf.write("\2\2\2\u03c9\u03ca\7\61\2\2\u03ca\u03cb\7\61\2\2\u03cb")
        buf.write("\u03cf\3\2\2\2\u03cc\u03ce\n\2\2\2\u03cd\u03cc\3\2\2\2")
        buf.write("\u03ce\u03d1\3\2\2\2\u03cf\u03cd\3\2\2\2\u03cf\u03d0\3")
        buf.write("\2\2\2\u03d0\u03d2\3\2\2\2\u03d1\u03cf\3\2\2\2\u03d2\u03d3")
        buf.write("\bz\2\2\u03d3\u00f4\3\2\2\2\u03d4\u03d5\13\2\2\2\u03d5")
        buf.write("\u00f6\3\2\2\2\u03d6\u03db\n\r\2\2\u03d7\u03d8\7^\2\2")
        buf.write("\u03d8\u03db\5\u00fb~\2\u03d9\u03db\5\u0109\u0085\2\u03da")
        buf.write("\u03d6\3\2\2\2\u03da\u03d7\3\2\2\2\u03da\u03d9\3\2\2\2")
        buf.write("\u03db\u00f8\3\2\2\2\u03dc\u03e1\n\16\2\2\u03dd\u03de")
        buf.write("\7^\2\2\u03de\u03e1\5\u00fb~\2\u03df\u03e1\5\u0109\u0085")
        buf.write("\2\u03e0\u03dc\3\2\2\2\u03e0\u03dd\3\2\2\2\u03e0\u03df")
        buf.write("\3\2\2\2\u03e1\u00fa\3\2\2\2\u03e2\u03e7\5\u00fd\177\2")
        buf.write("\u03e3\u03e7\7\62\2\2\u03e4\u03e7\5\u00ff\u0080\2\u03e5")
        buf.write("\u03e7\5\u0101\u0081\2\u03e6\u03e2\3\2\2\2\u03e6\u03e3")
        buf.write("\3\2\2\2\u03e6\u03e4\3\2\2\2\u03e6\u03e5\3\2\2\2\u03e7")
        buf.write("\u00fc\3\2\2\2\u03e8\u03eb\5\u0103\u0082\2\u03e9\u03eb")
        buf.write("\5\u0105\u0083\2\u03ea\u03e8\3\2\2\2\u03ea\u03e9\3\2\2")
        buf.write("\2\u03eb\u00fe\3\2\2\2\u03ec\u03ed\7z\2\2\u03ed\u03ee")
        buf.write("\5\u010f\u0088\2\u03ee\u03ef\5\u010f\u0088\2\u03ef\u0100")
        buf.write("\3\2\2\2\u03f0\u03f1\7w\2\2\u03f1\u03f2\5\u010f\u0088")
        buf.write("\2\u03f2\u03f3\5\u010f\u0088\2\u03f3\u03f4\5\u010f\u0088")
        buf.write("\2\u03f4\u03f5\5\u010f\u0088\2\u03f5\u0102\3\2\2\2\u03f6")
        buf.write("\u03f7\t\17\2\2\u03f7\u0104\3\2\2\2\u03f8\u03f9\n\20\2")
        buf.write("\2\u03f9\u0106\3\2\2\2\u03fa\u03fe\5\u0103\u0082\2\u03fb")
        buf.write("\u03fe\5\u010d\u0087\2\u03fc\u03fe\t\21\2\2\u03fd\u03fa")
        buf.write("\3\2\2\2\u03fd\u03fb\3\2\2\2\u03fd\u03fc\3\2\2\2\u03fe")
        buf.write("\u0108\3\2\2\2\u03ff\u0400\7^\2\2\u0400\u0401\5\u010b")
        buf.write("\u0086\2\u0401\u010a\3\2\2\2\u0402\u0403\7\17\2\2\u0403")
        buf.write("\u0406\7\f\2\2\u0404\u0406\5\17\b\2\u0405\u0402\3\2\2")
        buf.write("\2\u0405\u0404\3\2\2\2\u0406\u010c\3\2\2\2\u0407\u0408")
        buf.write("\t\22\2\2\u0408\u010e\3\2\2\2\u0409\u040a\t\4\2\2\u040a")
        buf.write("\u0110\3\2\2\2\u040b\u040c\t\6\2\2\u040c\u0112\3\2\2\2")
        buf.write("\u040d\u0416\7\62\2\2\u040e\u0412\t\23\2\2\u040f\u0411")
        buf.write("\5\u010d\u0087\2\u0410\u040f\3\2\2\2\u0411\u0414\3\2\2")
        buf.write("\2\u0412\u0410\3\2\2\2\u0412\u0413\3\2\2\2\u0413\u0416")
        buf.write("\3\2\2\2\u0414\u0412\3\2\2\2\u0415\u040d\3\2\2\2\u0415")
        buf.write("\u040e\3\2\2\2\u0416\u0114\3\2\2\2\u0417\u0419\t\24\2")
        buf.write("\2\u0418\u041a\t\25\2\2\u0419\u0418\3\2\2\2\u0419\u041a")
        buf.write("\3\2\2\2\u041a\u041c\3\2\2\2\u041b\u041d\5\u010d\u0087")
        buf.write("\2\u041c\u041b\3\2\2\2\u041d\u041e\3\2\2\2\u041e\u041c")
        buf.write("\3\2\2\2\u041e\u041f\3\2\2\2\u041f\u0116\3\2\2\2\u0420")
        buf.write("\u0424\t\26\2\2\u0421\u0422\7^\2\2\u0422\u0424\5\u0101")
        buf.write("\u0081\2\u0423\u0420\3\2\2\2\u0423\u0421\3\2\2\2\u0424")
        buf.write("\u0118\3\2\2\2\u0425\u0428\5\u0117\u008c\2\u0426\u0428")
        buf.write("\5\u010d\u0087\2\u0427\u0425\3\2\2\2\u0427\u0426\3\2\2")
        buf.write("\2\u0428\u011a\3\2\2\2\u0429\u042d\5\u0117\u008c\2\u042a")
        buf.write("\u042c\5\u0119\u008d\2\u042b\u042a\3\2\2\2\u042c\u042f")
        buf.write("\3\2\2\2\u042d\u042b\3\2\2\2\u042d\u042e\3\2\2\2\u042e")
        buf.write("\u011c\3\2\2\2\u042f\u042d\3\2\2\2\u0430\u0434\5\u0121")
        buf.write("\u0091\2\u0431\u0433\5\u0123\u0092\2\u0432\u0431\3\2\2")
        buf.write("\2\u0433\u0436\3\2\2\2\u0434\u0432\3\2\2\2\u0434\u0435")
        buf.write("\3\2\2\2\u0435\u011e\3\2\2\2\u0436\u0434\3\2\2\2\u0437")
        buf.write("\u0439\5\u0119\u008d\2\u0438\u0437\3\2\2\2\u0439\u043c")
        buf.write("\3\2\2\2\u043a\u0438\3\2\2\2\u043a\u043b\3\2\2\2\u043b")
        buf.write("\u0120\3\2\2\2\u043c\u043a\3\2\2\2\u043d\u0441\n\27\2")
        buf.write("\2\u043e\u0441\5\u0127\u0094\2\u043f\u0441\5\u0129\u0095")
        buf.write("\2\u0440\u043d\3\2\2\2\u0440\u043e\3\2\2\2\u0440\u043f")
        buf.write("\3\2\2\2\u0441\u0122\3\2\2\2\u0442\u0446\n\30\2\2\u0443")
        buf.write("\u0446\5\u0127\u0094\2\u0444\u0446\5\u0129\u0095\2\u0445")
        buf.write("\u0442\3\2\2\2\u0445\u0443\3\2\2\2\u0445\u0444\3\2\2\2")
        buf.write("\u0446\u0124\3\2\2\2\u0447\u0448\n\2\2\2\u0448\u0126\3")
        buf.write("\2\2\2\u0449\u044a\7^\2\2\u044a\u044b\5\u0125\u0093\2")
        buf.write("\u044b\u0128\3\2\2\2\u044c\u0450\7]\2\2\u044d\u044f\5")
        buf.write("\u012b\u0096\2\u044e\u044d\3\2\2\2\u044f\u0452\3\2\2\2")
        buf.write("\u0450\u044e\3\2\2\2\u0450\u0451\3\2\2\2\u0451\u0453\3")
        buf.write("\2\2\2\u0452\u0450\3\2\2\2\u0453\u0454\7_\2\2\u0454\u012a")
        buf.write("\3\2\2\2\u0455\u0458\n\31\2\2\u0456\u0458\5\u0127\u0094")
        buf.write("\2\u0457\u0455\3\2\2\2\u0457\u0456\3\2\2\2\u0458\u012c")
        buf.write("\3\2\2\2,\2\u01d9\u01e0\u01e4\u01ea\u01ed\u01f1\u01f3")
        buf.write("\u01fb\u0204\u020d\u0216\u0221\u022c\u0394\u039b\u03a3")
        buf.write("\u03a7\u03ad\u03af\u03b7\u03c1\u03cf\u03da\u03e0\u03e6")
        buf.write("\u03ea\u03fd\u0405\u0412\u0415\u0419\u041e\u0423\u0427")
        buf.write("\u042d\u0434\u043a\u0440\u0445\u0450\u0457\26\2\3\2\3")
        buf.write("9\2\3M\3\3N\4\3S\5\3X\6\3[\7\3^\b\3g\t\3h\n\3k\13\3l\f")
        buf.write("\3m\r\3n\16\3o\17\3p\20\3q\21\3r\22\3s\23\3t\24")
        return buf.getvalue()


class jsparserLexer(Lexer):

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    T__0 = 1
    T__1 = 2
    T__2 = 3
    T__3 = 4
    T__4 = 5
    RegularExpressionLiteral = 6
    LineTerminator = 7
    OpenBracket = 8
    CloseBracket = 9
    OpenParen = 10
    CloseParen = 11
    OpenBrace = 12
    CloseBrace = 13
    SemiColon = 14
    Comma = 15
    Assign = 16
    QuestionMark = 17
    Colon = 18
    Dot = 19
    PlusPlus = 20
    MinusMinus = 21
    Plus = 22
    Minus = 23
    BitNot = 24
    Not = 25
    Multiply = 26
    Divide = 27
    Modulus = 28
    RightShiftArithmetic = 29
    LeftShiftArithmetic = 30
    RightShiftLogical = 31
    LessThan = 32
    MoreThan = 33
    LessThanEquals = 34
    GreaterThanEquals = 35
    Equals = 36
    NotEquals = 37
    IdentityEquals = 38
    IdentityNotEquals = 39
    BitAnd = 40
    BitXOr = 41
    BitOr = 42
    And = 43
    Or = 44
    MultiplyAssign = 45
    DivideAssign = 46
    ModulusAssign = 47
    PlusAssign = 48
    MinusAssign = 49
    LeftShiftArithmeticAssign = 50
    RightShiftArithmeticAssign = 51
    RightShiftLogicalAssign = 52
    BitAndAssign = 53
    BitXorAssign = 54
    BitOrAssign = 55
    Ellipsis = 56
    NullLiteral = 57
    BooleanLiteral = 58
    DecimalLiteral = 59
    HexIntegerLiteral = 60
    OctalIntegerLiteral2 = 61
    BinaryIntegerLiteral = 62
    BigHexIntegerLiteral = 63
    BigOctalIntegerLiteral = 64
    BigBinaryIntegerLiteral = 65
    BigDecimalIntegerLiteral = 66
    Break = 67
    Do = 68
    Instanceof = 69
    Typeof = 70
    Case = 71
    Else = 72
    New = 73
    Var = 74
    Let = 75
    Catch = 76
    Finally = 77
    Return = 78
    Void = 79
    Continue = 80
    For = 81
    Switch = 82
    While = 83
    Debugger = 84
    Function = 85
    This = 86
    With = 87
    Default = 88
    If = 89
    Throw = 90
    Delete = 91
    In = 92
    Try = 93
    Class = 94
    Extends = 95
    Super = 96
    Constructor = 97
    Const = 98
    Static = 99
    Get = 100
    Set = 101
    Async = 102
    Await = 103
    As = 104
    From = 105
    Enum = 106
    Export = 107
    Import = 108
    Implements = 109
    Private = 110
    Public = 111
    Interface = 112
    Package = 113
    Protected = 114
    Yield = 115
    Identifier = 116
    StringLiteral = 117
    TemplateStringLiteral = 118
    WhiteSpaces = 119
    MultiLineComment = 120
    SingleLineComment = 121
    UnexpectedCharacter = 122
    IdentifierName = 123

    channelNames = [ u"DEFAULT_TOKEN_CHANNEL", u"HIDDEN" ]

    modeNames = [ "DEFAULT_MODE" ]

    literalNames = [ "<INVALID>",
            "'#'", "'**'", "'??'", "'=>'", "'**='", "'['", "']'", "'('", 
            "')'", "'{'", "'}'", "';'", "','", "'='", "'?'", "':'", "'.'", 
            "'++'", "'--'", "'+'", "'-'", "'~'", "'!'", "'*'", "'/'", "'%'", 
            "'>>'", "'<<'", "'>>>'", "'<'", "'>'", "'<='", "'>='", "'=='", 
            "'!='", "'==='", "'!=='", "'&'", "'^'", "'|'", "'&&'", "'||'", 
            "'*='", "'/='", "'%='", "'+='", "'-='", "'<<='", "'>>='", "'>>>='", 
            "'&='", "'^='", "'|='", "'...'", "'null'", "'break'", "'do'", 
            "'instanceof'", "'typeof'", "'case'", "'else'", "'new'", "'var'", 
            "'let'", "'catch'", "'finally'", "'return'", "'void'", "'continue'", 
            "'for'", "'switch'", "'while'", "'debugger'", "'function'", 
            "'this'", "'with'", "'default'", "'if'", "'throw'", "'delete'", 
            "'in'", "'try'", "'class'", "'extends'", "'super'", "'constructor'", 
            "'const'", "'static'", "'get'", "'set'", "'async'", "'await'", 
            "'as'", "'from'", "'enum'", "'export'", "'import'", "'implements'", 
            "'private'", "'public'", "'interface'", "'package'", "'protected'", 
            "'yield'" ]

    symbolicNames = [ "<INVALID>",
            "RegularExpressionLiteral", "LineTerminator", "OpenBracket", 
            "CloseBracket", "OpenParen", "CloseParen", "OpenBrace", "CloseBrace", 
            "SemiColon", "Comma", "Assign", "QuestionMark", "Colon", "Dot", 
            "PlusPlus", "MinusMinus", "Plus", "Minus", "BitNot", "Not", 
            "Multiply", "Divide", "Modulus", "RightShiftArithmetic", "LeftShiftArithmetic", 
            "RightShiftLogical", "LessThan", "MoreThan", "LessThanEquals", 
            "GreaterThanEquals", "Equals", "NotEquals", "IdentityEquals", 
            "IdentityNotEquals", "BitAnd", "BitXOr", "BitOr", "And", "Or", 
            "MultiplyAssign", "DivideAssign", "ModulusAssign", "PlusAssign", 
            "MinusAssign", "LeftShiftArithmeticAssign", "RightShiftArithmeticAssign", 
            "RightShiftLogicalAssign", "BitAndAssign", "BitXorAssign", "BitOrAssign", 
            "Ellipsis", "NullLiteral", "BooleanLiteral", "DecimalLiteral", 
            "HexIntegerLiteral", "OctalIntegerLiteral2", "BinaryIntegerLiteral", 
            "BigHexIntegerLiteral", "BigOctalIntegerLiteral", "BigBinaryIntegerLiteral", 
            "BigDecimalIntegerLiteral", "Break", "Do", "Instanceof", "Typeof", 
            "Case", "Else", "New", "Var", "Let", "Catch", "Finally", "Return", 
            "Void", "Continue", "For", "Switch", "While", "Debugger", "Function", 
            "This", "With", "Default", "If", "Throw", "Delete", "In", "Try", 
            "Class", "Extends", "Super", "Constructor", "Const", "Static", 
            "Get", "Set", "Async", "Await", "As", "From", "Enum", "Export", 
            "Import", "Implements", "Private", "Public", "Interface", "Package", 
            "Protected", "Yield", "Identifier", "StringLiteral", "TemplateStringLiteral", 
            "WhiteSpaces", "MultiLineComment", "SingleLineComment", "UnexpectedCharacter", 
            "IdentifierName" ]

    ruleNames = [ "T__0", "T__1", "T__2", "T__3", "T__4", "RegularExpressionLiteral", 
                  "LineTerminator", "OpenBracket", "CloseBracket", "OpenParen", 
                  "CloseParen", "OpenBrace", "CloseBrace", "SemiColon", 
                  "Comma", "Assign", "QuestionMark", "Colon", "Dot", "PlusPlus", 
                  "MinusMinus", "Plus", "Minus", "BitNot", "Not", "Multiply", 
                  "Divide", "Modulus", "RightShiftArithmetic", "LeftShiftArithmetic", 
                  "RightShiftLogical", "LessThan", "MoreThan", "LessThanEquals", 
                  "GreaterThanEquals", "Equals", "NotEquals", "IdentityEquals", 
                  "IdentityNotEquals", "BitAnd", "BitXOr", "BitOr", "And", 
                  "Or", "MultiplyAssign", "DivideAssign", "ModulusAssign", 
                  "PlusAssign", "MinusAssign", "LeftShiftArithmeticAssign", 
                  "RightShiftArithmeticAssign", "RightShiftLogicalAssign", 
                  "BitAndAssign", "BitXorAssign", "BitOrAssign", "Ellipsis", 
                  "NullLiteral", "BooleanLiteral", "DecimalLiteral", "HexIntegerLiteral", 
                  "OctalIntegerLiteral2", "BinaryIntegerLiteral", "BigHexIntegerLiteral", 
                  "BigOctalIntegerLiteral", "BigBinaryIntegerLiteral", "BigDecimalIntegerLiteral", 
                  "Break", "Do", "Instanceof", "Typeof", "Case", "Else", 
                  "New", "Var", "Let", "Catch", "Finally", "Return", "Void", 
                  "Continue", "For", "Switch", "While", "Debugger", "Function", 
                  "This", "With", "Default", "If", "Throw", "Delete", "In", 
                  "Try", "Class", "Extends", "Super", "Constructor", "Const", 
                  "Static", "Get", "Set", "Async", "Await", "As", "From", 
                  "Enum", "Export", "Import", "Implements", "Private", "Public", 
                  "Interface", "Package", "Protected", "Yield", "Identifier", 
                  "StringLiteral", "TemplateStringLiteral", "WhiteSpaces", 
                  "MultiLineComment", "SingleLineComment", "UnexpectedCharacter", 
                  "DoubleStringCharacter", "SingleStringCharacter", "EscapeSequence", 
                  "CharacterEscapeSequence", "HexEscapeSequence", "UnicodeEscapeSequence", 
                  "SingleEscapeCharacter", "NonEscapeCharacter", "EscapeCharacter", 
                  "LineContinuation", "LineTerminatorSequence", "DecimalDigit", 
                  "HexDigit", "OctalDigit", "DecimalIntegerLiteral", "ExponentPart", 
                  "IdentifierStart", "IdentifierPart", "IdentifierName", 
                  "RegularExpressionBody", "RegularExpressionFlags", "RegularExpressionFirstChar", 
                  "RegularExpressionChar", "RegularExpressionNonTerminator", 
                  "RegularExpressionBackslashSequence", "RegularExpressionClass", 
                  "RegularExpressionClassChar" ]

    grammarFileName = "js_grammar.g4"

    def __init__(self, input=None, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.8")
        self._interp = LexerATNSimulator(self, self.atn, self.decisionsToDFA, PredictionContextCache())
        self._actions = None
        self._predicates = None


         
        private IToken lastToken = null;
         
        public override IToken NextToken() {
            
            // Get the next token.
            IToken next = base.NextToken();
            
            if (next.Channel == Lexer.DefaultTokenChannel) {
                // Keep track of the last token on the default channel.                                              
                this.lastToken = next;
            }
            
            return next;
        }

        private bool isRegexPossible() {
                                           
            if (this.lastToken == null) {
                // No token has been produced yet: at the start of the input,
                // no division is possible, so a regex literal _is_ possible.
                return true;
            }
            
            switch (this.lastToken.Type) {
                case Identifier:
                case NullLiteral:
                case BooleanLiteral:
                case This:
                case CloseBracket:
                case CloseParen:
                case DecimalLiteral:
                case HexIntegerLiteral:
                case OctalIntegerLiteral2:
                case BinaryIntegerLiteral: 
                case BigHexIntegerLiteral: 
                case BigOctalIntegerLiteral:
                case BigBinaryIntegerLiteral:
                case BigDecimalIntegerLiteral:
                case StringLiteral:
                case PlusPlus:
                case MinusMinus:
                    // After any of the tokens above, no regex literal can follow.
                    return false;
                default:
                    // In all other cases, a regex literal _is_ possible.
                    return true;
            }
        }
        
        private void notImplemented()
        {
            throw new NotImplementedException("This grammar construction doesn't supported");
        }


    def action(self, localctx:RuleContext, ruleIndex:int, actionIndex:int):
        if self._actions is None:
            actions = dict()
            actions[55] = self.Ellipsis_action 
            actions[75] = self.Catch_action 
            actions[76] = self.Finally_action 
            actions[81] = self.Switch_action 
            actions[86] = self.With_action 
            actions[89] = self.Throw_action 
            actions[92] = self.Try_action 
            actions[101] = self.Async_action 
            actions[102] = self.Await_action 
            actions[105] = self.Enum_action 
            actions[106] = self.Export_action 
            actions[107] = self.Import_action 
            actions[108] = self.Implements_action 
            actions[109] = self.Private_action 
            actions[110] = self.Public_action 
            actions[111] = self.Interface_action 
            actions[112] = self.Package_action 
            actions[113] = self.Protected_action 
            actions[114] = self.Yield_action 
            self._actions = actions
        action = self._actions.get(ruleIndex, None)
        if action is not None:
            action(localctx, actionIndex)
        else:
            raise Exception("No registered action for:" + str(ruleIndex))


    def Ellipsis_action(self, localctx:RuleContext , actionIndex:int):
        if actionIndex == 0:
            notImplemented();
     

    def Catch_action(self, localctx:RuleContext , actionIndex:int):
        if actionIndex == 1:
            notImplemented();
     

    def Finally_action(self, localctx:RuleContext , actionIndex:int):
        if actionIndex == 2:
            notImplemented();
     

    def Switch_action(self, localctx:RuleContext , actionIndex:int):
        if actionIndex == 3:
            notImplemented();
     

    def With_action(self, localctx:RuleContext , actionIndex:int):
        if actionIndex == 4:
            notImplemented();
     

    def Throw_action(self, localctx:RuleContext , actionIndex:int):
        if actionIndex == 5:
            notImplemented();
     

    def Try_action(self, localctx:RuleContext , actionIndex:int):
        if actionIndex == 6:
            notImplemented();
     

    def Async_action(self, localctx:RuleContext , actionIndex:int):
        if actionIndex == 7:
            notImplemented();
     

    def Await_action(self, localctx:RuleContext , actionIndex:int):
        if actionIndex == 8:
            notImplemented();
     

    def Enum_action(self, localctx:RuleContext , actionIndex:int):
        if actionIndex == 9:
            notImplemented();
     

    def Export_action(self, localctx:RuleContext , actionIndex:int):
        if actionIndex == 10:
            notImplemented();
     

    def Import_action(self, localctx:RuleContext , actionIndex:int):
        if actionIndex == 11:
            notImplemented();
     

    def Implements_action(self, localctx:RuleContext , actionIndex:int):
        if actionIndex == 12:
            notImplemented();
     

    def Private_action(self, localctx:RuleContext , actionIndex:int):
        if actionIndex == 13:
            notImplemented();
     

    def Public_action(self, localctx:RuleContext , actionIndex:int):
        if actionIndex == 14:
            notImplemented();
     

    def Interface_action(self, localctx:RuleContext , actionIndex:int):
        if actionIndex == 15:
            notImplemented();
     

    def Package_action(self, localctx:RuleContext , actionIndex:int):
        if actionIndex == 16:
            notImplemented();
     

    def Protected_action(self, localctx:RuleContext , actionIndex:int):
        if actionIndex == 17:
            notImplemented();
     

    def Yield_action(self, localctx:RuleContext , actionIndex:int):
        if actionIndex == 18:
            notImplemented();
     

    def sempred(self, localctx:RuleContext, ruleIndex:int, predIndex:int):
        if self._predicates is None:
            preds = dict()
            preds[5] = self.RegularExpressionLiteral_sempred
            self._predicates = preds
        pred = self._predicates.get(ruleIndex, None)
        if pred is not None:
            return pred(localctx, predIndex)
        else:
            raise Exception("No registered predicate for:" + str(ruleIndex))

    def RegularExpressionLiteral_sempred(self, localctx:RuleContext, predIndex:int):
            if predIndex == 0:
                return isRegexPossible()
         


